android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->com.getbase.floatingactionbutton.FloatingActionsMenu$1:boolean dispatchTouchEvent(android.view.MotionEvent)
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->com.getbase.floatingactionbutton.FloatingActionsMenu$1:boolean dispatchTouchEvent(android.view.MotionEvent)
com.getbase.floatingactionbutton.FloatingActionsMenu:void toggle()->com.getbase.floatingactionbutton.FloatingActionsMenu:void expand()
com.getbase.floatingactionbutton.FloatingActionsMenu:void expand()->com.getbase.floatingactionbutton.TouchDelegateGroup:void setEnabled(java.lang.Boolean)
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->com.getbase.floatingactionbutton.FloatingActionButton:boolean dispatchTouchEvent(android.view.MotionEvent)
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->com.getbase.floatingactionbutton.FloatingActionButton:boolean dispatchTouchEvent(android.view.MotionEvent)
com.ichi2.anki.DeckPicker:void lambda$configureFloatingActionsMenu$6$DeckPicker(com.getbase.floatingactionbutton.FloatingActionButton)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void lambda$configureFloatingActionsMenu$6$DeckPicker(com.getbase.floatingactionbutton.FloatingActionButton)->com.getbase.floatingactionbutton.FloatingActionsMenu:void collapse()
com.getbase.floatingactionbutton.FloatingActionsMenu:void collapse()->com.getbase.floatingactionbutton.FloatingActionsMenu:void collapse(java.lang.Boolean)
com.getbase.floatingactionbutton.FloatingActionsMenu:void collapse(java.lang.Boolean)->com.getbase.floatingactionbutton.TouchDelegateGroup:void setEnabled(java.lang.Boolean)
com.ichi2.anki.DeckPicker:void lambda$configureFloatingActionsMenu$6$DeckPicker(com.getbase.floatingactionbutton.FloatingActionButton)->com.ichi2.anki.DeckPicker:void addNote()
com.ichi2.anki.DeckPicker:void addNote()->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void addNote()->com.ichi2.anki.AnkiActivity:void startActivityForResultWithAnimation(android.content.Intent,java.lang.Integer,java.lang.Integer)
com.ichi2.anki.AnkiActivity:void startActivityForResultWithAnimation(android.content.Intent,java.lang.Integer,java.lang.Integer)->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void startActivityForResultWithAnimation(android.content.Intent,java.lang.Integer,java.lang.Integer)->com.ichi2.anki.AnkiActivity:void enableIntentAnimation(android.content.Intent)
com.ichi2.anki.AnkiActivity:void enableIntentAnimation(android.content.Intent)->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void enableIntentAnimation(android.content.Intent)->com.ichi2.anki.AnkiActivity:java.lang.Boolean animationDisabled()
com.ichi2.anki.AnkiActivity:java.lang.Boolean animationDisabled()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:java.lang.Boolean animationDisabled()->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void startActivityForResultWithAnimation(android.content.Intent,java.lang.Integer,java.lang.Integer)->com.ichi2.anki.AnkiActivity:void enableActivityAnimation(java.lang.Integer)
com.ichi2.anki.AnkiActivity:void enableActivityAnimation(java.lang.Integer)->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void enableActivityAnimation(java.lang.Integer)->com.ichi2.anki.AnkiActivity:java.lang.Boolean animationDisabled()
com.ichi2.anki.AnkiActivity:java.lang.Boolean animationDisabled()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:java.lang.Boolean animationDisabled()->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void enableActivityAnimation(java.lang.Integer)->com.ichi2.anim.ActivityTransitionAnimation:void slide(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.ichi2.anim.ActivityTransitionAnimation:void slide(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.ichi2.anim.ActivityTransitionAnimation:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onPause()->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void onCreate(android.os.Bundle)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void onCreate(android.os.Bundle)->com.ichi2.anki.AnkiActivity:void onCreate(android.os.Bundle)
com.ichi2.anki.AnkiActivity:void onCreate(android.os.Bundle)->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void onCreate(android.os.Bundle)->com.ichi2.themes.Themes:void setTheme(com.ichi2.anki.NoteEditor)
com.ichi2.themes.Themes:void setTheme(com.ichi2.anki.NoteEditor)->com.ichi2.themes.Themes:[Z $jacocoInit()
com.ichi2.themes.Themes:void setTheme(com.ichi2.anki.NoteEditor)->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.AnkiDroidApp)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.AnkiDroidApp)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void onCreate(android.os.Bundle)->com.ichi2.compat.customtabs.CustomTabActivityHelper:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void onCreate(android.os.Bundle)->com.ichi2.anki.AnkiActivity:void startLoadingCollection()
com.ichi2.anki.AnkiActivity:void startLoadingCollection()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void startLoadingCollection()->com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.AnkiActivity:void startLoadingCollection()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.AnkiActivity:void startLoadingCollection()->com.ichi2.anki.NoteEditor:void onCollectionLoaded(com.ichi2.libanki.Collection)
com.ichi2.anki.NoteEditor:void onCollectionLoaded(com.ichi2.libanki.Collection)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void onCollectionLoaded(com.ichi2.libanki.Collection)->com.ichi2.anki.AnkiActivity:void onCollectionLoaded(com.ichi2.libanki.Collection)
com.ichi2.anki.AnkiActivity:void onCollectionLoaded(com.ichi2.libanki.Collection)->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void onCollectionLoaded(com.ichi2.libanki.Collection)->com.ichi2.anki.AnkiActivity:void hideProgressBar()
com.ichi2.anki.AnkiActivity:void hideProgressBar()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void onCollectionLoaded(com.ichi2.libanki.Collection)->com.ichi2.anki.NoteEditor:void registerExternalStorageListener()
com.ichi2.anki.NoteEditor:void registerExternalStorageListener()->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void onCollectionLoaded(com.ichi2.libanki.Collection)->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.NoteEditor:void onCollectionLoaded(com.ichi2.libanki.Collection)->com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()
com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void onCollectionLoaded(com.ichi2.libanki.Collection)->com.ichi2.libanki.Models:java.util.ArrayList all()
com.ichi2.libanki.Models:java.util.ArrayList all()->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void onCollectionLoaded(com.ichi2.libanki.Collection)->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.NoteEditor:void onCollectionLoaded(com.ichi2.libanki.Collection)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void onCollectionLoaded(com.ichi2.libanki.Collection)->com.ichi2.libanki.Decks:java.util.ArrayList all()
com.ichi2.libanki.Decks:java.util.ArrayList all()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void onCollectionLoaded(com.ichi2.libanki.Collection)->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.NoteEditor:void onCollectionLoaded(com.ichi2.libanki.Collection)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void onCollectionLoaded(com.ichi2.libanki.Collection)->com.ichi2.libanki.Decks:org.json.JSONObject current()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:java.lang.Long selected()
com.ichi2.libanki.Decks:java.lang.Long selected()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.lang.Long selected()->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void onCollectionLoaded(com.ichi2.libanki.Collection)->com.ichi2.anki.NoteEditor:void setDid(com.ichi2.libanki.Note)
com.ichi2.anki.NoteEditor:void setDid(com.ichi2.libanki.Note)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setDid(com.ichi2.libanki.Note)->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.NoteEditor:void setDid(com.ichi2.libanki.Note)->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setDid(com.ichi2.libanki.Note)->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.NoteEditor:void setDid(com.ichi2.libanki.Note)->com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()
com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setDid(com.ichi2.libanki.Note)->com.ichi2.libanki.Models:org.json.JSONObject current()
com.ichi2.libanki.Models:org.json.JSONObject current()->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current()->com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Decks:org.json.JSONObject current()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:java.lang.Long selected()
com.ichi2.libanki.Decks:java.lang.Long selected()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.lang.Long selected()->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Models:void get(java.lang.Long)
com.ichi2.libanki.Models:void get(java.lang.Long)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setDid(com.ichi2.libanki.Note)->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.NoteEditor:void setDid(com.ichi2.libanki.Note)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setDid(com.ichi2.libanki.Note)->com.ichi2.libanki.Decks:java.lang.Boolean isDyn(java.lang.Long)
com.ichi2.libanki.Decks:java.lang.Boolean isDyn(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.lang.Boolean isDyn(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void onCollectionLoaded(com.ichi2.libanki.Collection)->com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()
com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.libanki.Models:org.json.JSONObject current()
com.ichi2.libanki.Models:org.json.JSONObject current()->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current()->com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Decks:org.json.JSONObject current()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:java.lang.Long selected()
com.ichi2.libanki.Decks:java.lang.Long selected()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.lang.Long selected()->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Models:void get(java.lang.Long)
com.ichi2.libanki.Models:void get(java.lang.Long)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.libanki.Utils:java.lang.Long timestampID(com.ichi2.libanki.DB,java.lang.String)
com.ichi2.libanki.Utils:java.lang.Long timestampID(com.ichi2.libanki.DB,java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.Long timestampID(com.ichi2.libanki.DB,java.lang.String)->com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)
com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)->com.ichi2.libanki.Utils:java.lang.Double now()
com.ichi2.libanki.Utils:java.lang.Double now()->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.Long timestampID(com.ichi2.libanki.DB,java.lang.String)->com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String)
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String)->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String)->com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteProgram:[Ljava.lang.String; getColumnNames()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()->io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.String getPath()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void clearOrCreateWindow(java.lang.String)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer cursorPickFillWindowStartPosition(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()
io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.String getSql()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:void getBindArgs()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()
io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:void setStartPosition(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteCursor:void close()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.AbstractCursor:void close()
io.requery.android.database.AbstractCursor:void close()->io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractWindowedCursor:void closeWindow()
io.requery.android.database.AbstractWindowedCursor:void closeWindow()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.CursorWindow:void onAllReferencesReleased()
io.requery.android.database.CursorWindow:void onAllReferencesReleased()->io.requery.android.database.CursorWindow:void dispose()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()
io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()->io.requery.android.database.sqlite.SQLiteProgram:void clearBindings()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:void cursorClosed()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.libanki.Utils:java.lang.String guid64()
com.ichi2.libanki.Utils:java.lang.String guid64()->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.String guid64()->com.ichi2.libanki.Utils:java.lang.String base91(java.lang.Integer)
com.ichi2.libanki.Utils:java.lang.String base91(java.lang.Integer)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.String base91(java.lang.Integer)->com.ichi2.libanki.Utils:java.lang.String base62(java.lang.Integer,java.lang.String)
com.ichi2.libanki.Utils:java.lang.String base62(java.lang.Integer,java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()
com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.libanki.Models:java.util.HashMap fieldMap(org.json.JSONObject)
com.ichi2.libanki.Models:java.util.HashMap fieldMap(org.json.JSONObject)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.libanki.Collection:java.lang.Long getScm()
com.ichi2.libanki.Collection:java.lang.Long getScm()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.libanki.Note:java.util.ArrayList getTags()
com.ichi2.libanki.Note:java.util.ArrayList getTags()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.anki.NoteEditor:void updateDeckPosition()
com.ichi2.anki.NoteEditor:void updateDeckPosition()->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.anki.NoteEditor:void updateTags()
com.ichi2.anki.NoteEditor:void updateTags()->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void updateTags()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.NoteEditor:void updateTags()->com.ichi2.libanki.Collection:com.ichi2.libanki.Tags getTags()
com.ichi2.libanki.Collection:com.ichi2.libanki.Tags getTags()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void updateTags()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.NoteEditor:void updateTags()->com.ichi2.libanki.Collection:com.ichi2.libanki.Tags getTags()
com.ichi2.libanki.Collection:com.ichi2.libanki.Tags getTags()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void updateTags()->com.ichi2.libanki.Tags:java.util.TreeSet canonify(java.util.ArrayList)
com.ichi2.libanki.Tags:java.util.TreeSet canonify(java.util.ArrayList)->com.ichi2.libanki.Tags:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void updateTags()->com.ichi2.libanki.Tags:java.lang.String join(java.util.TreeSet)
com.ichi2.libanki.Tags:java.lang.String join(java.util.TreeSet)->com.ichi2.libanki.Tags:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.libanki.Note:org.json.JSONObject model()
com.ichi2.libanki.Note:org.json.JSONObject model()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.anki.NoteEditor:void updateCards(org.json.JSONObject)
com.ichi2.anki.NoteEditor:void updateCards(org.json.JSONObject)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void updateCards(org.json.JSONObject)->com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()->com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatHelper getInstance()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatHelper getInstance()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void updateCards(org.json.JSONObject)->com.ichi2.compat.CompatV15:android.text.SpannableStringBuilder fromHtml(java.lang.String)
com.ichi2.compat.CompatV15:android.text.SpannableStringBuilder fromHtml(java.lang.String)->com.ichi2.compat.CompatV15:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.anki.NoteEditor:void populateEditFields()
com.ichi2.anki.NoteEditor:void populateEditFields()->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields()->com.ichi2.libanki.Note:[[Ljava.lang.String; items()
com.ichi2.libanki.Note:[[Ljava.lang.String; items()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields()->com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(android.app.ContextImpl)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(android.app.ContextImpl)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.NoteEditor:void initFieldEditText(com.ichi2.anki.FieldEditText,java.lang.Integer,[Ljava.lang.String;,android.graphics.Typeface,java.lang.Boolean)
com.ichi2.anki.NoteEditor:void initFieldEditText(com.ichi2.anki.FieldEditText,java.lang.Integer,[Ljava.lang.String;,android.graphics.Typeface,java.lang.Boolean)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void initFieldEditText(com.ichi2.anki.FieldEditText,java.lang.Integer,[Ljava.lang.String;,android.graphics.Typeface,java.lang.Boolean)->com.ichi2.anki.FieldEditText:void init(java.lang.Integer,java.lang.String,java.lang.String)
com.ichi2.anki.FieldEditText:void init(java.lang.Integer,java.lang.String,java.lang.String)->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.FieldEditText:void init(java.lang.Integer,java.lang.String,java.lang.String)->com.ichi2.anki.FieldEditText:void setDefaultStyle()
com.ichi2.anki.FieldEditText:void setDefaultStyle()->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.FieldEditText:android.widget.TextView getLabel()
com.ichi2.anki.FieldEditText:android.widget.TextView getLabel()->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.UIUtils:java.lang.Float getDensityAdjustedValue(com.ichi2.anki.NoteEditor,java.lang.Float)
com.ichi2.anki.UIUtils:java.lang.Float getDensityAdjustedValue(com.ichi2.anki.NoteEditor,java.lang.Float)->com.ichi2.anki.UIUtils:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.themes.Themes:[I getResFromAttr(com.ichi2.anki.NoteEditor,[I)
com.ichi2.themes.Themes:[I getResFromAttr(com.ichi2.anki.NoteEditor,[I)->com.ichi2.themes.Themes:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.NoteEditor:void setMMButtonListener(androidx.appcompat.widget.AppCompatImageButton,java.lang.Integer)
com.ichi2.anki.NoteEditor:void setMMButtonListener(androidx.appcompat.widget.AppCompatImageButton,java.lang.Integer)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.NoteEditor:void initFieldEditText(com.ichi2.anki.FieldEditText,java.lang.Integer,[Ljava.lang.String;,android.graphics.Typeface,java.lang.Boolean)
com.ichi2.anki.NoteEditor:void initFieldEditText(com.ichi2.anki.FieldEditText,java.lang.Integer,[Ljava.lang.String;,android.graphics.Typeface,java.lang.Boolean)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void initFieldEditText(com.ichi2.anki.FieldEditText,java.lang.Integer,[Ljava.lang.String;,android.graphics.Typeface,java.lang.Boolean)->com.ichi2.anki.FieldEditText:void init(java.lang.Integer,java.lang.String,java.lang.String)
com.ichi2.anki.FieldEditText:void init(java.lang.Integer,java.lang.String,java.lang.String)->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.FieldEditText:void init(java.lang.Integer,java.lang.String,java.lang.String)->com.ichi2.anki.FieldEditText:void setDefaultStyle()
com.ichi2.anki.FieldEditText:void setDefaultStyle()->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.FieldEditText:android.widget.TextView getLabel()
com.ichi2.anki.FieldEditText:android.widget.TextView getLabel()->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.UIUtils:java.lang.Float getDensityAdjustedValue(com.ichi2.anki.NoteEditor,java.lang.Float)
com.ichi2.anki.UIUtils:java.lang.Float getDensityAdjustedValue(com.ichi2.anki.NoteEditor,java.lang.Float)->com.ichi2.anki.UIUtils:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.themes.Themes:[I getResFromAttr(com.ichi2.anki.NoteEditor,[I)
com.ichi2.themes.Themes:[I getResFromAttr(com.ichi2.anki.NoteEditor,[I)->com.ichi2.themes.Themes:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.NoteEditor:void setMMButtonListener(androidx.appcompat.widget.AppCompatImageButton,java.lang.Integer)
com.ichi2.anki.NoteEditor:void setMMButtonListener(androidx.appcompat.widget.AppCompatImageButton,java.lang.Integer)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void onCollectionLoaded(com.ichi2.libanki.Collection)->com.ichi2.libanki.Note:org.json.JSONObject model()
com.ichi2.libanki.Note:org.json.JSONObject model()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void onStart()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void onStart()->com.ichi2.compat.customtabs.CustomTabActivityHelper:void bindCustomTabsService(com.ichi2.anki.NoteEditor)
com.ichi2.compat.customtabs.CustomTabActivityHelper:void bindCustomTabsService(com.ichi2.anki.NoteEditor)->com.ichi2.compat.customtabs.CustomTabActivityHelper:[Z $jacocoInit()
com.ichi2.compat.customtabs.CustomTabActivityHelper:void bindCustomTabsService(com.ichi2.anki.NoteEditor)->com.ichi2.compat.customtabs.CustomTabsHelper:void getPackageNameToUse(com.ichi2.anki.NoteEditor)
com.ichi2.compat.customtabs.CustomTabsHelper:void getPackageNameToUse(com.ichi2.anki.NoteEditor)->com.ichi2.compat.customtabs.CustomTabsHelper:[Z $jacocoInit()
com.ichi2.compat.customtabs.CustomTabsHelper:void getPackageNameToUse(com.ichi2.anki.NoteEditor)->com.ichi2.compat.CompatHelper:java.lang.Integer getSdkVersion()
com.ichi2.compat.CompatHelper:java.lang.Integer getSdkVersion()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void onResume()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void onResume()->com.ichi2.anki.dialogs.DialogHandler:void readMessage()
com.ichi2.anki.dialogs.DialogHandler:void readMessage()->com.ichi2.anki.dialogs.DialogHandler:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.util.ArrayList access$1600(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Long access$1502(com.ichi2.anki.NoteEditor,java.lang.Long)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onSaveInstanceState(android.os.Bundle)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onSaveInstanceState(android.os.Bundle)->com.getbase.floatingactionbutton.FloatingActionsMenu:com.getbase.floatingactionbutton.FloatingActionsMenu$SavedState onSaveInstanceState()
com.ichi2.anki.DeckPicker:void onStop()->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onStop()->com.ichi2.anki.AnkiActivity:void onStop()
com.ichi2.anki.AnkiActivity:void onStop()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void onStop()->com.ichi2.compat.customtabs.CustomTabActivityHelper:void unbindCustomTabsService(com.ichi2.anki.DeckPicker)
com.ichi2.compat.customtabs.CustomTabActivityHelper:void unbindCustomTabsService(com.ichi2.anki.DeckPicker)->com.ichi2.compat.customtabs.CustomTabActivityHelper:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onStop()->com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.DeckPicker:void onStop()->com.ichi2.widget.WidgetStatus:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onStop()->com.ichi2.widget.WidgetStatus:void update(com.ichi2.anki.DeckPicker)
com.ichi2.widget.WidgetStatus:void update(com.ichi2.anki.DeckPicker)->com.ichi2.widget.WidgetStatus:[Z $jacocoInit()
com.ichi2.widget.WidgetStatus:void update(com.ichi2.anki.DeckPicker)->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onStop()->com.ichi2.anki.UIUtils:void saveCollectionInBackground(com.ichi2.anki.DeckPicker)
com.ichi2.anki.UIUtils:void saveCollectionInBackground(com.ichi2.anki.DeckPicker)->com.ichi2.anki.UIUtils:[Z $jacocoInit()
com.ichi2.anki.UIUtils:void saveCollectionInBackground(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.UIUtils:void saveCollectionInBackground(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.UIUtils:void saveCollectionInBackground(com.ichi2.anki.DeckPicker)->com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.UIUtils$1,[Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.UIUtils$1,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.UIUtils$1,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.UIUtils$1,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.UIUtils$1,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.UIUtils$1,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onPreExecute()
com.ichi2.async.DeckTask:void onPreExecute()->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPreExecute()->com.ichi2.async.BaseAsyncTask:void onPreExecute()
com.ichi2.async.BaseAsyncTask:void onPreExecute()->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onPreExecute()->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(java.lang.Object)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(java.lang.Object)->com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.BaseAsyncTask:void onPostExecute(java.lang.Object)
com.ichi2.async.BaseAsyncTask:void onPostExecute(java.lang.Object)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onPostExecute(java.lang.Object)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->com.ichi2.anki.FieldEditText:boolean dispatchTouchEvent(android.view.MotionEvent)
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->com.ichi2.anki.FieldEditText:boolean dispatchTouchEvent(android.view.MotionEvent)
com.ichi2.anki.NoteEditor:java.lang.Boolean access$1102(com.ichi2.anki.NoteEditor,java.lang.Boolean)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean access$2500(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean access$2500(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:java.lang.Boolean duplicateCheck()
com.ichi2.anki.NoteEditor:java.lang.Boolean duplicateCheck()->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean duplicateCheck()->com.ichi2.libanki.Note:[Ljava.lang.String; getFields()
com.ichi2.libanki.Note:[Ljava.lang.String; getFields()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean duplicateCheck()->com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)
com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)->com.ichi2.libanki.Note:[Ljava.lang.String; values()
com.ichi2.libanki.Note:[Ljava.lang.String; values()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)->com.ichi2.anki.FieldEditText:java.lang.Integer getOrd()
com.ichi2.anki.FieldEditText:java.lang.Integer getOrd()->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)->com.ichi2.libanki.Note:[Ljava.lang.String; values()
com.ichi2.libanki.Note:[Ljava.lang.String; values()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)->com.ichi2.anki.FieldEditText:java.lang.Integer getOrd()
com.ichi2.anki.FieldEditText:java.lang.Integer getOrd()->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean duplicateCheck()->com.ichi2.libanki.Note:java.lang.Integer dupeOrEmpty()
com.ichi2.libanki.Note:java.lang.Integer dupeOrEmpty()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.libanki.Note:java.lang.Integer dupeOrEmpty()->com.ichi2.libanki.Utils:java.lang.Long fieldChecksum(java.lang.String)
com.ichi2.libanki.Utils:java.lang.Long fieldChecksum(java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.Long fieldChecksum(java.lang.String)->com.ichi2.libanki.Utils:java.lang.String stripHTMLMedia(java.lang.String)
com.ichi2.libanki.Utils:java.lang.String stripHTMLMedia(java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.String stripHTMLMedia(java.lang.String)->com.ichi2.libanki.Utils:java.lang.String stripHTML(java.lang.String)
com.ichi2.libanki.Utils:java.lang.String stripHTML(java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.String stripHTML(java.lang.String)->com.ichi2.libanki.Utils:java.lang.String entsToTxt(java.lang.String)
com.ichi2.libanki.Utils:java.lang.String entsToTxt(java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.Long fieldChecksum(java.lang.String)->com.ichi2.libanki.Utils:java.lang.String checksum(java.lang.String)
com.ichi2.libanki.Utils:java.lang.String checksum(java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Note:java.lang.Integer dupeOrEmpty()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Note:java.lang.Integer dupeOrEmpty()->com.ichi2.libanki.DB:java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,java.lang.Integer)
com.ichi2.libanki.DB:java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,java.lang.Integer)->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.DB:java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteProgram:[Ljava.lang.String; getColumnNames()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
com.ichi2.libanki.DB:java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,java.lang.Integer)->com.ichi2.libanki.DB:java.lang.String getCursorMethodName(java.lang.String)
com.ichi2.libanki.DB:java.lang.String getCursorMethodName(java.lang.String)->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.DB:java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,java.lang.Integer)->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()->io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.String getPath()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void clearOrCreateWindow(java.lang.String)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer cursorPickFillWindowStartPosition(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()
io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.String getSql()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:void getBindArgs()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()
io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:void setStartPosition(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
com.ichi2.libanki.DB:java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:java.lang.String getString(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.String getString(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.String getString(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.String getString(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.DB:java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,java.lang.Integer)->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
com.ichi2.libanki.DB:java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:void close()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.AbstractCursor:void close()
io.requery.android.database.AbstractCursor:void close()->io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractWindowedCursor:void closeWindow()
io.requery.android.database.AbstractWindowedCursor:void closeWindow()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.CursorWindow:void onAllReferencesReleased()
io.requery.android.database.CursorWindow:void onAllReferencesReleased()->io.requery.android.database.CursorWindow:void dispose()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()
io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()->io.requery.android.database.sqlite.SQLiteProgram:void clearBindings()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:void cursorClosed()
com.ichi2.libanki.Note:java.lang.Integer dupeOrEmpty()->com.ichi2.libanki.Utils:[Ljava.lang.String; splitFields(java.lang.String)
com.ichi2.libanki.Utils:[Ljava.lang.String; splitFields(java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Note:java.lang.Integer dupeOrEmpty()->com.ichi2.libanki.Utils:java.lang.String stripHTMLMedia(java.lang.String)
com.ichi2.libanki.Utils:java.lang.String stripHTMLMedia(java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.String stripHTMLMedia(java.lang.String)->com.ichi2.libanki.Utils:java.lang.String stripHTML(java.lang.String)
com.ichi2.libanki.Utils:java.lang.String stripHTML(java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.String stripHTML(java.lang.String)->com.ichi2.libanki.Utils:java.lang.String entsToTxt(java.lang.String)
com.ichi2.libanki.Utils:java.lang.String entsToTxt(java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Note:java.lang.Integer dupeOrEmpty()->com.ichi2.libanki.Utils:java.lang.String stripHTMLMedia(java.lang.String)
com.ichi2.libanki.Utils:java.lang.String stripHTMLMedia(java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.String stripHTMLMedia(java.lang.String)->com.ichi2.libanki.Utils:java.lang.String stripHTML(java.lang.String)
com.ichi2.libanki.Utils:java.lang.String stripHTML(java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.String stripHTML(java.lang.String)->com.ichi2.libanki.Utils:java.lang.String entsToTxt(java.lang.String)
com.ichi2.libanki.Utils:java.lang.String entsToTxt(java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean duplicateCheck()->com.ichi2.anki.FieldEditText:void setDupeStyle()
com.ichi2.anki.FieldEditText:void setDupeStyle()->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.FieldEditText:void setDupeStyle()->com.ichi2.themes.Themes:java.lang.Integer getColorFromAttr(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.ichi2.themes.Themes:java.lang.Integer getColorFromAttr(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.ichi2.themes.Themes:[Z $jacocoInit()
com.ichi2.themes.Themes:java.lang.Integer getColorFromAttr(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.ichi2.themes.Themes:[I getColorFromAttr(com.ichi2.anki.NoteEditor,[I)
com.ichi2.themes.Themes:[I getColorFromAttr(com.ichi2.anki.NoteEditor,[I)->com.ichi2.themes.Themes:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean duplicateCheck()->com.ichi2.libanki.Note:[Ljava.lang.String; values()
com.ichi2.libanki.Note:[Ljava.lang.String; values()->com.ichi2.libanki.Note:[Z $jacocoInit()
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->com.ichi2.anki.FieldEditText:boolean dispatchTouchEvent(android.view.MotionEvent)
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->com.ichi2.anki.FieldEditText:boolean dispatchTouchEvent(android.view.MotionEvent)
com.ichi2.anki.NoteEditor:java.lang.Boolean access$1102(com.ichi2.anki.NoteEditor,java.lang.Boolean)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->androidx.appcompat.view.menu.ActionMenuItemView:boolean dispatchTouchEvent(android.view.MotionEvent)
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->androidx.appcompat.view.menu.ActionMenuItemView:boolean dispatchTouchEvent(android.view.MotionEvent)
com.ichi2.anki.NoteEditor:java.lang.Boolean onOptionsItemSelected(androidx.appcompat.view.menu.MenuItemImpl)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean onOptionsItemSelected(androidx.appcompat.view.menu.MenuItemImpl)->com.ichi2.anki.NoteEditor:void saveNote()
com.ichi2.anki.NoteEditor:void saveNote()->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void saveNote()->com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)
com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)->com.ichi2.libanki.Note:[Ljava.lang.String; values()
com.ichi2.libanki.Note:[Ljava.lang.String; values()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)->com.ichi2.anki.FieldEditText:java.lang.Integer getOrd()
com.ichi2.anki.FieldEditText:java.lang.Integer getOrd()->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)->com.ichi2.libanki.Note:[Ljava.lang.String; values()
com.ichi2.libanki.Note:[Ljava.lang.String; values()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)->com.ichi2.anki.FieldEditText:java.lang.Integer getOrd()
com.ichi2.anki.FieldEditText:java.lang.Integer getOrd()->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void saveNote()->com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)
com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)->com.ichi2.libanki.Note:[Ljava.lang.String; values()
com.ichi2.libanki.Note:[Ljava.lang.String; values()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)->com.ichi2.anki.FieldEditText:java.lang.Integer getOrd()
com.ichi2.anki.FieldEditText:java.lang.Integer getOrd()->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)->com.ichi2.libanki.Note:[Ljava.lang.String; values()
com.ichi2.libanki.Note:[Ljava.lang.String; values()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)->com.ichi2.anki.FieldEditText:java.lang.Integer getOrd()
com.ichi2.anki.FieldEditText:java.lang.Integer getOrd()->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void saveNote()->com.ichi2.libanki.Note:org.json.JSONObject model()
com.ichi2.libanki.Note:org.json.JSONObject model()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void saveNote()->com.ichi2.anki.NoteEditor:java.lang.String tagsAsString(java.util.ArrayList)
com.ichi2.anki.NoteEditor:java.lang.String tagsAsString(java.util.ArrayList)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void saveNote()->com.ichi2.libanki.Note:void setTagsFromStr(java.lang.String)
com.ichi2.libanki.Note:void setTagsFromStr(java.lang.String)->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.libanki.Note:void setTagsFromStr(java.lang.String)->com.ichi2.libanki.Collection:com.ichi2.libanki.Tags getTags()
com.ichi2.libanki.Collection:com.ichi2.libanki.Tags getTags()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Note:void setTagsFromStr(java.lang.String)->com.ichi2.libanki.Tags:java.util.ArrayList split(java.lang.String)
com.ichi2.libanki.Tags:java.util.ArrayList split(java.lang.String)->com.ichi2.libanki.Tags:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void saveNote()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.NoteEditor:void saveNote()->com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()
com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void saveNote()->com.ichi2.libanki.Models:org.json.JSONObject current()
com.ichi2.libanki.Models:org.json.JSONObject current()->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current()->com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Decks:org.json.JSONObject current()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:java.lang.Long selected()
com.ichi2.libanki.Decks:java.lang.Long selected()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.lang.Long selected()->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Models:void get(java.lang.Long)
com.ichi2.libanki.Models:void get(java.lang.Long)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void saveNote()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.NoteEditor:void saveNote()->com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()
com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void saveNote()->com.ichi2.libanki.Models:void setChanged()
com.ichi2.libanki.Models:void setChanged()->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void saveNote()->com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.NoteEditor$1,[Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.NoteEditor$1,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.NoteEditor$1,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.NoteEditor$1,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.NoteEditor$1,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.NoteEditor$1,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onPreExecute()
com.ichi2.async.DeckTask:void onPreExecute()->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPreExecute()->com.ichi2.async.BaseAsyncTask:void onPreExecute()
com.ichi2.async.BaseAsyncTask:void onPreExecute()->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onPreExecute()->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPreExecute()->com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean)->com.ichi2.themes.StyledProgressDialog:[Z $jacocoInit()
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean)->com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.ichi2.themes.StyledProgressDialog:[Z $jacocoInit()
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer getColor(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer adjustAlpha(java.lang.Integer,java.lang.Float)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer adjustAlpha(java.lang.Integer,java.lang.Float)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer adjustAlpha(java.lang.Integer,java.lang.Float)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer adjustAlpha(java.lang.Integer,java.lang.Float)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Boolean isColorDark(java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.internal.ThemeSingleton:void get(java.lang.Boolean)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.NoteEditor,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.NoteEditor,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer gravityEnumToAttrInt(com.afollestad.materialdialogs.GravityEnum)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.NoteEditor,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.NoteEditor,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer gravityEnumToAttrInt(com.afollestad.materialdialogs.GravityEnum)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.NoteEditor,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.NoteEditor,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer gravityEnumToAttrInt(com.afollestad.materialdialogs.GravityEnum)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.NoteEditor,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.NoteEditor,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer gravityEnumToAttrInt(com.afollestad.materialdialogs.GravityEnum)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.NoteEditor,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.NoteEditor,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer gravityEnumToAttrInt(com.afollestad.materialdialogs.GravityEnum)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:void resolveString(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:void resolveString(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.DialogInit:java.lang.Integer getTheme(com.afollestad.materialdialogs.MaterialDialog$Builder)
com.afollestad.materialdialogs.DialogInit:java.lang.Integer getTheme(com.afollestad.materialdialogs.MaterialDialog$Builder)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Boolean resolveBoolean(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Boolean)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.DialogInit:java.lang.Integer getInflateLayout(com.afollestad.materialdialogs.MaterialDialog$Builder)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.internal.MDRootLayout:void init(com.ichi2.anki.NoteEditor,android.content.res.XmlBlock$Parser,java.lang.Integer)
com.afollestad.materialdialogs.internal.MDRootLayout:void init(com.ichi2.anki.NoteEditor,android.content.res.XmlBlock$Parser,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.internal.MDButton:void init(com.ichi2.anki.NoteEditor)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.internal.MDButton:void init(com.ichi2.anki.NoteEditor)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.internal.MDButton:void init(com.ichi2.anki.NoteEditor)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.internal.MDRootLayout:void onFinishInflate()
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList resolveActionTextColorStateList(com.ichi2.anki.NoteEditor,java.lang.Integer,android.content.res.ColorStateList)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList resolveActionTextColorStateList(com.ichi2.anki.NoteEditor,java.lang.Integer,android.content.res.ColorStateList)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList resolveActionTextColorStateList(com.ichi2.anki.NoteEditor,java.lang.Integer,android.content.res.ColorStateList)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveDimension(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveDimension(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveDimension(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Boolean resolveBoolean(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Boolean resolveBoolean(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Boolean resolveBoolean(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Boolean)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDRootLayout:void setDividerColor(java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:void setTypeface(androidx.appcompat.widget.AppCompatTextView,android.graphics.Typeface)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:void setTypeface(androidx.appcompat.widget.AppCompatTextView,android.graphics.Typeface)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDRootLayout:void setButtonGravity(com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.internal.MDRootLayout:void setButtonGravity(com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.internal.MDRootLayout:void invertGravityIfNecessary()
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDRootLayout:void setButtonStackedGravity(com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.internal.MDRootLayout:void setButtonStackedGravity(com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.internal.MDButton:void setStackedGravity(com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.internal.MDRootLayout:void setButtonStackedGravity(com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.internal.MDButton:void setStackedGravity(com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.internal.MDRootLayout:void setButtonStackedGravity(com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.internal.MDButton:void setStackedGravity(com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDRootLayout:void setStackingBehavior(com.afollestad.materialdialogs.StackingBehavior)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Boolean resolveBoolean(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Boolean)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Boolean resolveBoolean(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Boolean)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:void setTypeface(com.afollestad.materialdialogs.internal.MDButton,android.graphics.Typeface)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setAllCapsCompat(java.lang.Boolean)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setStackedSelector(android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.RippleHelper:void applyColor(android.graphics.drawable.RippleDrawable,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setDefaultSelector(android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.internal.MDButton:void setDefaultSelector(android.graphics.drawable.RippleDrawable)->com.afollestad.materialdialogs.internal.MDButton:void setStacked(java.lang.Boolean,java.lang.Boolean)
com.afollestad.materialdialogs.internal.MDButton:void setStacked(java.lang.Boolean,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void setBackgroundCompat(com.afollestad.materialdialogs.internal.MDButton,android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:void setTypeface(com.afollestad.materialdialogs.internal.MDButton,android.graphics.Typeface)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setAllCapsCompat(java.lang.Boolean)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setStackedSelector(android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.RippleHelper:void applyColor(android.graphics.drawable.RippleDrawable,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setDefaultSelector(android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.internal.MDButton:void setDefaultSelector(android.graphics.drawable.RippleDrawable)->com.afollestad.materialdialogs.internal.MDButton:void setStacked(java.lang.Boolean,java.lang.Boolean)
com.afollestad.materialdialogs.internal.MDButton:void setStacked(java.lang.Boolean,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void setBackgroundCompat(com.afollestad.materialdialogs.internal.MDButton,android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:void setTypeface(com.afollestad.materialdialogs.internal.MDButton,android.graphics.Typeface)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setAllCapsCompat(java.lang.Boolean)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setStackedSelector(android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.RippleHelper:void applyColor(android.graphics.drawable.RippleDrawable,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setDefaultSelector(android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.internal.MDButton:void setDefaultSelector(android.graphics.drawable.RippleDrawable)->com.afollestad.materialdialogs.internal.MDButton:void setStacked(java.lang.Boolean,java.lang.Boolean)
com.afollestad.materialdialogs.internal.MDButton:void setStacked(java.lang.Boolean,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void setBackgroundCompat(com.afollestad.materialdialogs.internal.MDButton,android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.DialogInit:void setupProgressDialog(com.afollestad.materialdialogs.MaterialDialog)
com.afollestad.materialdialogs.DialogInit:void setupProgressDialog(com.afollestad.materialdialogs.MaterialDialog)->me.zhanghai.android.materialprogressbar.internal.ThemeUtils:java.lang.Integer getColorFromAttrRes(java.lang.Integer,java.lang.Integer,com.ichi2.anki.NoteEditor)
com.afollestad.materialdialogs.DialogInit:void setupProgressDialog(com.afollestad.materialdialogs.MaterialDialog)->me.zhanghai.android.materialprogressbar.Animators:android.animation.AnimatorSet createIndeterminate(me.zhanghai.android.materialprogressbar.IndeterminateCircularProgressDrawable$RingPathTransform)
com.afollestad.materialdialogs.DialogInit:void setupProgressDialog(com.afollestad.materialdialogs.MaterialDialog)->me.zhanghai.android.materialprogressbar.Animators:android.animation.ObjectAnimator createIndeterminateRotation(me.zhanghai.android.materialprogressbar.IndeterminateCircularProgressDrawable$RingRotation)
com.afollestad.materialdialogs.DialogInit:void setupProgressDialog(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.DialogInit:void fixCanvasScalingWhenHardwareAccelerated(android.widget.ProgressBar)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.DialogInit:void setupInputDialog(com.afollestad.materialdialogs.MaterialDialog)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.DialogBase:void setOnShowListenerInternal()
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:void invalidateList()
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.DialogBase:void setViewInternal(com.afollestad.materialdialogs.internal.MDRootLayout)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:void checkIfListInitScroll()
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDRootLayout:void setMaxHeight(java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.MaterialDialog:void show()
com.ichi2.async.DeckTask:void onPreExecute()->com.ichi2.anki.NoteEditor:com.afollestad.materialdialogs.MaterialDialog access$002(com.ichi2.anki.NoteEditor,com.afollestad.materialdialogs.MaterialDialog)
com.ichi2.anki.NoteEditor:com.afollestad.materialdialogs.MaterialDialog access$002(com.ichi2.anki.NoteEditor,com.afollestad.materialdialogs.MaterialDialog)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(android.widget.LinearLayout)
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(android.widget.LinearLayout)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(android.widget.LinearLayout)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(android.widget.LinearLayout)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:void setUpDividersVisibility(android.widget.LinearLayout,java.lang.Boolean,java.lang.Boolean)
com.afollestad.materialdialogs.internal.MDRootLayout:void setUpDividersVisibility(android.widget.LinearLayout,java.lang.Boolean,java.lang.Boolean)->com.afollestad.materialdialogs.internal.MDRootLayout:void getTopView(android.widget.LinearLayout)
com.afollestad.materialdialogs.internal.MDRootLayout:void setUpDividersVisibility(android.widget.LinearLayout,java.lang.Boolean,java.lang.Boolean)->com.afollestad.materialdialogs.internal.MDRootLayout:void setUpDividersVisibility(android.view.View,java.lang.Boolean,java.lang.Boolean)
com.afollestad.materialdialogs.internal.MDRootLayout:void setUpDividersVisibility(android.widget.LinearLayout,java.lang.Boolean,java.lang.Boolean)->com.afollestad.materialdialogs.internal.MDRootLayout:void getBottomView(android.widget.LinearLayout)
com.afollestad.materialdialogs.MaterialDialog:void onShow(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.DialogBase:void onShow(com.afollestad.materialdialogs.MaterialDialog)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.NoteEditor:java.lang.Boolean access$102(com.ichi2.anki.NoteEditor,java.lang.Boolean)
com.ichi2.anki.NoteEditor:java.lang.Boolean access$102(com.ichi2.anki.NoteEditor,java.lang.Boolean)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.NoteEditor:void access$202(com.ichi2.anki.NoteEditor,[Ljava.lang.String;)
com.ichi2.anki.NoteEditor:void access$202(com.ichi2.anki.NoteEditor,[Ljava.lang.String;)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.NoteEditor:com.ichi2.libanki.Note access$300(com.ichi2.anki.NoteEditor)
com.ichi2.anki.NoteEditor:com.ichi2.libanki.Note access$300(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.libanki.Note:com.ichi2.libanki.Note clone()
com.ichi2.libanki.Note:com.ichi2.libanki.Note clone()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.NoteEditor:void access$400(com.ichi2.anki.NoteEditor)
com.ichi2.anki.NoteEditor:void access$400(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void access$400(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:void setNote()
com.ichi2.anki.NoteEditor:void setNote()->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote()->com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()
com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.libanki.Models:org.json.JSONObject current()
com.ichi2.libanki.Models:org.json.JSONObject current()->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current()->com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Decks:org.json.JSONObject current()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:java.lang.Long selected()
com.ichi2.libanki.Decks:java.lang.Long selected()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.lang.Long selected()->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Models:void get(java.lang.Long)
com.ichi2.libanki.Models:void get(java.lang.Long)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.libanki.Utils:java.lang.Long timestampID(com.ichi2.libanki.DB,java.lang.String)
com.ichi2.libanki.Utils:java.lang.Long timestampID(com.ichi2.libanki.DB,java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.Long timestampID(com.ichi2.libanki.DB,java.lang.String)->com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)
com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)->com.ichi2.libanki.Utils:java.lang.Double now()
com.ichi2.libanki.Utils:java.lang.Double now()->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.Long timestampID(com.ichi2.libanki.DB,java.lang.String)->com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String)
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String)->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String)->com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteProgram:[Ljava.lang.String; getColumnNames()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()->io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.String getPath()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void clearOrCreateWindow(java.lang.String)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer cursorPickFillWindowStartPosition(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()
io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.String getSql()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:void getBindArgs()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()
io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:void setStartPosition(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteCursor:void close()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.AbstractCursor:void close()
io.requery.android.database.AbstractCursor:void close()->io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractWindowedCursor:void closeWindow()
io.requery.android.database.AbstractWindowedCursor:void closeWindow()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.CursorWindow:void onAllReferencesReleased()
io.requery.android.database.CursorWindow:void onAllReferencesReleased()->io.requery.android.database.CursorWindow:void dispose()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()
io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()->io.requery.android.database.sqlite.SQLiteProgram:void clearBindings()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:void cursorClosed()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.libanki.Utils:java.lang.String guid64()
com.ichi2.libanki.Utils:java.lang.String guid64()->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.String guid64()->com.ichi2.libanki.Utils:java.lang.String base91(java.lang.Integer)
com.ichi2.libanki.Utils:java.lang.String base91(java.lang.Integer)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.String base91(java.lang.Integer)->com.ichi2.libanki.Utils:java.lang.String base62(java.lang.Integer,java.lang.String)
com.ichi2.libanki.Utils:java.lang.String base62(java.lang.Integer,java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()
com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.libanki.Models:java.util.HashMap fieldMap(org.json.JSONObject)
com.ichi2.libanki.Models:java.util.HashMap fieldMap(org.json.JSONObject)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.libanki.Collection:java.lang.Long getScm()
com.ichi2.libanki.Collection:java.lang.Long getScm()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.anki.NoteEditor:void updateDeckPosition()
com.ichi2.anki.NoteEditor:void updateDeckPosition()->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.anki.NoteEditor:void updateTags()
com.ichi2.anki.NoteEditor:void updateTags()->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void updateTags()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.NoteEditor:void updateTags()->com.ichi2.libanki.Collection:com.ichi2.libanki.Tags getTags()
com.ichi2.libanki.Collection:com.ichi2.libanki.Tags getTags()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void updateTags()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.NoteEditor:void updateTags()->com.ichi2.libanki.Collection:com.ichi2.libanki.Tags getTags()
com.ichi2.libanki.Collection:com.ichi2.libanki.Tags getTags()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void updateTags()->com.ichi2.libanki.Tags:java.util.TreeSet canonify(java.util.ArrayList)
com.ichi2.libanki.Tags:java.util.TreeSet canonify(java.util.ArrayList)->com.ichi2.libanki.Tags:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void updateTags()->com.ichi2.libanki.Tags:java.lang.String join(java.util.TreeSet)
com.ichi2.libanki.Tags:java.lang.String join(java.util.TreeSet)->com.ichi2.libanki.Tags:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.libanki.Note:org.json.JSONObject model()
com.ichi2.libanki.Note:org.json.JSONObject model()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.anki.NoteEditor:void updateCards(org.json.JSONObject)
com.ichi2.anki.NoteEditor:void updateCards(org.json.JSONObject)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void updateCards(org.json.JSONObject)->com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()->com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatHelper getInstance()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatHelper getInstance()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void updateCards(org.json.JSONObject)->com.ichi2.compat.CompatV15:android.text.SpannableStringBuilder fromHtml(java.lang.String)
com.ichi2.compat.CompatV15:android.text.SpannableStringBuilder fromHtml(java.lang.String)->com.ichi2.compat.CompatV15:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.anki.NoteEditor:void populateEditFields()
com.ichi2.anki.NoteEditor:void populateEditFields()->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields()->com.ichi2.libanki.Note:[[Ljava.lang.String; items()
com.ichi2.libanki.Note:[[Ljava.lang.String; items()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields()->com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(android.app.ContextImpl)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(android.app.ContextImpl)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.NoteEditor:void initFieldEditText(com.ichi2.anki.FieldEditText,java.lang.Integer,[Ljava.lang.String;,android.graphics.Typeface,java.lang.Boolean)
com.ichi2.anki.NoteEditor:void initFieldEditText(com.ichi2.anki.FieldEditText,java.lang.Integer,[Ljava.lang.String;,android.graphics.Typeface,java.lang.Boolean)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void initFieldEditText(com.ichi2.anki.FieldEditText,java.lang.Integer,[Ljava.lang.String;,android.graphics.Typeface,java.lang.Boolean)->com.ichi2.anki.FieldEditText:void init(java.lang.Integer,java.lang.String,java.lang.String)
com.ichi2.anki.FieldEditText:void init(java.lang.Integer,java.lang.String,java.lang.String)->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.FieldEditText:void init(java.lang.Integer,java.lang.String,java.lang.String)->com.ichi2.anki.FieldEditText:void setDefaultStyle()
com.ichi2.anki.FieldEditText:void setDefaultStyle()->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.FieldEditText:android.widget.TextView getLabel()
com.ichi2.anki.FieldEditText:android.widget.TextView getLabel()->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.UIUtils:java.lang.Float getDensityAdjustedValue(com.ichi2.anki.NoteEditor,java.lang.Float)
com.ichi2.anki.UIUtils:java.lang.Float getDensityAdjustedValue(com.ichi2.anki.NoteEditor,java.lang.Float)->com.ichi2.anki.UIUtils:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.themes.Themes:[I getResFromAttr(com.ichi2.anki.NoteEditor,[I)
com.ichi2.themes.Themes:[I getResFromAttr(com.ichi2.anki.NoteEditor,[I)->com.ichi2.themes.Themes:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.NoteEditor:void setMMButtonListener(androidx.appcompat.widget.AppCompatImageButton,java.lang.Integer)
com.ichi2.anki.NoteEditor:void setMMButtonListener(androidx.appcompat.widget.AppCompatImageButton,java.lang.Integer)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.NoteEditor:void initFieldEditText(com.ichi2.anki.FieldEditText,java.lang.Integer,[Ljava.lang.String;,android.graphics.Typeface,java.lang.Boolean)
com.ichi2.anki.NoteEditor:void initFieldEditText(com.ichi2.anki.FieldEditText,java.lang.Integer,[Ljava.lang.String;,android.graphics.Typeface,java.lang.Boolean)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void initFieldEditText(com.ichi2.anki.FieldEditText,java.lang.Integer,[Ljava.lang.String;,android.graphics.Typeface,java.lang.Boolean)->com.ichi2.anki.FieldEditText:void init(java.lang.Integer,java.lang.String,java.lang.String)
com.ichi2.anki.FieldEditText:void init(java.lang.Integer,java.lang.String,java.lang.String)->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.FieldEditText:void init(java.lang.Integer,java.lang.String,java.lang.String)->com.ichi2.anki.FieldEditText:void setDefaultStyle()
com.ichi2.anki.FieldEditText:void setDefaultStyle()->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.FieldEditText:android.widget.TextView getLabel()
com.ichi2.anki.FieldEditText:android.widget.TextView getLabel()->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.UIUtils:java.lang.Float getDensityAdjustedValue(com.ichi2.anki.NoteEditor,java.lang.Float)
com.ichi2.anki.UIUtils:java.lang.Float getDensityAdjustedValue(com.ichi2.anki.NoteEditor,java.lang.Float)->com.ichi2.anki.UIUtils:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.themes.Themes:[I getResFromAttr(com.ichi2.anki.NoteEditor,[I)
com.ichi2.themes.Themes:[I getResFromAttr(com.ichi2.anki.NoteEditor,[I)->com.ichi2.themes.Themes:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.NoteEditor:void setMMButtonListener(androidx.appcompat.widget.AppCompatImageButton,java.lang.Integer)
com.ichi2.anki.NoteEditor:void setMMButtonListener(androidx.appcompat.widget.AppCompatImageButton,java.lang.Integer)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.NoteEditor:com.ichi2.libanki.Note access$300(com.ichi2.anki.NoteEditor)
com.ichi2.anki.NoteEditor:com.ichi2.libanki.Note access$300(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.libanki.Note:org.json.JSONObject model()
com.ichi2.libanki.Note:org.json.JSONObject model()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.UIUtils:void showThemedToast(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.Boolean)
com.ichi2.anki.UIUtils:void showThemedToast(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.Boolean)->com.ichi2.anki.UIUtils:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.NoteEditor:java.lang.Boolean access$600(com.ichi2.anki.NoteEditor)
com.ichi2.anki.NoteEditor:java.lang.Boolean access$600(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.NoteEditor:java.lang.Integer access$700(com.ichi2.anki.NoteEditor)
com.ichi2.anki.NoteEditor:java.lang.Integer access$700(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.NoteEditor:java.lang.Boolean access$800(com.ichi2.anki.NoteEditor)
com.ichi2.anki.NoteEditor:java.lang.Boolean access$800(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.NoteEditor:java.lang.Integer access$700(com.ichi2.anki.NoteEditor)
com.ichi2.anki.NoteEditor:java.lang.Integer access$700(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.NoteEditor:java.util.LinkedList access$500(com.ichi2.anki.NoteEditor)
com.ichi2.anki.NoteEditor:java.util.LinkedList access$500(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.NoteEditor:java.util.LinkedList access$500(com.ichi2.anki.NoteEditor)
com.ichi2.anki.NoteEditor:java.util.LinkedList access$500(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.NoteEditor:com.afollestad.materialdialogs.MaterialDialog access$000(com.ichi2.anki.NoteEditor)
com.ichi2.anki.NoteEditor:com.afollestad.materialdialogs.MaterialDialog access$000(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.NoteEditor:com.afollestad.materialdialogs.MaterialDialog access$000(com.ichi2.anki.NoteEditor)
com.ichi2.anki.NoteEditor:com.afollestad.materialdialogs.MaterialDialog access$000(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.NoteEditor:com.afollestad.materialdialogs.MaterialDialog access$000(com.ichi2.anki.NoteEditor)
com.ichi2.anki.NoteEditor:com.afollestad.materialdialogs.MaterialDialog access$000(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.afollestad.materialdialogs.MaterialDialog:void dismiss()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.BaseAsyncTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)
com.ichi2.async.BaseAsyncTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.NoteEditor:com.afollestad.materialdialogs.MaterialDialog access$000(com.ichi2.anki.NoteEditor)
com.ichi2.anki.NoteEditor:com.afollestad.materialdialogs.MaterialDialog access$000(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.NoteEditor:com.afollestad.materialdialogs.MaterialDialog access$000(com.ichi2.anki.NoteEditor)
com.ichi2.anki.NoteEditor:com.afollestad.materialdialogs.MaterialDialog access$000(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.NoteEditor:java.lang.Boolean access$1102(com.ichi2.anki.NoteEditor,java.lang.Boolean)
com.ichi2.anki.NoteEditor:java.lang.Boolean access$1102(com.ichi2.anki.NoteEditor,java.lang.Boolean)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.NoteEditor:java.lang.Boolean access$1202(com.ichi2.anki.NoteEditor,java.lang.Boolean)
com.ichi2.anki.NoteEditor:java.lang.Boolean access$1202(com.ichi2.anki.NoteEditor,java.lang.Boolean)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->com.ichi2.anki.FieldEditText:boolean dispatchTouchEvent(android.view.MotionEvent)
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->com.ichi2.anki.FieldEditText:boolean dispatchTouchEvent(android.view.MotionEvent)
com.ichi2.anki.NoteEditor:java.lang.Boolean access$1102(com.ichi2.anki.NoteEditor,java.lang.Boolean)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean access$2500(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean access$2500(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:java.lang.Boolean duplicateCheck()
com.ichi2.anki.NoteEditor:java.lang.Boolean duplicateCheck()->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean duplicateCheck()->com.ichi2.libanki.Note:[Ljava.lang.String; getFields()
com.ichi2.libanki.Note:[Ljava.lang.String; getFields()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean duplicateCheck()->com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)
com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)->com.ichi2.libanki.Note:[Ljava.lang.String; values()
com.ichi2.libanki.Note:[Ljava.lang.String; values()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)->com.ichi2.anki.FieldEditText:java.lang.Integer getOrd()
com.ichi2.anki.FieldEditText:java.lang.Integer getOrd()->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)->com.ichi2.libanki.Note:[Ljava.lang.String; values()
com.ichi2.libanki.Note:[Ljava.lang.String; values()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)->com.ichi2.anki.FieldEditText:java.lang.Integer getOrd()
com.ichi2.anki.FieldEditText:java.lang.Integer getOrd()->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean duplicateCheck()->com.ichi2.libanki.Note:java.lang.Integer dupeOrEmpty()
com.ichi2.libanki.Note:java.lang.Integer dupeOrEmpty()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.libanki.Note:java.lang.Integer dupeOrEmpty()->com.ichi2.libanki.Utils:java.lang.Long fieldChecksum(java.lang.String)
com.ichi2.libanki.Utils:java.lang.Long fieldChecksum(java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.Long fieldChecksum(java.lang.String)->com.ichi2.libanki.Utils:java.lang.String stripHTMLMedia(java.lang.String)
com.ichi2.libanki.Utils:java.lang.String stripHTMLMedia(java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.String stripHTMLMedia(java.lang.String)->com.ichi2.libanki.Utils:java.lang.String stripHTML(java.lang.String)
com.ichi2.libanki.Utils:java.lang.String stripHTML(java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.String stripHTML(java.lang.String)->com.ichi2.libanki.Utils:java.lang.String entsToTxt(java.lang.String)
com.ichi2.libanki.Utils:java.lang.String entsToTxt(java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.Long fieldChecksum(java.lang.String)->com.ichi2.libanki.Utils:java.lang.String checksum(java.lang.String)
com.ichi2.libanki.Utils:java.lang.String checksum(java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Note:java.lang.Integer dupeOrEmpty()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Note:java.lang.Integer dupeOrEmpty()->com.ichi2.libanki.DB:java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,java.lang.Integer)
com.ichi2.libanki.DB:java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,java.lang.Integer)->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.DB:java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteProgram:[Ljava.lang.String; getColumnNames()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
com.ichi2.libanki.DB:java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,java.lang.Integer)->com.ichi2.libanki.DB:java.lang.String getCursorMethodName(java.lang.String)
com.ichi2.libanki.DB:java.lang.String getCursorMethodName(java.lang.String)->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.DB:java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,java.lang.Integer)->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()->io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.String getPath()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void clearOrCreateWindow(java.lang.String)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer cursorPickFillWindowStartPosition(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()
io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.String getSql()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:void getBindArgs()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()
io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:void setStartPosition(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
com.ichi2.libanki.DB:java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:java.lang.String getString(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.String getString(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.String getString(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.String getString(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.DB:java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,java.lang.Integer)->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
com.ichi2.libanki.DB:java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:void close()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.AbstractCursor:void close()
io.requery.android.database.AbstractCursor:void close()->io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractWindowedCursor:void closeWindow()
io.requery.android.database.AbstractWindowedCursor:void closeWindow()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.CursorWindow:void onAllReferencesReleased()
io.requery.android.database.CursorWindow:void onAllReferencesReleased()->io.requery.android.database.CursorWindow:void dispose()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()
io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()->io.requery.android.database.sqlite.SQLiteProgram:void clearBindings()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:void cursorClosed()
com.ichi2.libanki.Note:java.lang.Integer dupeOrEmpty()->com.ichi2.libanki.Utils:[Ljava.lang.String; splitFields(java.lang.String)
com.ichi2.libanki.Utils:[Ljava.lang.String; splitFields(java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Note:java.lang.Integer dupeOrEmpty()->com.ichi2.libanki.Utils:java.lang.String stripHTMLMedia(java.lang.String)
com.ichi2.libanki.Utils:java.lang.String stripHTMLMedia(java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.String stripHTMLMedia(java.lang.String)->com.ichi2.libanki.Utils:java.lang.String stripHTML(java.lang.String)
com.ichi2.libanki.Utils:java.lang.String stripHTML(java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.String stripHTML(java.lang.String)->com.ichi2.libanki.Utils:java.lang.String entsToTxt(java.lang.String)
com.ichi2.libanki.Utils:java.lang.String entsToTxt(java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Note:java.lang.Integer dupeOrEmpty()->com.ichi2.libanki.Utils:java.lang.String stripHTMLMedia(java.lang.String)
com.ichi2.libanki.Utils:java.lang.String stripHTMLMedia(java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.String stripHTMLMedia(java.lang.String)->com.ichi2.libanki.Utils:java.lang.String stripHTML(java.lang.String)
com.ichi2.libanki.Utils:java.lang.String stripHTML(java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.String stripHTML(java.lang.String)->com.ichi2.libanki.Utils:java.lang.String entsToTxt(java.lang.String)
com.ichi2.libanki.Utils:java.lang.String entsToTxt(java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean duplicateCheck()->com.ichi2.anki.FieldEditText:void setDupeStyle()
com.ichi2.anki.FieldEditText:void setDupeStyle()->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.FieldEditText:void setDupeStyle()->com.ichi2.themes.Themes:java.lang.Integer getColorFromAttr(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.ichi2.themes.Themes:java.lang.Integer getColorFromAttr(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.ichi2.themes.Themes:[Z $jacocoInit()
com.ichi2.themes.Themes:java.lang.Integer getColorFromAttr(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.ichi2.themes.Themes:[I getColorFromAttr(com.ichi2.anki.NoteEditor,[I)
com.ichi2.themes.Themes:[I getColorFromAttr(com.ichi2.anki.NoteEditor,[I)->com.ichi2.themes.Themes:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean duplicateCheck()->com.ichi2.libanki.Note:[Ljava.lang.String; values()
com.ichi2.libanki.Note:[Ljava.lang.String; values()->com.ichi2.libanki.Note:[Z $jacocoInit()
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->com.ichi2.anki.FieldEditText:boolean dispatchTouchEvent(android.view.MotionEvent)
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->com.ichi2.anki.FieldEditText:boolean dispatchTouchEvent(android.view.MotionEvent)
com.ichi2.anki.NoteEditor:java.lang.Boolean access$1102(com.ichi2.anki.NoteEditor,java.lang.Boolean)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->androidx.appcompat.view.menu.ActionMenuItemView:boolean dispatchTouchEvent(android.view.MotionEvent)
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->androidx.appcompat.view.menu.ActionMenuItemView:boolean dispatchTouchEvent(android.view.MotionEvent)
com.ichi2.anki.NoteEditor:java.lang.Boolean onOptionsItemSelected(androidx.appcompat.view.menu.MenuItemImpl)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean onOptionsItemSelected(androidx.appcompat.view.menu.MenuItemImpl)->com.ichi2.anki.NoteEditor:void saveNote()
com.ichi2.anki.NoteEditor:void saveNote()->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void saveNote()->com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)
com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)->com.ichi2.libanki.Note:[Ljava.lang.String; values()
com.ichi2.libanki.Note:[Ljava.lang.String; values()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)->com.ichi2.anki.FieldEditText:java.lang.Integer getOrd()
com.ichi2.anki.FieldEditText:java.lang.Integer getOrd()->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)->com.ichi2.libanki.Note:[Ljava.lang.String; values()
com.ichi2.libanki.Note:[Ljava.lang.String; values()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)->com.ichi2.anki.FieldEditText:java.lang.Integer getOrd()
com.ichi2.anki.FieldEditText:java.lang.Integer getOrd()->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void saveNote()->com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)
com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)->com.ichi2.libanki.Note:[Ljava.lang.String; values()
com.ichi2.libanki.Note:[Ljava.lang.String; values()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)->com.ichi2.anki.FieldEditText:java.lang.Integer getOrd()
com.ichi2.anki.FieldEditText:java.lang.Integer getOrd()->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)->com.ichi2.libanki.Note:[Ljava.lang.String; values()
com.ichi2.libanki.Note:[Ljava.lang.String; values()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)->com.ichi2.anki.FieldEditText:java.lang.Integer getOrd()
com.ichi2.anki.FieldEditText:java.lang.Integer getOrd()->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void saveNote()->com.ichi2.libanki.Note:org.json.JSONObject model()
com.ichi2.libanki.Note:org.json.JSONObject model()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void saveNote()->com.ichi2.anki.NoteEditor:java.lang.String tagsAsString(java.util.ArrayList)
com.ichi2.anki.NoteEditor:java.lang.String tagsAsString(java.util.ArrayList)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void saveNote()->com.ichi2.libanki.Note:void setTagsFromStr(java.lang.String)
com.ichi2.libanki.Note:void setTagsFromStr(java.lang.String)->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.libanki.Note:void setTagsFromStr(java.lang.String)->com.ichi2.libanki.Collection:com.ichi2.libanki.Tags getTags()
com.ichi2.libanki.Collection:com.ichi2.libanki.Tags getTags()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Note:void setTagsFromStr(java.lang.String)->com.ichi2.libanki.Tags:java.util.ArrayList split(java.lang.String)
com.ichi2.libanki.Tags:java.util.ArrayList split(java.lang.String)->com.ichi2.libanki.Tags:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void saveNote()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.NoteEditor:void saveNote()->com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()
com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void saveNote()->com.ichi2.libanki.Models:org.json.JSONObject current()
com.ichi2.libanki.Models:org.json.JSONObject current()->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current()->com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Decks:org.json.JSONObject current()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:java.lang.Long selected()
com.ichi2.libanki.Decks:java.lang.Long selected()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.lang.Long selected()->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Models:void get(java.lang.Long)
com.ichi2.libanki.Models:void get(java.lang.Long)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void saveNote()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.NoteEditor:void saveNote()->com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()
com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void saveNote()->com.ichi2.libanki.Models:void setChanged()
com.ichi2.libanki.Models:void setChanged()->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void saveNote()->com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.NoteEditor$1,[Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.NoteEditor$1,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.NoteEditor$1,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.NoteEditor$1,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.NoteEditor$1,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.NoteEditor$1,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onPreExecute()
com.ichi2.async.DeckTask:void onPreExecute()->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPreExecute()->com.ichi2.async.BaseAsyncTask:void onPreExecute()
com.ichi2.async.BaseAsyncTask:void onPreExecute()->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onPreExecute()->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPreExecute()->com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean)->com.ichi2.themes.StyledProgressDialog:[Z $jacocoInit()
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean)->com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.ichi2.themes.StyledProgressDialog:[Z $jacocoInit()
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer getColor(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer adjustAlpha(java.lang.Integer,java.lang.Float)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer adjustAlpha(java.lang.Integer,java.lang.Float)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer adjustAlpha(java.lang.Integer,java.lang.Float)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer adjustAlpha(java.lang.Integer,java.lang.Float)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Boolean isColorDark(java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.internal.ThemeSingleton:void get(java.lang.Boolean)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.NoteEditor,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.NoteEditor,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer gravityEnumToAttrInt(com.afollestad.materialdialogs.GravityEnum)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.NoteEditor,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.NoteEditor,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer gravityEnumToAttrInt(com.afollestad.materialdialogs.GravityEnum)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.NoteEditor,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.NoteEditor,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer gravityEnumToAttrInt(com.afollestad.materialdialogs.GravityEnum)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.NoteEditor,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.NoteEditor,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer gravityEnumToAttrInt(com.afollestad.materialdialogs.GravityEnum)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.NoteEditor,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.NoteEditor,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer gravityEnumToAttrInt(com.afollestad.materialdialogs.GravityEnum)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:void resolveString(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:void resolveString(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.DialogInit:java.lang.Integer getTheme(com.afollestad.materialdialogs.MaterialDialog$Builder)
com.afollestad.materialdialogs.DialogInit:java.lang.Integer getTheme(com.afollestad.materialdialogs.MaterialDialog$Builder)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Boolean resolveBoolean(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Boolean)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.DialogInit:java.lang.Integer getInflateLayout(com.afollestad.materialdialogs.MaterialDialog$Builder)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.internal.MDRootLayout:void init(com.ichi2.anki.NoteEditor,android.content.res.XmlBlock$Parser,java.lang.Integer)
com.afollestad.materialdialogs.internal.MDRootLayout:void init(com.ichi2.anki.NoteEditor,android.content.res.XmlBlock$Parser,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.internal.MDButton:void init(com.ichi2.anki.NoteEditor)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.internal.MDButton:void init(com.ichi2.anki.NoteEditor)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.internal.MDButton:void init(com.ichi2.anki.NoteEditor)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.internal.MDRootLayout:void onFinishInflate()
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList resolveActionTextColorStateList(com.ichi2.anki.NoteEditor,java.lang.Integer,android.content.res.ColorStateList)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList resolveActionTextColorStateList(com.ichi2.anki.NoteEditor,java.lang.Integer,android.content.res.ColorStateList)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList resolveActionTextColorStateList(com.ichi2.anki.NoteEditor,java.lang.Integer,android.content.res.ColorStateList)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveDimension(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveDimension(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveDimension(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Boolean resolveBoolean(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Boolean resolveBoolean(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Boolean resolveBoolean(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Boolean)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDRootLayout:void setDividerColor(java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:void setTypeface(androidx.appcompat.widget.AppCompatTextView,android.graphics.Typeface)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:void setTypeface(androidx.appcompat.widget.AppCompatTextView,android.graphics.Typeface)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDRootLayout:void setButtonGravity(com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.internal.MDRootLayout:void setButtonGravity(com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.internal.MDRootLayout:void invertGravityIfNecessary()
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDRootLayout:void setButtonStackedGravity(com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.internal.MDRootLayout:void setButtonStackedGravity(com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.internal.MDButton:void setStackedGravity(com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.internal.MDRootLayout:void setButtonStackedGravity(com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.internal.MDButton:void setStackedGravity(com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.internal.MDRootLayout:void setButtonStackedGravity(com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.internal.MDButton:void setStackedGravity(com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDRootLayout:void setStackingBehavior(com.afollestad.materialdialogs.StackingBehavior)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Boolean resolveBoolean(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Boolean)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Boolean resolveBoolean(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Boolean)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:void setTypeface(com.afollestad.materialdialogs.internal.MDButton,android.graphics.Typeface)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setAllCapsCompat(java.lang.Boolean)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setStackedSelector(android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.RippleHelper:void applyColor(android.graphics.drawable.RippleDrawable,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setDefaultSelector(android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.internal.MDButton:void setDefaultSelector(android.graphics.drawable.RippleDrawable)->com.afollestad.materialdialogs.internal.MDButton:void setStacked(java.lang.Boolean,java.lang.Boolean)
com.afollestad.materialdialogs.internal.MDButton:void setStacked(java.lang.Boolean,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void setBackgroundCompat(com.afollestad.materialdialogs.internal.MDButton,android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:void setTypeface(com.afollestad.materialdialogs.internal.MDButton,android.graphics.Typeface)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setAllCapsCompat(java.lang.Boolean)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setStackedSelector(android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.RippleHelper:void applyColor(android.graphics.drawable.RippleDrawable,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setDefaultSelector(android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.internal.MDButton:void setDefaultSelector(android.graphics.drawable.RippleDrawable)->com.afollestad.materialdialogs.internal.MDButton:void setStacked(java.lang.Boolean,java.lang.Boolean)
com.afollestad.materialdialogs.internal.MDButton:void setStacked(java.lang.Boolean,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void setBackgroundCompat(com.afollestad.materialdialogs.internal.MDButton,android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:void setTypeface(com.afollestad.materialdialogs.internal.MDButton,android.graphics.Typeface)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setAllCapsCompat(java.lang.Boolean)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setStackedSelector(android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.RippleHelper:void applyColor(android.graphics.drawable.RippleDrawable,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setDefaultSelector(android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.internal.MDButton:void setDefaultSelector(android.graphics.drawable.RippleDrawable)->com.afollestad.materialdialogs.internal.MDButton:void setStacked(java.lang.Boolean,java.lang.Boolean)
com.afollestad.materialdialogs.internal.MDButton:void setStacked(java.lang.Boolean,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void setBackgroundCompat(com.afollestad.materialdialogs.internal.MDButton,android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.DialogInit:void setupProgressDialog(com.afollestad.materialdialogs.MaterialDialog)
com.afollestad.materialdialogs.DialogInit:void setupProgressDialog(com.afollestad.materialdialogs.MaterialDialog)->me.zhanghai.android.materialprogressbar.internal.ThemeUtils:java.lang.Integer getColorFromAttrRes(java.lang.Integer,java.lang.Integer,com.ichi2.anki.NoteEditor)
com.afollestad.materialdialogs.DialogInit:void setupProgressDialog(com.afollestad.materialdialogs.MaterialDialog)->me.zhanghai.android.materialprogressbar.Animators:android.animation.AnimatorSet createIndeterminate(me.zhanghai.android.materialprogressbar.IndeterminateCircularProgressDrawable$RingPathTransform)
com.afollestad.materialdialogs.DialogInit:void setupProgressDialog(com.afollestad.materialdialogs.MaterialDialog)->me.zhanghai.android.materialprogressbar.Animators:android.animation.ObjectAnimator createIndeterminateRotation(me.zhanghai.android.materialprogressbar.IndeterminateCircularProgressDrawable$RingRotation)
com.afollestad.materialdialogs.DialogInit:void setupProgressDialog(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.DialogInit:void fixCanvasScalingWhenHardwareAccelerated(android.widget.ProgressBar)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.DialogInit:void setupInputDialog(com.afollestad.materialdialogs.MaterialDialog)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.DialogBase:void setOnShowListenerInternal()
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:void invalidateList()
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.DialogBase:void setViewInternal(com.afollestad.materialdialogs.internal.MDRootLayout)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:void checkIfListInitScroll()
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDRootLayout:void setMaxHeight(java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.MaterialDialog:void show()
com.ichi2.async.DeckTask:void onPreExecute()->com.ichi2.anki.NoteEditor:com.afollestad.materialdialogs.MaterialDialog access$002(com.ichi2.anki.NoteEditor,com.afollestad.materialdialogs.MaterialDialog)
com.ichi2.anki.NoteEditor:com.afollestad.materialdialogs.MaterialDialog access$002(com.ichi2.anki.NoteEditor,com.afollestad.materialdialogs.MaterialDialog)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(android.widget.LinearLayout)
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(android.widget.LinearLayout)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(android.widget.LinearLayout)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(android.widget.LinearLayout)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:void setUpDividersVisibility(android.widget.LinearLayout,java.lang.Boolean,java.lang.Boolean)
com.afollestad.materialdialogs.internal.MDRootLayout:void setUpDividersVisibility(android.widget.LinearLayout,java.lang.Boolean,java.lang.Boolean)->com.afollestad.materialdialogs.internal.MDRootLayout:void getTopView(android.widget.LinearLayout)
com.afollestad.materialdialogs.internal.MDRootLayout:void setUpDividersVisibility(android.widget.LinearLayout,java.lang.Boolean,java.lang.Boolean)->com.afollestad.materialdialogs.internal.MDRootLayout:void setUpDividersVisibility(android.view.View,java.lang.Boolean,java.lang.Boolean)
com.afollestad.materialdialogs.internal.MDRootLayout:void setUpDividersVisibility(android.widget.LinearLayout,java.lang.Boolean,java.lang.Boolean)->com.afollestad.materialdialogs.internal.MDRootLayout:void getBottomView(android.widget.LinearLayout)
com.afollestad.materialdialogs.MaterialDialog:void onShow(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.DialogBase:void onShow(com.afollestad.materialdialogs.MaterialDialog)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.NoteEditor:java.lang.Boolean access$102(com.ichi2.anki.NoteEditor,java.lang.Boolean)
com.ichi2.anki.NoteEditor:java.lang.Boolean access$102(com.ichi2.anki.NoteEditor,java.lang.Boolean)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.NoteEditor:void access$202(com.ichi2.anki.NoteEditor,[Ljava.lang.String;)
com.ichi2.anki.NoteEditor:void access$202(com.ichi2.anki.NoteEditor,[Ljava.lang.String;)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.NoteEditor:com.ichi2.libanki.Note access$300(com.ichi2.anki.NoteEditor)
com.ichi2.anki.NoteEditor:com.ichi2.libanki.Note access$300(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.libanki.Note:com.ichi2.libanki.Note clone()
com.ichi2.libanki.Note:com.ichi2.libanki.Note clone()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.NoteEditor:void access$400(com.ichi2.anki.NoteEditor)
com.ichi2.anki.NoteEditor:void access$400(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void access$400(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:void setNote()
com.ichi2.anki.NoteEditor:void setNote()->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote()->com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()
com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.libanki.Models:org.json.JSONObject current()
com.ichi2.libanki.Models:org.json.JSONObject current()->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current()->com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Decks:org.json.JSONObject current()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:java.lang.Long selected()
com.ichi2.libanki.Decks:java.lang.Long selected()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.lang.Long selected()->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Models:void get(java.lang.Long)
com.ichi2.libanki.Models:void get(java.lang.Long)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.libanki.Utils:java.lang.Long timestampID(com.ichi2.libanki.DB,java.lang.String)
com.ichi2.libanki.Utils:java.lang.Long timestampID(com.ichi2.libanki.DB,java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.Long timestampID(com.ichi2.libanki.DB,java.lang.String)->com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)
com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)->com.ichi2.libanki.Utils:java.lang.Double now()
com.ichi2.libanki.Utils:java.lang.Double now()->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.Long timestampID(com.ichi2.libanki.DB,java.lang.String)->com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String)
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String)->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String)->com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:void access$200(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void access$200(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void recyclePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteProgram:[Ljava.lang.String; getColumnNames()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()->io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.String getPath()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void clearOrCreateWindow(java.lang.String)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer cursorPickFillWindowStartPosition(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()
io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.String getSql()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:void getBindArgs()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()
io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:void setStartPosition(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteCursor:void close()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.AbstractCursor:void close()
io.requery.android.database.AbstractCursor:void close()->io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractWindowedCursor:void closeWindow()
io.requery.android.database.AbstractWindowedCursor:void closeWindow()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.CursorWindow:void onAllReferencesReleased()
io.requery.android.database.CursorWindow:void onAllReferencesReleased()->io.requery.android.database.CursorWindow:void dispose()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()
io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()->io.requery.android.database.sqlite.SQLiteProgram:void clearBindings()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:void cursorClosed()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.libanki.Utils:java.lang.String guid64()
com.ichi2.libanki.Utils:java.lang.String guid64()->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.String guid64()->com.ichi2.libanki.Utils:java.lang.String base91(java.lang.Integer)
com.ichi2.libanki.Utils:java.lang.String base91(java.lang.Integer)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.String base91(java.lang.Integer)->com.ichi2.libanki.Utils:java.lang.String base62(java.lang.Integer,java.lang.String)
com.ichi2.libanki.Utils:java.lang.String base62(java.lang.Integer,java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()
com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.libanki.Models:java.util.HashMap fieldMap(org.json.JSONObject)
com.ichi2.libanki.Models:java.util.HashMap fieldMap(org.json.JSONObject)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.libanki.Collection:java.lang.Long getScm()
com.ichi2.libanki.Collection:java.lang.Long getScm()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.anki.NoteEditor:void updateDeckPosition()
com.ichi2.anki.NoteEditor:void updateDeckPosition()->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.anki.NoteEditor:void updateTags()
com.ichi2.anki.NoteEditor:void updateTags()->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void updateTags()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.NoteEditor:void updateTags()->com.ichi2.libanki.Collection:com.ichi2.libanki.Tags getTags()
com.ichi2.libanki.Collection:com.ichi2.libanki.Tags getTags()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void updateTags()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.NoteEditor:void updateTags()->com.ichi2.libanki.Collection:com.ichi2.libanki.Tags getTags()
com.ichi2.libanki.Collection:com.ichi2.libanki.Tags getTags()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void updateTags()->com.ichi2.libanki.Tags:java.util.TreeSet canonify(java.util.ArrayList)
com.ichi2.libanki.Tags:java.util.TreeSet canonify(java.util.ArrayList)->com.ichi2.libanki.Tags:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void updateTags()->com.ichi2.libanki.Tags:java.lang.String join(java.util.TreeSet)
com.ichi2.libanki.Tags:java.lang.String join(java.util.TreeSet)->com.ichi2.libanki.Tags:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.libanki.Note:org.json.JSONObject model()
com.ichi2.libanki.Note:org.json.JSONObject model()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.anki.NoteEditor:void updateCards(org.json.JSONObject)
com.ichi2.anki.NoteEditor:void updateCards(org.json.JSONObject)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void updateCards(org.json.JSONObject)->com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()->com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatHelper getInstance()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatHelper getInstance()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void updateCards(org.json.JSONObject)->com.ichi2.compat.CompatV15:android.text.SpannableStringBuilder fromHtml(java.lang.String)
com.ichi2.compat.CompatV15:android.text.SpannableStringBuilder fromHtml(java.lang.String)->com.ichi2.compat.CompatV15:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.anki.NoteEditor:void populateEditFields()
com.ichi2.anki.NoteEditor:void populateEditFields()->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields()->com.ichi2.libanki.Note:[[Ljava.lang.String; items()
com.ichi2.libanki.Note:[[Ljava.lang.String; items()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields()->com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(android.app.ContextImpl)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(android.app.ContextImpl)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.NoteEditor:void initFieldEditText(com.ichi2.anki.FieldEditText,java.lang.Integer,[Ljava.lang.String;,android.graphics.Typeface,java.lang.Boolean)
com.ichi2.anki.NoteEditor:void initFieldEditText(com.ichi2.anki.FieldEditText,java.lang.Integer,[Ljava.lang.String;,android.graphics.Typeface,java.lang.Boolean)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void initFieldEditText(com.ichi2.anki.FieldEditText,java.lang.Integer,[Ljava.lang.String;,android.graphics.Typeface,java.lang.Boolean)->com.ichi2.anki.FieldEditText:void init(java.lang.Integer,java.lang.String,java.lang.String)
com.ichi2.anki.FieldEditText:void init(java.lang.Integer,java.lang.String,java.lang.String)->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.FieldEditText:void init(java.lang.Integer,java.lang.String,java.lang.String)->com.ichi2.anki.FieldEditText:void setDefaultStyle()
com.ichi2.anki.FieldEditText:void setDefaultStyle()->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.FieldEditText:android.widget.TextView getLabel()
com.ichi2.anki.FieldEditText:android.widget.TextView getLabel()->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.UIUtils:java.lang.Float getDensityAdjustedValue(com.ichi2.anki.NoteEditor,java.lang.Float)
com.ichi2.anki.UIUtils:java.lang.Float getDensityAdjustedValue(com.ichi2.anki.NoteEditor,java.lang.Float)->com.ichi2.anki.UIUtils:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.themes.Themes:[I getResFromAttr(com.ichi2.anki.NoteEditor,[I)
com.ichi2.themes.Themes:[I getResFromAttr(com.ichi2.anki.NoteEditor,[I)->com.ichi2.themes.Themes:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.NoteEditor:void setMMButtonListener(androidx.appcompat.widget.AppCompatImageButton,java.lang.Integer)
com.ichi2.anki.NoteEditor:void setMMButtonListener(androidx.appcompat.widget.AppCompatImageButton,java.lang.Integer)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.NoteEditor:void initFieldEditText(com.ichi2.anki.FieldEditText,java.lang.Integer,[Ljava.lang.String;,android.graphics.Typeface,java.lang.Boolean)
com.ichi2.anki.NoteEditor:void initFieldEditText(com.ichi2.anki.FieldEditText,java.lang.Integer,[Ljava.lang.String;,android.graphics.Typeface,java.lang.Boolean)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void initFieldEditText(com.ichi2.anki.FieldEditText,java.lang.Integer,[Ljava.lang.String;,android.graphics.Typeface,java.lang.Boolean)->com.ichi2.anki.FieldEditText:void init(java.lang.Integer,java.lang.String,java.lang.String)
com.ichi2.anki.FieldEditText:void init(java.lang.Integer,java.lang.String,java.lang.String)->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.FieldEditText:void init(java.lang.Integer,java.lang.String,java.lang.String)->com.ichi2.anki.FieldEditText:void setDefaultStyle()
com.ichi2.anki.FieldEditText:void setDefaultStyle()->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.FieldEditText:android.widget.TextView getLabel()
com.ichi2.anki.FieldEditText:android.widget.TextView getLabel()->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.UIUtils:java.lang.Float getDensityAdjustedValue(com.ichi2.anki.NoteEditor,java.lang.Float)
com.ichi2.anki.UIUtils:java.lang.Float getDensityAdjustedValue(com.ichi2.anki.NoteEditor,java.lang.Float)->com.ichi2.anki.UIUtils:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.themes.Themes:[I getResFromAttr(com.ichi2.anki.NoteEditor,[I)
com.ichi2.themes.Themes:[I getResFromAttr(com.ichi2.anki.NoteEditor,[I)->com.ichi2.themes.Themes:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.NoteEditor:void setMMButtonListener(androidx.appcompat.widget.AppCompatImageButton,java.lang.Integer)
com.ichi2.anki.NoteEditor:void setMMButtonListener(androidx.appcompat.widget.AppCompatImageButton,java.lang.Integer)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.NoteEditor:com.ichi2.libanki.Note access$300(com.ichi2.anki.NoteEditor)
com.ichi2.anki.NoteEditor:com.ichi2.libanki.Note access$300(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.libanki.Note:org.json.JSONObject model()
com.ichi2.libanki.Note:org.json.JSONObject model()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.UIUtils:void showThemedToast(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.Boolean)
com.ichi2.anki.UIUtils:void showThemedToast(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.Boolean)->com.ichi2.anki.UIUtils:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.NoteEditor:java.lang.Boolean access$600(com.ichi2.anki.NoteEditor)
com.ichi2.anki.NoteEditor:java.lang.Boolean access$600(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.NoteEditor:java.lang.Integer access$700(com.ichi2.anki.NoteEditor)
com.ichi2.anki.NoteEditor:java.lang.Integer access$700(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.NoteEditor:java.lang.Boolean access$800(com.ichi2.anki.NoteEditor)
com.ichi2.anki.NoteEditor:java.lang.Boolean access$800(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.NoteEditor:java.lang.Integer access$700(com.ichi2.anki.NoteEditor)
com.ichi2.anki.NoteEditor:java.lang.Integer access$700(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.NoteEditor:java.util.LinkedList access$500(com.ichi2.anki.NoteEditor)
com.ichi2.anki.NoteEditor:java.util.LinkedList access$500(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.NoteEditor:java.util.LinkedList access$500(com.ichi2.anki.NoteEditor)
com.ichi2.anki.NoteEditor:java.util.LinkedList access$500(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.NoteEditor:com.afollestad.materialdialogs.MaterialDialog access$000(com.ichi2.anki.NoteEditor)
com.ichi2.anki.NoteEditor:com.afollestad.materialdialogs.MaterialDialog access$000(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.NoteEditor:com.afollestad.materialdialogs.MaterialDialog access$000(com.ichi2.anki.NoteEditor)
com.ichi2.anki.NoteEditor:com.afollestad.materialdialogs.MaterialDialog access$000(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.NoteEditor:com.afollestad.materialdialogs.MaterialDialog access$000(com.ichi2.anki.NoteEditor)
com.ichi2.anki.NoteEditor:com.afollestad.materialdialogs.MaterialDialog access$000(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.afollestad.materialdialogs.MaterialDialog:void dismiss()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.BaseAsyncTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)
com.ichi2.async.BaseAsyncTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.NoteEditor:com.afollestad.materialdialogs.MaterialDialog access$000(com.ichi2.anki.NoteEditor)
com.ichi2.anki.NoteEditor:com.afollestad.materialdialogs.MaterialDialog access$000(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.NoteEditor:com.afollestad.materialdialogs.MaterialDialog access$000(com.ichi2.anki.NoteEditor)
com.ichi2.anki.NoteEditor:com.afollestad.materialdialogs.MaterialDialog access$000(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.NoteEditor:java.lang.Boolean access$1102(com.ichi2.anki.NoteEditor,java.lang.Boolean)
com.ichi2.anki.NoteEditor:java.lang.Boolean access$1102(com.ichi2.anki.NoteEditor,java.lang.Boolean)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.NoteEditor:java.lang.Boolean access$1202(com.ichi2.anki.NoteEditor,java.lang.Boolean)
com.ichi2.anki.NoteEditor:java.lang.Boolean access$1202(com.ichi2.anki.NoteEditor,java.lang.Boolean)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->com.ichi2.anki.FieldEditText:boolean dispatchTouchEvent(android.view.MotionEvent)
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->com.ichi2.anki.FieldEditText:boolean dispatchTouchEvent(android.view.MotionEvent)
com.ichi2.anki.NoteEditor:java.lang.Boolean access$1102(com.ichi2.anki.NoteEditor,java.lang.Boolean)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean access$2500(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean access$2500(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:java.lang.Boolean duplicateCheck()
com.ichi2.anki.NoteEditor:java.lang.Boolean duplicateCheck()->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean duplicateCheck()->com.ichi2.libanki.Note:[Ljava.lang.String; getFields()
com.ichi2.libanki.Note:[Ljava.lang.String; getFields()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean duplicateCheck()->com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)
com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)->com.ichi2.libanki.Note:[Ljava.lang.String; values()
com.ichi2.libanki.Note:[Ljava.lang.String; values()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)->com.ichi2.anki.FieldEditText:java.lang.Integer getOrd()
com.ichi2.anki.FieldEditText:java.lang.Integer getOrd()->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)->com.ichi2.libanki.Note:[Ljava.lang.String; values()
com.ichi2.libanki.Note:[Ljava.lang.String; values()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)->com.ichi2.anki.FieldEditText:java.lang.Integer getOrd()
com.ichi2.anki.FieldEditText:java.lang.Integer getOrd()->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean duplicateCheck()->com.ichi2.libanki.Note:void dupeOrEmpty()
com.ichi2.libanki.Note:void dupeOrEmpty()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.libanki.Note:void dupeOrEmpty()->com.ichi2.libanki.Utils:java.lang.Long fieldChecksum(java.lang.String)
com.ichi2.libanki.Utils:java.lang.Long fieldChecksum(java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.Long fieldChecksum(java.lang.String)->com.ichi2.libanki.Utils:java.lang.String stripHTMLMedia(java.lang.String)
com.ichi2.libanki.Utils:java.lang.String stripHTMLMedia(java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.String stripHTMLMedia(java.lang.String)->com.ichi2.libanki.Utils:java.lang.String stripHTML(java.lang.String)
com.ichi2.libanki.Utils:java.lang.String stripHTML(java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.String stripHTML(java.lang.String)->com.ichi2.libanki.Utils:java.lang.String entsToTxt(java.lang.String)
com.ichi2.libanki.Utils:java.lang.String entsToTxt(java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.Long fieldChecksum(java.lang.String)->com.ichi2.libanki.Utils:java.lang.String checksum(java.lang.String)
com.ichi2.libanki.Utils:java.lang.String checksum(java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Note:void dupeOrEmpty()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Note:void dupeOrEmpty()->com.ichi2.libanki.DB:java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,java.lang.Integer)
com.ichi2.libanki.DB:java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,java.lang.Integer)->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.DB:java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:void access$200(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void access$200(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void recyclePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteProgram:[Ljava.lang.String; getColumnNames()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
com.ichi2.libanki.DB:java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,java.lang.Integer)->com.ichi2.libanki.DB:java.lang.String getCursorMethodName(java.lang.String)
com.ichi2.libanki.DB:java.lang.String getCursorMethodName(java.lang.String)->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.DB:java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,java.lang.Integer)->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()->io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.String getPath()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void clearOrCreateWindow(java.lang.String)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer cursorPickFillWindowStartPosition(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()
io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.String getSql()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:void getBindArgs()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()
io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:void setStartPosition(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
com.ichi2.libanki.DB:java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:void close()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.AbstractCursor:void close()
io.requery.android.database.AbstractCursor:void close()->io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractWindowedCursor:void closeWindow()
io.requery.android.database.AbstractWindowedCursor:void closeWindow()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.CursorWindow:void onAllReferencesReleased()
io.requery.android.database.CursorWindow:void onAllReferencesReleased()->io.requery.android.database.CursorWindow:void dispose()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()
io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()->io.requery.android.database.sqlite.SQLiteProgram:void clearBindings()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:void cursorClosed()
com.ichi2.anki.NoteEditor:java.lang.Boolean duplicateCheck()->com.ichi2.anki.FieldEditText:void setDefaultStyle()
com.ichi2.anki.FieldEditText:void setDefaultStyle()->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean duplicateCheck()->com.ichi2.libanki.Note:[Ljava.lang.String; values()
com.ichi2.libanki.Note:[Ljava.lang.String; values()->com.ichi2.libanki.Note:[Z $jacocoInit()
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->com.ichi2.anki.FieldEditText:boolean dispatchTouchEvent(android.view.MotionEvent)
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->com.ichi2.anki.FieldEditText:boolean dispatchTouchEvent(android.view.MotionEvent)
com.ichi2.anki.NoteEditor:java.lang.Boolean access$1102(com.ichi2.anki.NoteEditor,java.lang.Boolean)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->androidx.appcompat.view.menu.ActionMenuItemView:boolean dispatchTouchEvent(android.view.MotionEvent)
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->androidx.appcompat.view.menu.ActionMenuItemView:boolean dispatchTouchEvent(android.view.MotionEvent)
com.ichi2.anki.NoteEditor:java.lang.Boolean onOptionsItemSelected(androidx.appcompat.view.menu.MenuItemImpl)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean onOptionsItemSelected(androidx.appcompat.view.menu.MenuItemImpl)->com.ichi2.anki.NoteEditor:void saveNote()
com.ichi2.anki.NoteEditor:void saveNote()->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void saveNote()->com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)
com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)->com.ichi2.libanki.Note:[Ljava.lang.String; values()
com.ichi2.libanki.Note:[Ljava.lang.String; values()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)->com.ichi2.anki.FieldEditText:java.lang.Integer getOrd()
com.ichi2.anki.FieldEditText:java.lang.Integer getOrd()->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)->com.ichi2.libanki.Note:[Ljava.lang.String; values()
com.ichi2.libanki.Note:[Ljava.lang.String; values()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)->com.ichi2.anki.FieldEditText:java.lang.Integer getOrd()
com.ichi2.anki.FieldEditText:java.lang.Integer getOrd()->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void saveNote()->com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)
com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)->com.ichi2.libanki.Note:[Ljava.lang.String; values()
com.ichi2.libanki.Note:[Ljava.lang.String; values()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)->com.ichi2.anki.FieldEditText:java.lang.Integer getOrd()
com.ichi2.anki.FieldEditText:java.lang.Integer getOrd()->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)->com.ichi2.libanki.Note:[Ljava.lang.String; values()
com.ichi2.libanki.Note:[Ljava.lang.String; values()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean updateField(com.ichi2.anki.FieldEditText)->com.ichi2.anki.FieldEditText:java.lang.Integer getOrd()
com.ichi2.anki.FieldEditText:java.lang.Integer getOrd()->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void saveNote()->com.ichi2.libanki.Note:org.json.JSONObject model()
com.ichi2.libanki.Note:org.json.JSONObject model()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void saveNote()->com.ichi2.anki.NoteEditor:java.lang.String tagsAsString(java.util.ArrayList)
com.ichi2.anki.NoteEditor:java.lang.String tagsAsString(java.util.ArrayList)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void saveNote()->com.ichi2.libanki.Note:void setTagsFromStr(java.lang.String)
com.ichi2.libanki.Note:void setTagsFromStr(java.lang.String)->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.libanki.Note:void setTagsFromStr(java.lang.String)->com.ichi2.libanki.Collection:com.ichi2.libanki.Tags getTags()
com.ichi2.libanki.Collection:com.ichi2.libanki.Tags getTags()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Note:void setTagsFromStr(java.lang.String)->com.ichi2.libanki.Tags:java.util.ArrayList split(java.lang.String)
com.ichi2.libanki.Tags:java.util.ArrayList split(java.lang.String)->com.ichi2.libanki.Tags:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void saveNote()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.NoteEditor:void saveNote()->com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()
com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void saveNote()->com.ichi2.libanki.Models:org.json.JSONObject current()
com.ichi2.libanki.Models:org.json.JSONObject current()->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current()->com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Decks:org.json.JSONObject current()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:java.lang.Long selected()
com.ichi2.libanki.Decks:java.lang.Long selected()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.lang.Long selected()->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Models:void get(java.lang.Long)
com.ichi2.libanki.Models:void get(java.lang.Long)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void saveNote()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.NoteEditor:void saveNote()->com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()
com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void saveNote()->com.ichi2.libanki.Models:void setChanged()
com.ichi2.libanki.Models:void setChanged()->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void saveNote()->com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.NoteEditor$1,[Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.NoteEditor$1,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.NoteEditor$1,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.NoteEditor$1,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.NoteEditor$1,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.NoteEditor$1,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onPreExecute()
com.ichi2.async.DeckTask:void onPreExecute()->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPreExecute()->com.ichi2.async.BaseAsyncTask:void onPreExecute()
com.ichi2.async.BaseAsyncTask:void onPreExecute()->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onPreExecute()->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPreExecute()->com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean)->com.ichi2.themes.StyledProgressDialog:[Z $jacocoInit()
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean)->com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.ichi2.themes.StyledProgressDialog:[Z $jacocoInit()
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer getColor(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer adjustAlpha(java.lang.Integer,java.lang.Float)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer adjustAlpha(java.lang.Integer,java.lang.Float)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer adjustAlpha(java.lang.Integer,java.lang.Float)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer adjustAlpha(java.lang.Integer,java.lang.Float)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Boolean isColorDark(java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.internal.ThemeSingleton:void get(java.lang.Boolean)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.NoteEditor,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.NoteEditor,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer gravityEnumToAttrInt(com.afollestad.materialdialogs.GravityEnum)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.NoteEditor,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.NoteEditor,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer gravityEnumToAttrInt(com.afollestad.materialdialogs.GravityEnum)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.NoteEditor,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.NoteEditor,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer gravityEnumToAttrInt(com.afollestad.materialdialogs.GravityEnum)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.NoteEditor,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.NoteEditor,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer gravityEnumToAttrInt(com.afollestad.materialdialogs.GravityEnum)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.NoteEditor,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.NoteEditor,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer gravityEnumToAttrInt(com.afollestad.materialdialogs.GravityEnum)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:void resolveString(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:void resolveString(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.DialogInit:java.lang.Integer getTheme(com.afollestad.materialdialogs.MaterialDialog$Builder)
com.afollestad.materialdialogs.DialogInit:java.lang.Integer getTheme(com.afollestad.materialdialogs.MaterialDialog$Builder)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Boolean resolveBoolean(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Boolean)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.DialogInit:java.lang.Integer getInflateLayout(com.afollestad.materialdialogs.MaterialDialog$Builder)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.internal.MDRootLayout:void init(com.ichi2.anki.NoteEditor,android.content.res.XmlBlock$Parser,java.lang.Integer)
com.afollestad.materialdialogs.internal.MDRootLayout:void init(com.ichi2.anki.NoteEditor,android.content.res.XmlBlock$Parser,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.internal.MDButton:void init(com.ichi2.anki.NoteEditor)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.internal.MDButton:void init(com.ichi2.anki.NoteEditor)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.internal.MDButton:void init(com.ichi2.anki.NoteEditor)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.internal.MDRootLayout:void onFinishInflate()
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList resolveActionTextColorStateList(com.ichi2.anki.NoteEditor,java.lang.Integer,android.content.res.ColorStateList)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList resolveActionTextColorStateList(com.ichi2.anki.NoteEditor,java.lang.Integer,android.content.res.ColorStateList)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList resolveActionTextColorStateList(com.ichi2.anki.NoteEditor,java.lang.Integer,android.content.res.ColorStateList)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveDimension(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveDimension(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveDimension(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Boolean resolveBoolean(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Boolean resolveBoolean(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Boolean resolveBoolean(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Boolean)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDRootLayout:void setDividerColor(java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:void setTypeface(androidx.appcompat.widget.AppCompatTextView,android.graphics.Typeface)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:void setTypeface(androidx.appcompat.widget.AppCompatTextView,android.graphics.Typeface)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDRootLayout:void setButtonGravity(com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.internal.MDRootLayout:void setButtonGravity(com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.internal.MDRootLayout:void invertGravityIfNecessary()
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDRootLayout:void setButtonStackedGravity(com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.internal.MDRootLayout:void setButtonStackedGravity(com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.internal.MDButton:void setStackedGravity(com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.internal.MDRootLayout:void setButtonStackedGravity(com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.internal.MDButton:void setStackedGravity(com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.internal.MDRootLayout:void setButtonStackedGravity(com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.internal.MDButton:void setStackedGravity(com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDRootLayout:void setStackingBehavior(com.afollestad.materialdialogs.StackingBehavior)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Boolean resolveBoolean(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Boolean)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Boolean resolveBoolean(com.ichi2.anki.NoteEditor,java.lang.Integer,java.lang.Boolean)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:void setTypeface(com.afollestad.materialdialogs.internal.MDButton,android.graphics.Typeface)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setAllCapsCompat(java.lang.Boolean)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setStackedSelector(android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.RippleHelper:void applyColor(android.graphics.drawable.RippleDrawable,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setDefaultSelector(android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.internal.MDButton:void setDefaultSelector(android.graphics.drawable.RippleDrawable)->com.afollestad.materialdialogs.internal.MDButton:void setStacked(java.lang.Boolean,java.lang.Boolean)
com.afollestad.materialdialogs.internal.MDButton:void setStacked(java.lang.Boolean,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void setBackgroundCompat(com.afollestad.materialdialogs.internal.MDButton,android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:void setTypeface(com.afollestad.materialdialogs.internal.MDButton,android.graphics.Typeface)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setAllCapsCompat(java.lang.Boolean)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setStackedSelector(android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.RippleHelper:void applyColor(android.graphics.drawable.RippleDrawable,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setDefaultSelector(android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.internal.MDButton:void setDefaultSelector(android.graphics.drawable.RippleDrawable)->com.afollestad.materialdialogs.internal.MDButton:void setStacked(java.lang.Boolean,java.lang.Boolean)
com.afollestad.materialdialogs.internal.MDButton:void setStacked(java.lang.Boolean,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void setBackgroundCompat(com.afollestad.materialdialogs.internal.MDButton,android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:void setTypeface(com.afollestad.materialdialogs.internal.MDButton,android.graphics.Typeface)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setAllCapsCompat(java.lang.Boolean)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setStackedSelector(android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.NoteEditor,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.RippleHelper:void applyColor(android.graphics.drawable.RippleDrawable,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setDefaultSelector(android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.internal.MDButton:void setDefaultSelector(android.graphics.drawable.RippleDrawable)->com.afollestad.materialdialogs.internal.MDButton:void setStacked(java.lang.Boolean,java.lang.Boolean)
com.afollestad.materialdialogs.internal.MDButton:void setStacked(java.lang.Boolean,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void setBackgroundCompat(com.afollestad.materialdialogs.internal.MDButton,android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.DialogInit:void setupProgressDialog(com.afollestad.materialdialogs.MaterialDialog)
com.afollestad.materialdialogs.DialogInit:void setupProgressDialog(com.afollestad.materialdialogs.MaterialDialog)->me.zhanghai.android.materialprogressbar.internal.ThemeUtils:java.lang.Integer getColorFromAttrRes(java.lang.Integer,java.lang.Integer,com.ichi2.anki.NoteEditor)
com.afollestad.materialdialogs.DialogInit:void setupProgressDialog(com.afollestad.materialdialogs.MaterialDialog)->me.zhanghai.android.materialprogressbar.Animators:android.animation.AnimatorSet createIndeterminate(me.zhanghai.android.materialprogressbar.IndeterminateCircularProgressDrawable$RingPathTransform)
com.afollestad.materialdialogs.DialogInit:void setupProgressDialog(com.afollestad.materialdialogs.MaterialDialog)->me.zhanghai.android.materialprogressbar.Animators:android.animation.ObjectAnimator createIndeterminateRotation(me.zhanghai.android.materialprogressbar.IndeterminateCircularProgressDrawable$RingRotation)
com.afollestad.materialdialogs.DialogInit:void setupProgressDialog(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.DialogInit:void fixCanvasScalingWhenHardwareAccelerated(android.widget.ProgressBar)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.DialogInit:void setupInputDialog(com.afollestad.materialdialogs.MaterialDialog)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.DialogBase:void setOnShowListenerInternal()
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:void invalidateList()
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.DialogBase:void setViewInternal(com.afollestad.materialdialogs.internal.MDRootLayout)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:void checkIfListInitScroll()
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDRootLayout:void setMaxHeight(java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.MaterialDialog:void show()
com.ichi2.async.DeckTask:void onPreExecute()->com.ichi2.anki.NoteEditor:com.afollestad.materialdialogs.MaterialDialog access$002(com.ichi2.anki.NoteEditor,com.afollestad.materialdialogs.MaterialDialog)
com.ichi2.anki.NoteEditor:com.afollestad.materialdialogs.MaterialDialog access$002(com.ichi2.anki.NoteEditor,com.afollestad.materialdialogs.MaterialDialog)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(android.widget.LinearLayout)
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(android.widget.LinearLayout)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(android.widget.LinearLayout)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(android.widget.LinearLayout)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:void setUpDividersVisibility(android.widget.LinearLayout,java.lang.Boolean,java.lang.Boolean)
com.afollestad.materialdialogs.internal.MDRootLayout:void setUpDividersVisibility(android.widget.LinearLayout,java.lang.Boolean,java.lang.Boolean)->com.afollestad.materialdialogs.internal.MDRootLayout:void getTopView(android.widget.LinearLayout)
com.afollestad.materialdialogs.internal.MDRootLayout:void setUpDividersVisibility(android.widget.LinearLayout,java.lang.Boolean,java.lang.Boolean)->com.afollestad.materialdialogs.internal.MDRootLayout:void setUpDividersVisibility(android.view.View,java.lang.Boolean,java.lang.Boolean)
com.afollestad.materialdialogs.internal.MDRootLayout:void setUpDividersVisibility(android.widget.LinearLayout,java.lang.Boolean,java.lang.Boolean)->com.afollestad.materialdialogs.internal.MDRootLayout:void getBottomView(android.widget.LinearLayout)
com.afollestad.materialdialogs.MaterialDialog:void onShow(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.DialogBase:void onShow(com.afollestad.materialdialogs.MaterialDialog)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.NoteEditor:java.lang.Boolean access$102(com.ichi2.anki.NoteEditor,java.lang.Boolean)
com.ichi2.anki.NoteEditor:java.lang.Boolean access$102(com.ichi2.anki.NoteEditor,java.lang.Boolean)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.NoteEditor:void access$202(com.ichi2.anki.NoteEditor,[Ljava.lang.String;)
com.ichi2.anki.NoteEditor:void access$202(com.ichi2.anki.NoteEditor,[Ljava.lang.String;)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.NoteEditor:com.ichi2.libanki.Note access$300(com.ichi2.anki.NoteEditor)
com.ichi2.anki.NoteEditor:com.ichi2.libanki.Note access$300(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.libanki.Note:com.ichi2.libanki.Note clone()
com.ichi2.libanki.Note:com.ichi2.libanki.Note clone()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.NoteEditor:void access$400(com.ichi2.anki.NoteEditor)
com.ichi2.anki.NoteEditor:void access$400(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void access$400(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:void setNote()
com.ichi2.anki.NoteEditor:void setNote()->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote()->com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()
com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.libanki.Models:org.json.JSONObject current()
com.ichi2.libanki.Models:org.json.JSONObject current()->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current()->com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Decks:org.json.JSONObject current()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:java.lang.Long selected()
com.ichi2.libanki.Decks:java.lang.Long selected()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.lang.Long selected()->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Models:void get(java.lang.Long)
com.ichi2.libanki.Models:void get(java.lang.Long)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Models:org.json.JSONObject current(java.lang.Boolean)->com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.libanki.Utils:java.lang.Long timestampID(com.ichi2.libanki.DB,java.lang.String)
com.ichi2.libanki.Utils:java.lang.Long timestampID(com.ichi2.libanki.DB,java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.Long timestampID(com.ichi2.libanki.DB,java.lang.String)->com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)
com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)->com.ichi2.libanki.Utils:java.lang.Double now()
com.ichi2.libanki.Utils:java.lang.Double now()->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.Long timestampID(com.ichi2.libanki.DB,java.lang.String)->com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String)
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String)->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String)->com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:void access$200(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void access$200(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void recyclePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteProgram:[Ljava.lang.String; getColumnNames()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()->io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.String getPath()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void clearOrCreateWindow(java.lang.String)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer cursorPickFillWindowStartPosition(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()
io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.String getSql()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:void getBindArgs()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()
io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:void setStartPosition(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteCursor:void close()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.AbstractCursor:void close()
io.requery.android.database.AbstractCursor:void close()->io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractWindowedCursor:void closeWindow()
io.requery.android.database.AbstractWindowedCursor:void closeWindow()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.CursorWindow:void onAllReferencesReleased()
io.requery.android.database.CursorWindow:void onAllReferencesReleased()->io.requery.android.database.CursorWindow:void dispose()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()
io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()->io.requery.android.database.sqlite.SQLiteProgram:void clearBindings()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:void cursorClosed()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.libanki.Utils:java.lang.String guid64()
com.ichi2.libanki.Utils:java.lang.String guid64()->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.String guid64()->com.ichi2.libanki.Utils:java.lang.String base91(java.lang.Integer)
com.ichi2.libanki.Utils:java.lang.String base91(java.lang.Integer)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.String base91(java.lang.Integer)->com.ichi2.libanki.Utils:java.lang.String base62(java.lang.Integer,java.lang.String)
com.ichi2.libanki.Utils:java.lang.String base62(java.lang.Integer,java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()
com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.libanki.Models:java.util.HashMap fieldMap(org.json.JSONObject)
com.ichi2.libanki.Models:java.util.HashMap fieldMap(org.json.JSONObject)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.libanki.Collection:java.lang.Long getScm()
com.ichi2.libanki.Collection:java.lang.Long getScm()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.anki.NoteEditor:void updateDeckPosition()
com.ichi2.anki.NoteEditor:void updateDeckPosition()->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.anki.NoteEditor:void updateTags()
com.ichi2.anki.NoteEditor:void updateTags()->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void updateTags()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.NoteEditor:void updateTags()->com.ichi2.libanki.Collection:com.ichi2.libanki.Tags getTags()
com.ichi2.libanki.Collection:com.ichi2.libanki.Tags getTags()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void updateTags()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.NoteEditor:void updateTags()->com.ichi2.libanki.Collection:com.ichi2.libanki.Tags getTags()
com.ichi2.libanki.Collection:com.ichi2.libanki.Tags getTags()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void updateTags()->com.ichi2.libanki.Tags:java.util.TreeSet canonify(java.util.ArrayList)
com.ichi2.libanki.Tags:java.util.TreeSet canonify(java.util.ArrayList)->com.ichi2.libanki.Tags:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void updateTags()->com.ichi2.libanki.Tags:java.lang.String join(java.util.TreeSet)
com.ichi2.libanki.Tags:java.lang.String join(java.util.TreeSet)->com.ichi2.libanki.Tags:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.libanki.Note:org.json.JSONObject model()
com.ichi2.libanki.Note:org.json.JSONObject model()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.anki.NoteEditor:void updateCards(org.json.JSONObject)
com.ichi2.anki.NoteEditor:void updateCards(org.json.JSONObject)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void updateCards(org.json.JSONObject)->com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()->com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatHelper getInstance()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatHelper getInstance()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void updateCards(org.json.JSONObject)->com.ichi2.compat.CompatV15:android.text.SpannableStringBuilder fromHtml(java.lang.String)
com.ichi2.compat.CompatV15:android.text.SpannableStringBuilder fromHtml(java.lang.String)->com.ichi2.compat.CompatV15:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void setNote_LZHChange(com.ichi2.libanki.Note)->com.ichi2.anki.NoteEditor:void populateEditFields()
com.ichi2.anki.NoteEditor:void populateEditFields()->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields()->com.ichi2.libanki.Note:[[Ljava.lang.String; items()
com.ichi2.libanki.Note:[[Ljava.lang.String; items()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields()->com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(android.app.ContextImpl)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(android.app.ContextImpl)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.NoteEditor:void initFieldEditText(com.ichi2.anki.FieldEditText,java.lang.Integer,[Ljava.lang.String;,android.graphics.Typeface,java.lang.Boolean)
com.ichi2.anki.NoteEditor:void initFieldEditText(com.ichi2.anki.FieldEditText,java.lang.Integer,[Ljava.lang.String;,android.graphics.Typeface,java.lang.Boolean)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void initFieldEditText(com.ichi2.anki.FieldEditText,java.lang.Integer,[Ljava.lang.String;,android.graphics.Typeface,java.lang.Boolean)->com.ichi2.anki.FieldEditText:void init(java.lang.Integer,java.lang.String,java.lang.String)
com.ichi2.anki.FieldEditText:void init(java.lang.Integer,java.lang.String,java.lang.String)->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.FieldEditText:void init(java.lang.Integer,java.lang.String,java.lang.String)->com.ichi2.anki.FieldEditText:void setDefaultStyle()
com.ichi2.anki.FieldEditText:void setDefaultStyle()->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.FieldEditText:android.widget.TextView getLabel()
com.ichi2.anki.FieldEditText:android.widget.TextView getLabel()->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.UIUtils:java.lang.Float getDensityAdjustedValue(com.ichi2.anki.NoteEditor,java.lang.Float)
com.ichi2.anki.UIUtils:java.lang.Float getDensityAdjustedValue(com.ichi2.anki.NoteEditor,java.lang.Float)->com.ichi2.anki.UIUtils:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.themes.Themes:[I getResFromAttr(com.ichi2.anki.NoteEditor,[I)
com.ichi2.themes.Themes:[I getResFromAttr(com.ichi2.anki.NoteEditor,[I)->com.ichi2.themes.Themes:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.NoteEditor:void setMMButtonListener(androidx.appcompat.widget.AppCompatImageButton,java.lang.Integer)
com.ichi2.anki.NoteEditor:void setMMButtonListener(androidx.appcompat.widget.AppCompatImageButton,java.lang.Integer)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.NoteEditor:void initFieldEditText(com.ichi2.anki.FieldEditText,java.lang.Integer,[Ljava.lang.String;,android.graphics.Typeface,java.lang.Boolean)
com.ichi2.anki.NoteEditor:void initFieldEditText(com.ichi2.anki.FieldEditText,java.lang.Integer,[Ljava.lang.String;,android.graphics.Typeface,java.lang.Boolean)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void initFieldEditText(com.ichi2.anki.FieldEditText,java.lang.Integer,[Ljava.lang.String;,android.graphics.Typeface,java.lang.Boolean)->com.ichi2.anki.FieldEditText:void init(java.lang.Integer,java.lang.String,java.lang.String)
com.ichi2.anki.FieldEditText:void init(java.lang.Integer,java.lang.String,java.lang.String)->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.FieldEditText:void init(java.lang.Integer,java.lang.String,java.lang.String)->com.ichi2.anki.FieldEditText:void setDefaultStyle()
com.ichi2.anki.FieldEditText:void setDefaultStyle()->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.FieldEditText:android.widget.TextView getLabel()
com.ichi2.anki.FieldEditText:android.widget.TextView getLabel()->com.ichi2.anki.FieldEditText:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.UIUtils:java.lang.Float getDensityAdjustedValue(com.ichi2.anki.NoteEditor,java.lang.Float)
com.ichi2.anki.UIUtils:java.lang.Float getDensityAdjustedValue(com.ichi2.anki.NoteEditor,java.lang.Float)->com.ichi2.anki.UIUtils:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.themes.Themes:[I getResFromAttr(com.ichi2.anki.NoteEditor,[I)
com.ichi2.themes.Themes:[I getResFromAttr(com.ichi2.anki.NoteEditor,[I)->com.ichi2.themes.Themes:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void populateEditFields([[Ljava.lang.String;,java.lang.Boolean)->com.ichi2.anki.NoteEditor:void setMMButtonListener(androidx.appcompat.widget.AppCompatImageButton,java.lang.Integer)
com.ichi2.anki.NoteEditor:void setMMButtonListener(androidx.appcompat.widget.AppCompatImageButton,java.lang.Integer)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.NoteEditor:com.ichi2.libanki.Note access$300(com.ichi2.anki.NoteEditor)
com.ichi2.anki.NoteEditor:com.ichi2.libanki.Note access$300(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.libanki.Note:org.json.JSONObject model()
com.ichi2.libanki.Note:org.json.JSONObject model()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.UIUtils:void showThemedToast(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.Boolean)
com.ichi2.anki.UIUtils:void showThemedToast(com.ichi2.anki.NoteEditor,java.lang.String,java.lang.Boolean)->com.ichi2.anki.UIUtils:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.NoteEditor:java.lang.Boolean access$600(com.ichi2.anki.NoteEditor)
com.ichi2.anki.NoteEditor:java.lang.Boolean access$600(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.NoteEditor:java.lang.Integer access$700(com.ichi2.anki.NoteEditor)
com.ichi2.anki.NoteEditor:java.lang.Integer access$700(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.NoteEditor:java.lang.Boolean access$800(com.ichi2.anki.NoteEditor)
com.ichi2.anki.NoteEditor:java.lang.Boolean access$800(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.NoteEditor:java.lang.Integer access$700(com.ichi2.anki.NoteEditor)
com.ichi2.anki.NoteEditor:java.lang.Integer access$700(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.NoteEditor:java.util.LinkedList access$500(com.ichi2.anki.NoteEditor)
com.ichi2.anki.NoteEditor:java.util.LinkedList access$500(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.NoteEditor:java.util.LinkedList access$500(com.ichi2.anki.NoteEditor)
com.ichi2.anki.NoteEditor:java.util.LinkedList access$500(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.NoteEditor:com.afollestad.materialdialogs.MaterialDialog access$000(com.ichi2.anki.NoteEditor)
com.ichi2.anki.NoteEditor:com.afollestad.materialdialogs.MaterialDialog access$000(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.NoteEditor:com.afollestad.materialdialogs.MaterialDialog access$000(com.ichi2.anki.NoteEditor)
com.ichi2.anki.NoteEditor:com.afollestad.materialdialogs.MaterialDialog access$000(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.NoteEditor:com.afollestad.materialdialogs.MaterialDialog access$000(com.ichi2.anki.NoteEditor)
com.ichi2.anki.NoteEditor:com.afollestad.materialdialogs.MaterialDialog access$000(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.afollestad.materialdialogs.MaterialDialog:void dismiss()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.BaseAsyncTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)
com.ichi2.async.BaseAsyncTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.NoteEditor:com.afollestad.materialdialogs.MaterialDialog access$000(com.ichi2.anki.NoteEditor)
com.ichi2.anki.NoteEditor:com.afollestad.materialdialogs.MaterialDialog access$000(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.NoteEditor:com.afollestad.materialdialogs.MaterialDialog access$000(com.ichi2.anki.NoteEditor)
com.ichi2.anki.NoteEditor:com.afollestad.materialdialogs.MaterialDialog access$000(com.ichi2.anki.NoteEditor)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.NoteEditor:java.lang.Boolean access$1102(com.ichi2.anki.NoteEditor,java.lang.Boolean)
com.ichi2.anki.NoteEditor:java.lang.Boolean access$1102(com.ichi2.anki.NoteEditor,java.lang.Boolean)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.NoteEditor:java.lang.Boolean access$1202(com.ichi2.anki.NoteEditor,java.lang.Boolean)
com.ichi2.anki.NoteEditor:java.lang.Boolean access$1202(com.ichi2.anki.NoteEditor,java.lang.Boolean)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->androidx.appcompat.widget.AppCompatImageButton:boolean dispatchTouchEvent(android.view.MotionEvent)
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->androidx.appcompat.widget.AppCompatImageButton:boolean dispatchTouchEvent(android.view.MotionEvent)
com.ichi2.anki.NoteEditor:java.lang.Boolean onOptionsItemSelected(androidx.appcompat.view.menu.ActionMenuItem)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:java.lang.Boolean onOptionsItemSelected(androidx.appcompat.view.menu.ActionMenuItem)->com.ichi2.anki.NoteEditor:void closeCardEditorWithCheck()
com.ichi2.anki.NoteEditor:void closeCardEditorWithCheck()->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void closeCardEditorWithCheck()->com.ichi2.anki.NoteEditor:java.lang.Boolean hasUnsavedChanges()
com.ichi2.anki.NoteEditor:java.lang.Boolean hasUnsavedChanges()->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void closeCardEditorWithCheck()->com.ichi2.anki.NoteEditor:void closeNoteEditor()
com.ichi2.anki.NoteEditor:void closeNoteEditor()->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void closeNoteEditor()->com.ichi2.anki.NoteEditor:void closeNoteEditor(android.content.Intent)
com.ichi2.anki.NoteEditor:void closeNoteEditor(android.content.Intent)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void closeNoteEditor(android.content.Intent)->com.ichi2.anki.NoteEditor:void closeNoteEditor(java.lang.Integer,android.content.Intent)
com.ichi2.anki.NoteEditor:void closeNoteEditor(java.lang.Integer,android.content.Intent)->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void closeNoteEditor(java.lang.Integer,android.content.Intent)->com.ichi2.anki.AnkiActivity:void finishWithAnimation(java.lang.Integer)
com.ichi2.anki.AnkiActivity:void finishWithAnimation(java.lang.Integer)->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void finishWithAnimation(java.lang.Integer)->com.ichi2.anki.AnkiActivity:void enableActivityAnimation(java.lang.Integer)
com.ichi2.anki.AnkiActivity:void enableActivityAnimation(java.lang.Integer)->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void enableActivityAnimation(java.lang.Integer)->com.ichi2.anki.AnkiActivity:java.lang.Boolean animationDisabled()
com.ichi2.anki.AnkiActivity:java.lang.Boolean animationDisabled()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:java.lang.Boolean animationDisabled()->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.NoteEditor)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.NoteEditor)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void enableActivityAnimation(java.lang.Integer)->com.ichi2.anim.ActivityTransitionAnimation:void slide(com.ichi2.anki.NoteEditor,java.lang.Integer)
com.ichi2.anim.ActivityTransitionAnimation:void slide(com.ichi2.anki.NoteEditor,java.lang.Integer)->com.ichi2.anim.ActivityTransitionAnimation:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onActivityResult(java.lang.Integer,java.lang.Integer,android.content.Intent)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onActivityResult(java.lang.Integer,java.lang.Integer,android.content.Intent)->com.ichi2.anki.NavigationDrawerActivity:void onActivityResult(java.lang.Integer,java.lang.Integer,android.content.Intent)
com.ichi2.anki.NavigationDrawerActivity:void onActivityResult(java.lang.Integer,java.lang.Integer,android.content.Intent)->com.ichi2.anki.NavigationDrawerActivity:[Z $jacocoInit()
com.ichi2.anki.NavigationDrawerActivity:void onActivityResult(java.lang.Integer,java.lang.Integer,android.content.Intent)->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.NavigationDrawerActivity:void onActivityResult(java.lang.Integer,java.lang.Integer,android.content.Intent)->com.ichi2.anki.AnkiDroidApp:void setLanguage(java.lang.String)
com.ichi2.anki.AnkiDroidApp:void setLanguage(java.lang.String)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.AnkiDroidApp:void setLanguage(java.lang.String)->com.ichi2.anki.AnkiDroidApp:com.ichi2.anki.AnkiDroidApp getInstance()
com.ichi2.anki.AnkiDroidApp:com.ichi2.anki.AnkiDroidApp getInstance()->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.AnkiDroidApp:void setLanguage(java.lang.String)->com.ichi2.utils.LanguageUtil:java.util.Locale getLocale(java.lang.String)
com.ichi2.utils.LanguageUtil:java.util.Locale getLocale(java.lang.String)->com.ichi2.utils.LanguageUtil:[Z $jacocoInit()
com.ichi2.utils.LanguageUtil:java.util.Locale getLocale(java.lang.String)->com.ichi2.anki.AnkiDroidApp:com.ichi2.anki.AnkiDroidApp getInstance()
com.ichi2.anki.AnkiDroidApp:com.ichi2.anki.AnkiDroidApp getInstance()->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.utils.LanguageUtil:java.util.Locale getLocale(java.lang.String)->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(android.app.ContextImpl)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(android.app.ContextImpl)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.AnkiDroidApp:void setLanguage(java.lang.String)->com.ichi2.anki.AnkiDroidApp:com.ichi2.anki.AnkiDroidApp getInstance()
com.ichi2.anki.AnkiDroidApp:com.ichi2.anki.AnkiDroidApp getInstance()->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.AnkiDroidApp:void setLanguage(java.lang.String)->com.ichi2.anki.AnkiDroidApp:com.ichi2.anki.AnkiDroidApp getInstance()
com.ichi2.anki.AnkiDroidApp:com.ichi2.anki.AnkiDroidApp getInstance()->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.NavigationDrawerActivity:void onActivityResult(java.lang.Integer,java.lang.Integer,android.content.Intent)->com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()->com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatHelper getInstance()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatHelper getInstance()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.anki.NavigationDrawerActivity:void onActivityResult(java.lang.Integer,java.lang.Integer,android.content.Intent)->com.ichi2.compat.CompatV15:void setupNotificationChannel(com.ichi2.anki.AnkiDroidApp,java.lang.String,java.lang.String)
com.ichi2.compat.CompatV15:void setupNotificationChannel(com.ichi2.anki.AnkiDroidApp,java.lang.String,java.lang.String)->com.ichi2.compat.CompatV15:[Z $jacocoInit()
com.ichi2.anki.NavigationDrawerActivity:void onActivityResult(java.lang.Integer,java.lang.Integer,android.content.Intent)->com.ichi2.compat.CompatV15:void setupNotificationChannel(com.ichi2.anki.AnkiDroidApp,java.lang.String,java.lang.String)
com.ichi2.compat.CompatV15:void setupNotificationChannel(com.ichi2.anki.AnkiDroidApp,java.lang.String,java.lang.String)->com.ichi2.compat.CompatV15:[Z $jacocoInit()
com.ichi2.anki.NavigationDrawerActivity:void onActivityResult(java.lang.Integer,java.lang.Integer,android.content.Intent)->com.ichi2.compat.CompatV15:void setupNotificationChannel(com.ichi2.anki.AnkiDroidApp,java.lang.String,java.lang.String)
com.ichi2.compat.CompatV15:void setupNotificationChannel(com.ichi2.anki.AnkiDroidApp,java.lang.String,java.lang.String)->com.ichi2.compat.CompatV15:[Z $jacocoInit()
com.ichi2.anki.NavigationDrawerActivity:void onActivityResult(java.lang.Integer,java.lang.Integer,android.content.Intent)->com.ichi2.compat.CompatV15:void setupNotificationChannel(com.ichi2.anki.AnkiDroidApp,java.lang.String,java.lang.String)
com.ichi2.compat.CompatV15:void setupNotificationChannel(com.ichi2.anki.AnkiDroidApp,java.lang.String,java.lang.String)->com.ichi2.compat.CompatV15:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void onStart()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void onStart()->com.ichi2.compat.customtabs.CustomTabActivityHelper:void bindCustomTabsService(com.ichi2.anki.DeckPicker)
com.ichi2.compat.customtabs.CustomTabActivityHelper:void bindCustomTabsService(com.ichi2.anki.DeckPicker)->com.ichi2.compat.customtabs.CustomTabActivityHelper:[Z $jacocoInit()
com.ichi2.compat.customtabs.CustomTabActivityHelper:void bindCustomTabsService(com.ichi2.anki.DeckPicker)->com.ichi2.compat.customtabs.CustomTabsHelper:void getPackageNameToUse(com.ichi2.anki.DeckPicker)
com.ichi2.compat.customtabs.CustomTabsHelper:void getPackageNameToUse(com.ichi2.anki.DeckPicker)->com.ichi2.compat.customtabs.CustomTabsHelper:[Z $jacocoInit()
com.ichi2.compat.customtabs.CustomTabsHelper:void getPackageNameToUse(com.ichi2.anki.DeckPicker)->com.ichi2.compat.CompatHelper:java.lang.Integer getSdkVersion()
com.ichi2.compat.CompatHelper:java.lang.Integer getSdkVersion()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onResume()->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onResume()->com.ichi2.anki.AnkiActivity:void onResume()
com.ichi2.anki.AnkiActivity:void onResume()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void onResume()->com.ichi2.anki.dialogs.DialogHandler:void readMessage()
com.ichi2.anki.dialogs.DialogHandler:void readMessage()->com.ichi2.anki.dialogs.DialogHandler:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onResume()->com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.DeckPicker:void onResume()->com.ichi2.anki.NavigationDrawerActivity:void selectNavigationItem(java.lang.Integer)
com.ichi2.anki.NavigationDrawerActivity:void selectNavigationItem(java.lang.Integer)->com.ichi2.anki.NavigationDrawerActivity:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onResume()->com.ichi2.anki.DeckPicker:void updateDeckList()
com.ichi2.anki.DeckPicker:void updateDeckList()->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void updateDeckList()->com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.DeckPicker$13,[Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.DeckPicker$13,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.DeckPicker$13,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.DeckPicker$13,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.DeckPicker$13,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.DeckPicker$13,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onPreExecute()
com.ichi2.async.DeckTask:void onPreExecute()->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPreExecute()->com.ichi2.async.BaseAsyncTask:void onPreExecute()
com.ichi2.async.BaseAsyncTask:void onPreExecute()->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onPreExecute()->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPreExecute()->com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.DeckPicker:void onResume()->com.ichi2.anki.NavigationDrawerActivity:void setTitle(java.lang.String)
com.ichi2.anki.NavigationDrawerActivity:void setTitle(java.lang.String)->com.ichi2.anki.NavigationDrawerActivity:[Z $jacocoInit()
com.ichi2.anki.widgets.FabBehavior:java.lang.Boolean layoutDependsOn(androidx.coordinatorlayout.widget.CoordinatorLayout,com.getbase.floatingactionbutton.FloatingActionsMenu,android.widget.RelativeLayout)->com.ichi2.anki.widgets.FabBehavior:[Z $jacocoInit()
com.ichi2.anki.widgets.FabBehavior:java.lang.Boolean layoutDependsOn(androidx.coordinatorlayout.widget.CoordinatorLayout,com.getbase.floatingactionbutton.FloatingActionsMenu,android.widget.RelativeLayout)->com.ichi2.anki.widgets.FabBehavior:java.lang.Boolean layoutDependsOn(androidx.coordinatorlayout.widget.CoordinatorLayout,com.getbase.floatingactionbutton.FloatingActionsMenu,android.widget.RelativeLayout)
com.ichi2.anki.widgets.FabBehavior:java.lang.Boolean layoutDependsOn(androidx.coordinatorlayout.widget.CoordinatorLayout,com.getbase.floatingactionbutton.FloatingActionsMenu,android.widget.RelativeLayout)->com.ichi2.anki.widgets.FabBehavior:[Z $jacocoInit()
com.ichi2.anki.widgets.FabBehavior:java.lang.Boolean layoutDependsOn(androidx.coordinatorlayout.widget.CoordinatorLayout,com.getbase.floatingactionbutton.FloatingActionsMenu,android.widget.ProgressBar)->com.ichi2.anki.widgets.FabBehavior:[Z $jacocoInit()
com.ichi2.anki.widgets.FabBehavior:java.lang.Boolean layoutDependsOn(androidx.coordinatorlayout.widget.CoordinatorLayout,com.getbase.floatingactionbutton.FloatingActionsMenu,android.widget.ProgressBar)->com.ichi2.anki.widgets.FabBehavior:java.lang.Boolean layoutDependsOn(androidx.coordinatorlayout.widget.CoordinatorLayout,com.getbase.floatingactionbutton.FloatingActionsMenu,android.widget.ProgressBar)
com.ichi2.anki.widgets.FabBehavior:java.lang.Boolean layoutDependsOn(androidx.coordinatorlayout.widget.CoordinatorLayout,com.getbase.floatingactionbutton.FloatingActionsMenu,android.widget.ProgressBar)->com.ichi2.anki.widgets.FabBehavior:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.BaseAsyncTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)
com.ichi2.async.BaseAsyncTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.AnkiActivity:void hideProgressBar()
com.ichi2.anki.AnkiActivity:void hideProgressBar()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.DeckPicker:com.ichi2.anki.widgets.DeckAdapter access$200(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:com.ichi2.anki.widgets.DeckAdapter access$200(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.widgets.DeckAdapter:void buildDeckList(java.util.ArrayList,com.ichi2.libanki.Collection)
com.ichi2.anki.widgets.DeckAdapter:void buildDeckList(java.util.ArrayList,com.ichi2.libanki.Collection)->com.ichi2.anki.widgets.DeckAdapter:[Z $jacocoInit()
com.ichi2.anki.widgets.DeckAdapter:void buildDeckList(java.util.ArrayList,com.ichi2.libanki.Collection)->com.ichi2.anki.widgets.DeckAdapter:void processNodes(java.util.ArrayList)
com.ichi2.anki.widgets.DeckAdapter:void processNodes(java.util.ArrayList)->com.ichi2.anki.widgets.DeckAdapter:[Z $jacocoInit()
com.ichi2.anki.widgets.DeckAdapter:void processNodes(java.util.ArrayList)->com.ichi2.anki.widgets.DeckAdapter:void processNodes(java.util.ArrayList,java.lang.Integer)
com.ichi2.anki.widgets.DeckAdapter:void processNodes(java.util.ArrayList,java.lang.Integer)->com.ichi2.anki.widgets.DeckAdapter:[Z $jacocoInit()
com.ichi2.anki.widgets.DeckAdapter:void processNodes(java.util.ArrayList,java.lang.Integer)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.widgets.DeckAdapter:void processNodes(java.util.ArrayList,java.lang.Integer)->com.ichi2.libanki.Decks:java.util.ArrayList parents(java.lang.Long)
com.ichi2.libanki.Decks:java.util.ArrayList parents(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.util.ArrayList parents(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.widgets.DeckAdapter:void processNodes(java.util.ArrayList,java.lang.Integer)->com.ichi2.anki.widgets.DeckAdapter:void processNodes(java.util.ArrayList,java.lang.Integer)
com.ichi2.anki.widgets.DeckAdapter:void processNodes(java.util.ArrayList,java.lang.Integer)->com.ichi2.anki.widgets.DeckAdapter:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.DeckPicker:com.ichi2.anki.widgets.DeckAdapter access$200(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:com.ichi2.anki.widgets.DeckAdapter access$200(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.widgets.DeckAdapter:java.lang.Integer getEta()
com.ichi2.anki.widgets.DeckAdapter:java.lang.Integer getEta()->com.ichi2.anki.widgets.DeckAdapter:[Z $jacocoInit()
com.ichi2.anki.widgets.DeckAdapter:java.lang.Integer getEta()->com.ichi2.libanki.Collection:com.ichi2.libanki.Sched getSched()
com.ichi2.libanki.Collection:com.ichi2.libanki.Sched getSched()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.widgets.DeckAdapter:java.lang.Integer getEta()->com.ichi2.libanki.Sched:java.lang.Integer eta([I)
com.ichi2.libanki.Sched:java.lang.Integer eta([I)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer eta([I)->com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)
com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)->com.ichi2.libanki.Collection:com.ichi2.libanki.Sched getSched()
com.ichi2.libanki.Collection:com.ichi2.libanki.Sched getSched()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)->com.ichi2.libanki.Sched:java.lang.Long getDayCutoff()
com.ichi2.libanki.Sched:java.lang.Long getDayCutoff()->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteProgram:[Ljava.lang.String; getColumnNames()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToFirst()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToFirst()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()->io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.String getPath()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void clearOrCreateWindow(java.lang.String)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer cursorPickFillWindowStartPosition(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()
io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.String getSql()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:void getBindArgs()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()
io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:void setStartPosition(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)->io.requery.android.database.AbstractWindowedCursor:java.lang.Double getDouble(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Double getDouble(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Double getDouble(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Double getDouble(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)->io.requery.android.database.AbstractWindowedCursor:java.lang.Double getDouble(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Double getDouble(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Double getDouble(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Double getDouble(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)->io.requery.android.database.AbstractCursor:java.lang.Boolean isClosed()
com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteCursor:void close()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.AbstractCursor:void close()
io.requery.android.database.AbstractCursor:void close()->io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractWindowedCursor:void closeWindow()
io.requery.android.database.AbstractWindowedCursor:void closeWindow()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.CursorWindow:void onAllReferencesReleased()
io.requery.android.database.CursorWindow:void onAllReferencesReleased()->io.requery.android.database.CursorWindow:void dispose()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()
io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()->io.requery.android.database.sqlite.SQLiteProgram:void clearBindings()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:void cursorClosed()
com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)->com.ichi2.libanki.Collection:com.ichi2.libanki.Sched getSched()
com.ichi2.libanki.Collection:com.ichi2.libanki.Sched getSched()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)->com.ichi2.libanki.Sched:java.lang.Long getDayCutoff()
com.ichi2.libanki.Sched:java.lang.Long getDayCutoff()->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteProgram:[Ljava.lang.String; getColumnNames()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToFirst()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToFirst()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()->io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.String getPath()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void clearOrCreateWindow(java.lang.String)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer cursorPickFillWindowStartPosition(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()
io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.String getSql()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:void getBindArgs()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()
io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:void setStartPosition(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)->io.requery.android.database.AbstractWindowedCursor:java.lang.Double getDouble(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Double getDouble(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Double getDouble(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Double getDouble(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)->io.requery.android.database.AbstractWindowedCursor:java.lang.Double getDouble(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Double getDouble(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Double getDouble(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Double getDouble(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)->io.requery.android.database.AbstractCursor:java.lang.Boolean isClosed()
com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteCursor:void close()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.AbstractCursor:void close()
io.requery.android.database.AbstractCursor:void close()->io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractWindowedCursor:void closeWindow()
io.requery.android.database.AbstractWindowedCursor:void closeWindow()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.CursorWindow:void onAllReferencesReleased()
io.requery.android.database.CursorWindow:void onAllReferencesReleased()->io.requery.android.database.CursorWindow:void dispose()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()
io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()->io.requery.android.database.sqlite.SQLiteProgram:void clearBindings()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:void cursorClosed()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.DeckPicker:com.ichi2.anki.widgets.DeckAdapter access$200(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:com.ichi2.anki.widgets.DeckAdapter access$200(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.widgets.DeckAdapter:java.lang.Integer getDue()
com.ichi2.anki.widgets.DeckAdapter:java.lang.Integer getDue()->com.ichi2.anki.widgets.DeckAdapter:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.libanki.Collection:java.lang.Integer cardCount()
com.ichi2.libanki.Collection:java.lang.Integer cardCount()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Collection:java.lang.Integer cardCount()->com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String)
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String)->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String)->com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteProgram:[Ljava.lang.String; getColumnNames()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()->io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.String getPath()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void clearOrCreateWindow(java.lang.String)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer cursorPickFillWindowStartPosition(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()
io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.String getSql()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:void getBindArgs()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()
io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:void setStartPosition(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteCursor:void close()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.AbstractCursor:void close()
io.requery.android.database.AbstractCursor:void close()->io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractWindowedCursor:void closeWindow()
io.requery.android.database.AbstractWindowedCursor:void closeWindow()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.CursorWindow:void onAllReferencesReleased()
io.requery.android.database.CursorWindow:void onAllReferencesReleased()->io.requery.android.database.CursorWindow:void dispose()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()
io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()->io.requery.android.database.sqlite.SQLiteProgram:void clearBindings()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:void cursorClosed()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.libanki.Decks:org.json.JSONObject current()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:java.lang.Long selected()
com.ichi2.libanki.Decks:java.lang.Long selected()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.lang.Long selected()->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.DeckPicker:java.lang.Long access$1400(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:java.lang.Long access$1400(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.DeckPicker:androidx.appcompat.widget.AppCompatTextView access$1600(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:androidx.appcompat.widget.AppCompatTextView access$1600(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.stats.AnkiStatsTaskHandler:com.ichi2.anki.stats.AnkiStatsTaskHandler$DeckPreviewStatistics createReviewSummaryStatistics(com.ichi2.libanki.Collection,androidx.appcompat.widget.AppCompatTextView)
com.ichi2.anki.stats.AnkiStatsTaskHandler:com.ichi2.anki.stats.AnkiStatsTaskHandler$DeckPreviewStatistics createReviewSummaryStatistics(com.ichi2.libanki.Collection,androidx.appcompat.widget.AppCompatTextView)->com.ichi2.anki.stats.AnkiStatsTaskHandler:[Z $jacocoInit()
com.ichi2.anki.widgets.FabBehavior:java.lang.Boolean layoutDependsOn(androidx.coordinatorlayout.widget.CoordinatorLayout,com.getbase.floatingactionbutton.FloatingActionsMenu,android.widget.RelativeLayout)->com.ichi2.anki.widgets.FabBehavior:[Z $jacocoInit()
com.ichi2.anki.widgets.FabBehavior:java.lang.Boolean layoutDependsOn(androidx.coordinatorlayout.widget.CoordinatorLayout,com.getbase.floatingactionbutton.FloatingActionsMenu,android.widget.RelativeLayout)->com.ichi2.anki.widgets.FabBehavior:java.lang.Boolean layoutDependsOn(androidx.coordinatorlayout.widget.CoordinatorLayout,com.getbase.floatingactionbutton.FloatingActionsMenu,android.widget.RelativeLayout)
com.ichi2.anki.widgets.FabBehavior:java.lang.Boolean layoutDependsOn(androidx.coordinatorlayout.widget.CoordinatorLayout,com.getbase.floatingactionbutton.FloatingActionsMenu,android.widget.RelativeLayout)->com.ichi2.anki.widgets.FabBehavior:[Z $jacocoInit()
com.ichi2.anki.widgets.FabBehavior:java.lang.Boolean layoutDependsOn(androidx.coordinatorlayout.widget.CoordinatorLayout,com.getbase.floatingactionbutton.FloatingActionsMenu,android.widget.ProgressBar)->com.ichi2.anki.widgets.FabBehavior:[Z $jacocoInit()
com.ichi2.anki.widgets.FabBehavior:java.lang.Boolean layoutDependsOn(androidx.coordinatorlayout.widget.CoordinatorLayout,com.getbase.floatingactionbutton.FloatingActionsMenu,android.widget.ProgressBar)->com.ichi2.anki.widgets.FabBehavior:java.lang.Boolean layoutDependsOn(androidx.coordinatorlayout.widget.CoordinatorLayout,com.getbase.floatingactionbutton.FloatingActionsMenu,android.widget.ProgressBar)
com.ichi2.anki.widgets.FabBehavior:java.lang.Boolean layoutDependsOn(androidx.coordinatorlayout.widget.CoordinatorLayout,com.getbase.floatingactionbutton.FloatingActionsMenu,android.widget.ProgressBar)->com.ichi2.anki.widgets.FabBehavior:[Z $jacocoInit()
com.ichi2.anki.widgets.DeckAdapter:java.lang.Integer getItemCount()->com.ichi2.anki.widgets.DeckAdapter:[Z $jacocoInit()
com.ichi2.anki.widgets.DeckAdapter:java.lang.Integer getItemCount()->com.ichi2.anki.widgets.DeckAdapter:[Z $jacocoInit()
com.ichi2.anki.widgets.DeckAdapter:java.lang.Integer getItemCount()->com.ichi2.anki.widgets.DeckAdapter:[Z $jacocoInit()
com.ichi2.anki.widgets.DeckAdapter:void onBindViewHolder(com.ichi2.anki.widgets.DeckAdapter$ViewHolder,java.lang.Integer)->com.ichi2.anki.widgets.DeckAdapter:[Z $jacocoInit()
com.ichi2.anki.widgets.DeckAdapter:void onBindViewHolder(com.ichi2.anki.widgets.DeckAdapter$ViewHolder,java.lang.Integer)->com.ichi2.anki.widgets.DeckAdapter:void onBindViewHolder(com.ichi2.anki.widgets.DeckAdapter$ViewHolder,java.lang.Integer)
com.ichi2.anki.widgets.DeckAdapter:void onBindViewHolder(com.ichi2.anki.widgets.DeckAdapter$ViewHolder,java.lang.Integer)->com.ichi2.anki.widgets.DeckAdapter:[Z $jacocoInit()
com.ichi2.anki.widgets.DeckAdapter:void onBindViewHolder(com.ichi2.anki.widgets.DeckAdapter$ViewHolder,java.lang.Integer)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.widgets.DeckAdapter:void onBindViewHolder(com.ichi2.anki.widgets.DeckAdapter$ViewHolder,java.lang.Integer)->com.ichi2.libanki.Decks:org.json.JSONObject current()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:java.lang.Long selected()
com.ichi2.libanki.Decks:java.lang.Long selected()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.lang.Long selected()->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.widgets.DeckAdapter:void onBindViewHolder(com.ichi2.anki.widgets.DeckAdapter$ViewHolder,java.lang.Integer)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.widgets.DeckAdapter:void onBindViewHolder(com.ichi2.anki.widgets.DeckAdapter$ViewHolder,java.lang.Integer)->com.ichi2.libanki.Decks:java.lang.Boolean isDyn(java.lang.Long)
com.ichi2.libanki.Decks:java.lang.Boolean isDyn(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.lang.Boolean isDyn(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void onStop()->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void onStop()->com.ichi2.anki.AnkiActivity:void onStop()
com.ichi2.anki.AnkiActivity:void onStop()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void onStop()->com.ichi2.compat.customtabs.CustomTabActivityHelper:void unbindCustomTabsService(com.ichi2.anki.NoteEditor)
com.ichi2.compat.customtabs.CustomTabActivityHelper:void unbindCustomTabsService(com.ichi2.anki.NoteEditor)->com.ichi2.compat.customtabs.CustomTabActivityHelper:[Z $jacocoInit()
com.ichi2.anki.NoteEditor:void onDestroy()->com.ichi2.anki.NoteEditor:[Z $jacocoInit()
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->androidx.appcompat.widget.ActionMenuPresenter$OverflowMenuButton:boolean dispatchTouchEvent(android.view.MotionEvent)
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->androidx.appcompat.widget.ActionMenuPresenter$OverflowMenuButton:boolean dispatchTouchEvent(android.view.MotionEvent)
com.ichi2.anki.DeckPicker:java.lang.Boolean onPrepareOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:java.lang.Boolean onPrepareOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:java.lang.Boolean onPrepareOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getColSafe(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getColSafe(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getColSafe(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.DeckPicker:java.lang.Boolean onPrepareOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.DeckPicker:java.lang.Boolean onPrepareOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.libanki.Collection:java.lang.Boolean undoAvailable()
com.ichi2.libanki.Collection:java.lang.Boolean undoAvailable()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:java.lang.Boolean onOptionsItemSelected(androidx.appcompat.view.menu.MenuItemImpl)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:java.lang.Boolean onOptionsItemSelected(androidx.appcompat.view.menu.MenuItemImpl)->com.ichi2.anki.NavigationDrawerActivity:com.ichi2.anki.NavigationDrawerActivity$1 getDrawerToggle()
com.ichi2.anki.NavigationDrawerActivity:com.ichi2.anki.NavigationDrawerActivity$1 getDrawerToggle()->com.ichi2.anki.NavigationDrawerActivity:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:java.lang.Boolean onOptionsItemSelected(androidx.appcompat.view.menu.MenuItemImpl)->com.ichi2.anki.DeckPicker:void showDatabaseErrorDialog(java.lang.Integer)
com.ichi2.anki.DeckPicker:void showDatabaseErrorDialog(java.lang.Integer)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void showDatabaseErrorDialog(java.lang.Integer)->com.ichi2.anki.dialogs.DatabaseErrorDialog:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void showDatabaseErrorDialog(java.lang.Integer)->com.ichi2.anki.dialogs.DatabaseErrorDialog:com.ichi2.anki.dialogs.DatabaseErrorDialog newInstance(java.lang.Integer)
com.ichi2.anki.dialogs.DatabaseErrorDialog:com.ichi2.anki.dialogs.DatabaseErrorDialog newInstance(java.lang.Integer)->com.ichi2.anki.dialogs.DatabaseErrorDialog:[Z $jacocoInit()
com.ichi2.anki.dialogs.DatabaseErrorDialog:com.ichi2.anki.dialogs.DatabaseErrorDialog newInstance(java.lang.Integer)->com.ichi2.anki.dialogs.DatabaseErrorDialog:[Z $jacocoInit()
com.ichi2.anki.dialogs.DatabaseErrorDialog:com.ichi2.anki.dialogs.DatabaseErrorDialog newInstance(java.lang.Integer)->com.ichi2.anki.dialogs.AsyncDialogFragment:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void showDatabaseErrorDialog(java.lang.Integer)->com.ichi2.anki.AnkiActivity:void showAsyncDialogFragment(com.ichi2.anki.dialogs.DatabaseErrorDialog)
com.ichi2.anki.AnkiActivity:void showAsyncDialogFragment(com.ichi2.anki.dialogs.DatabaseErrorDialog)->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void showAsyncDialogFragment(com.ichi2.anki.dialogs.DatabaseErrorDialog)->com.ichi2.anki.AnkiActivity:void showAsyncDialogFragment(com.ichi2.anki.dialogs.DatabaseErrorDialog,com.ichi2.anki.NotificationChannels$Channel)
com.ichi2.anki.AnkiActivity:void showAsyncDialogFragment(com.ichi2.anki.dialogs.DatabaseErrorDialog,com.ichi2.anki.NotificationChannels$Channel)->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void showAsyncDialogFragment(com.ichi2.anki.dialogs.DatabaseErrorDialog,com.ichi2.anki.NotificationChannels$Channel)->com.ichi2.anki.AnkiActivity:void showDialogFragment(com.ichi2.anki.dialogs.DatabaseErrorDialog)
com.ichi2.anki.AnkiActivity:void showDialogFragment(com.ichi2.anki.dialogs.DatabaseErrorDialog)->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void showDialogFragment(com.ichi2.anki.dialogs.DatabaseErrorDialog)->com.ichi2.anki.dialogs.DatabaseErrorDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)
com.ichi2.anki.dialogs.DatabaseErrorDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.ichi2.anki.dialogs.DatabaseErrorDialog:[Z $jacocoInit()
com.ichi2.anki.dialogs.DatabaseErrorDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.ichi2.anki.dialogs.DatabaseErrorDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)
com.ichi2.anki.dialogs.DatabaseErrorDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.ichi2.anki.dialogs.DatabaseErrorDialog:[Z $jacocoInit()
com.ichi2.anki.dialogs.DatabaseErrorDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer getColor(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.ichi2.anki.dialogs.DatabaseErrorDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.ichi2.anki.dialogs.DatabaseErrorDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.ichi2.anki.dialogs.DatabaseErrorDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer adjustAlpha(java.lang.Integer,java.lang.Float)
com.ichi2.anki.dialogs.DatabaseErrorDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer adjustAlpha(java.lang.Integer,java.lang.Float)
com.ichi2.anki.dialogs.DatabaseErrorDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer adjustAlpha(java.lang.Integer,java.lang.Float)
com.ichi2.anki.dialogs.DatabaseErrorDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.ichi2.anki.dialogs.DatabaseErrorDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer adjustAlpha(java.lang.Integer,java.lang.Float)
com.ichi2.anki.dialogs.DatabaseErrorDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.ichi2.anki.dialogs.DatabaseErrorDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.ichi2.anki.dialogs.DatabaseErrorDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.ichi2.anki.dialogs.DatabaseErrorDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.ichi2.anki.dialogs.DatabaseErrorDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Boolean isColorDark(java.lang.Integer)
com.ichi2.anki.dialogs.DatabaseErrorDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.internal.ThemeSingleton:void get(java.lang.Boolean)
com.ichi2.anki.dialogs.DatabaseErrorDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.DeckPicker,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.DeckPicker,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer gravityEnumToAttrInt(com.afollestad.materialdialogs.GravityEnum)
com.ichi2.anki.dialogs.DatabaseErrorDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.DeckPicker,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.DeckPicker,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer gravityEnumToAttrInt(com.afollestad.materialdialogs.GravityEnum)
com.ichi2.anki.dialogs.DatabaseErrorDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.DeckPicker,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.DeckPicker,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer gravityEnumToAttrInt(com.afollestad.materialdialogs.GravityEnum)
com.ichi2.anki.dialogs.DatabaseErrorDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.DeckPicker,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.DeckPicker,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer gravityEnumToAttrInt(com.afollestad.materialdialogs.GravityEnum)
com.ichi2.anki.dialogs.DatabaseErrorDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.DeckPicker,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.DeckPicker,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer gravityEnumToAttrInt(com.afollestad.materialdialogs.GravityEnum)
com.ichi2.anki.dialogs.DatabaseErrorDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.util.DialogUtils:void resolveString(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.ichi2.anki.dialogs.DatabaseErrorDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.util.DialogUtils:void resolveString(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.ichi2.anki.dialogs.DatabaseErrorDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.ichi2.anki.dialogs.DatabaseErrorDialog:java.lang.String getTitle()
com.ichi2.anki.dialogs.DatabaseErrorDialog:java.lang.String getTitle()->com.ichi2.anki.dialogs.DatabaseErrorDialog:[Z $jacocoInit()
com.ichi2.anki.dialogs.DatabaseErrorDialog:java.lang.String getTitle()->com.ichi2.anki.dialogs.AsyncDialogFragment:android.content.res.XResources res()
com.ichi2.anki.dialogs.AsyncDialogFragment:android.content.res.XResources res()->com.ichi2.anki.dialogs.AsyncDialogFragment:[Z $jacocoInit()
com.ichi2.anki.dialogs.AsyncDialogFragment:android.content.res.XResources res()->com.ichi2.anki.AnkiDroidApp:android.content.res.XResources getAppResources()
com.ichi2.anki.AnkiDroidApp:android.content.res.XResources getAppResources()->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.dialogs.DatabaseErrorDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.ichi2.anki.dialogs.DatabaseErrorDialog:java.lang.String getMessage()
com.ichi2.anki.dialogs.DatabaseErrorDialog:java.lang.String getMessage()->com.ichi2.anki.dialogs.DatabaseErrorDialog:[Z $jacocoInit()
com.ichi2.anki.dialogs.DatabaseErrorDialog:java.lang.String getMessage()->com.ichi2.anki.dialogs.AsyncDialogFragment:android.content.res.XResources res()
com.ichi2.anki.dialogs.AsyncDialogFragment:android.content.res.XResources res()->com.ichi2.anki.dialogs.AsyncDialogFragment:[Z $jacocoInit()
com.ichi2.anki.dialogs.AsyncDialogFragment:android.content.res.XResources res()->com.ichi2.anki.AnkiDroidApp:android.content.res.XResources getAppResources()
com.ichi2.anki.AnkiDroidApp:android.content.res.XResources getAppResources()->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.dialogs.DatabaseErrorDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.DialogInit:java.lang.Integer getTheme(com.afollestad.materialdialogs.MaterialDialog$Builder)
com.afollestad.materialdialogs.DialogInit:java.lang.Integer getTheme(com.afollestad.materialdialogs.MaterialDialog$Builder)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Boolean resolveBoolean(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Boolean)
com.ichi2.anki.dialogs.DatabaseErrorDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.DialogInit:java.lang.Integer getInflateLayout(com.afollestad.materialdialogs.MaterialDialog$Builder)
com.ichi2.anki.dialogs.DatabaseErrorDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.internal.MDRootLayout:void init(com.ichi2.anki.DeckPicker,android.content.res.XmlBlock$Parser,java.lang.Integer)
com.afollestad.materialdialogs.internal.MDRootLayout:void init(com.ichi2.anki.DeckPicker,android.content.res.XmlBlock$Parser,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.ichi2.anki.dialogs.DatabaseErrorDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.internal.MDButton:void init(com.ichi2.anki.DeckPicker)
com.ichi2.anki.dialogs.DatabaseErrorDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.internal.MDButton:void init(com.ichi2.anki.DeckPicker)
com.ichi2.anki.dialogs.DatabaseErrorDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.internal.MDButton:void init(com.ichi2.anki.DeckPicker)
com.ichi2.anki.dialogs.DatabaseErrorDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.internal.MDRootLayout:void onFinishInflate()
com.ichi2.anki.dialogs.DatabaseErrorDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList resolveActionTextColorStateList(com.ichi2.anki.DeckPicker,java.lang.Integer,android.content.res.ColorStateList)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList resolveActionTextColorStateList(com.ichi2.anki.DeckPicker,java.lang.Integer,android.content.res.ColorStateList)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList resolveActionTextColorStateList(com.ichi2.anki.DeckPicker,java.lang.Integer,android.content.res.ColorStateList)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveDimension(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveDimension(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveDimension(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Boolean resolveBoolean(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Boolean resolveBoolean(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Boolean resolveBoolean(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Boolean)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDRootLayout:void setDividerColor(java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:void setTypeface(androidx.appcompat.widget.AppCompatTextView,android.graphics.Typeface)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:void setTypeface(androidx.appcompat.widget.AppCompatTextView,android.graphics.Typeface)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDRootLayout:void setButtonGravity(com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.internal.MDRootLayout:void setButtonGravity(com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.internal.MDRootLayout:void invertGravityIfNecessary()
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDRootLayout:void setButtonStackedGravity(com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.internal.MDRootLayout:void setButtonStackedGravity(com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.internal.MDButton:void setStackedGravity(com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.internal.MDRootLayout:void setButtonStackedGravity(com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.internal.MDButton:void setStackedGravity(com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.internal.MDRootLayout:void setButtonStackedGravity(com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.internal.MDButton:void setStackedGravity(com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDRootLayout:void setStackingBehavior(com.afollestad.materialdialogs.StackingBehavior)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Boolean resolveBoolean(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Boolean)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Boolean resolveBoolean(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Boolean)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:void setTypeface(com.afollestad.materialdialogs.internal.MDButton,android.graphics.Typeface)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setAllCapsCompat(java.lang.Boolean)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setStackedSelector(android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.RippleHelper:void applyColor(android.graphics.drawable.RippleDrawable,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setDefaultSelector(android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.internal.MDButton:void setDefaultSelector(android.graphics.drawable.RippleDrawable)->com.afollestad.materialdialogs.internal.MDButton:void setStacked(java.lang.Boolean,java.lang.Boolean)
com.afollestad.materialdialogs.internal.MDButton:void setStacked(java.lang.Boolean,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void setBackgroundCompat(com.afollestad.materialdialogs.internal.MDButton,android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:void setTypeface(com.afollestad.materialdialogs.internal.MDButton,android.graphics.Typeface)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setAllCapsCompat(java.lang.Boolean)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setStackedSelector(android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.RippleHelper:void applyColor(android.graphics.drawable.RippleDrawable,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setDefaultSelector(android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.internal.MDButton:void setDefaultSelector(android.graphics.drawable.RippleDrawable)->com.afollestad.materialdialogs.internal.MDButton:void setStacked(java.lang.Boolean,java.lang.Boolean)
com.afollestad.materialdialogs.internal.MDButton:void setStacked(java.lang.Boolean,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void setBackgroundCompat(com.afollestad.materialdialogs.internal.MDButton,android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:void setTypeface(com.afollestad.materialdialogs.internal.MDButton,android.graphics.Typeface)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setAllCapsCompat(java.lang.Boolean)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setStackedSelector(android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.RippleHelper:void applyColor(android.graphics.drawable.RippleDrawable,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setDefaultSelector(android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.internal.MDButton:void setDefaultSelector(android.graphics.drawable.RippleDrawable)->com.afollestad.materialdialogs.internal.MDButton:void setStacked(java.lang.Boolean,java.lang.Boolean)
com.afollestad.materialdialogs.internal.MDButton:void setStacked(java.lang.Boolean,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void setBackgroundCompat(com.afollestad.materialdialogs.internal.MDButton,android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.DialogInit:void setupProgressDialog(com.afollestad.materialdialogs.MaterialDialog)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.DialogInit:void setupInputDialog(com.afollestad.materialdialogs.MaterialDialog)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.DialogBase:void setOnShowListenerInternal()
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:void invalidateList()
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.DialogBase:void setViewInternal(com.afollestad.materialdialogs.internal.MDRootLayout)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:void checkIfListInitScroll()
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDRootLayout:void setMaxHeight(java.lang.Integer)
com.ichi2.anki.dialogs.DatabaseErrorDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.MaterialDialog:void show()
com.ichi2.anki.AnkiActivity:void showDialogFragment(com.ichi2.anki.dialogs.DatabaseErrorDialog)->com.afollestad.materialdialogs.MaterialDialog:void show()
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDButton:void setStacked(java.lang.Boolean,java.lang.Boolean)
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDButton:void setStacked(java.lang.Boolean,java.lang.Boolean)
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(android.widget.LinearLayout)
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(android.widget.ScrollView)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(android.widget.LinearLayout)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(android.widget.ScrollView)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:void setUpDividersVisibility(android.widget.ScrollView,java.lang.Boolean,java.lang.Boolean)
com.afollestad.materialdialogs.internal.MDRootLayout:void setUpDividersVisibility(android.widget.ScrollView,java.lang.Boolean,java.lang.Boolean)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean canScrollViewScroll(android.widget.ScrollView)
com.afollestad.materialdialogs.MaterialDialog:void onShow(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.DialogBase:void onShow(com.afollestad.materialdialogs.MaterialDialog)
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDButton:void setStacked(java.lang.Boolean,java.lang.Boolean)
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDButton:void setStacked(java.lang.Boolean,java.lang.Boolean)
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(android.widget.LinearLayout)
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(android.widget.ScrollView)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(android.widget.LinearLayout)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(android.widget.ScrollView)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:void setUpDividersVisibility(android.widget.ScrollView,java.lang.Boolean,java.lang.Boolean)
com.afollestad.materialdialogs.internal.MDRootLayout:void setUpDividersVisibility(android.widget.ScrollView,java.lang.Boolean,java.lang.Boolean)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean canScrollViewScroll(android.widget.ScrollView)
com.afollestad.materialdialogs.MaterialDialog:void onClick(com.afollestad.materialdialogs.internal.MDButton)->com.ichi2.anki.dialogs.DatabaseErrorDialog:void lambda$onCreateDialog$11$DatabaseErrorDialog(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)
com.ichi2.anki.dialogs.DatabaseErrorDialog:void lambda$onCreateDialog$11$DatabaseErrorDialog(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)->com.ichi2.anki.dialogs.DatabaseErrorDialog:[Z $jacocoInit()
com.ichi2.anki.dialogs.DatabaseErrorDialog:void lambda$onCreateDialog$11$DatabaseErrorDialog(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)->com.ichi2.anki.DeckPicker:void integrityCheck()
com.ichi2.anki.DeckPicker:void integrityCheck()->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void integrityCheck()->com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.DeckPicker$9,[Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.DeckPicker$9,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.DeckPicker$9,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.DeckPicker$9,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.DeckPicker$9,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.DeckPicker$9,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onPreExecute()
com.ichi2.async.DeckTask:void onPreExecute()->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPreExecute()->com.ichi2.async.BaseAsyncTask:void onPreExecute()
com.ichi2.async.BaseAsyncTask:void onPreExecute()->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onPreExecute()->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPreExecute()->com.ichi2.anki.AnkiDroidApp:android.content.res.XResources getAppResources()
com.ichi2.anki.AnkiDroidApp:android.content.res.XResources getAppResources()->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPreExecute()->com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.String,java.lang.Boolean)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.String,java.lang.Boolean)->com.ichi2.themes.StyledProgressDialog:[Z $jacocoInit()
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.String,java.lang.Boolean)->com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.ichi2.themes.StyledProgressDialog:[Z $jacocoInit()
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer getColor(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer adjustAlpha(java.lang.Integer,java.lang.Float)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer adjustAlpha(java.lang.Integer,java.lang.Float)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer adjustAlpha(java.lang.Integer,java.lang.Float)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer adjustAlpha(java.lang.Integer,java.lang.Float)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Boolean isColorDark(java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.internal.ThemeSingleton:void get(java.lang.Boolean)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.DeckPicker,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.DeckPicker,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer gravityEnumToAttrInt(com.afollestad.materialdialogs.GravityEnum)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.DeckPicker,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.DeckPicker,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer gravityEnumToAttrInt(com.afollestad.materialdialogs.GravityEnum)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.DeckPicker,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.DeckPicker,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer gravityEnumToAttrInt(com.afollestad.materialdialogs.GravityEnum)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.DeckPicker,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.DeckPicker,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer gravityEnumToAttrInt(com.afollestad.materialdialogs.GravityEnum)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.DeckPicker,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.DeckPicker,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer gravityEnumToAttrInt(com.afollestad.materialdialogs.GravityEnum)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:void resolveString(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.util.DialogUtils:void resolveString(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.DialogInit:java.lang.Integer getTheme(com.afollestad.materialdialogs.MaterialDialog$Builder)
com.afollestad.materialdialogs.DialogInit:java.lang.Integer getTheme(com.afollestad.materialdialogs.MaterialDialog$Builder)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Boolean resolveBoolean(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Boolean)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.DialogInit:java.lang.Integer getInflateLayout(com.afollestad.materialdialogs.MaterialDialog$Builder)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.internal.MDRootLayout:void init(com.ichi2.anki.DeckPicker,android.content.res.XmlBlock$Parser,java.lang.Integer)
com.afollestad.materialdialogs.internal.MDRootLayout:void init(com.ichi2.anki.DeckPicker,android.content.res.XmlBlock$Parser,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.internal.MDButton:void init(com.ichi2.anki.DeckPicker)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.internal.MDButton:void init(com.ichi2.anki.DeckPicker)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.internal.MDButton:void init(com.ichi2.anki.DeckPicker)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.internal.MDRootLayout:void onFinishInflate()
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList resolveActionTextColorStateList(com.ichi2.anki.DeckPicker,java.lang.Integer,android.content.res.ColorStateList)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList resolveActionTextColorStateList(com.ichi2.anki.DeckPicker,java.lang.Integer,android.content.res.ColorStateList)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList resolveActionTextColorStateList(com.ichi2.anki.DeckPicker,java.lang.Integer,android.content.res.ColorStateList)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveDimension(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveDimension(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveDimension(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Boolean resolveBoolean(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Boolean resolveBoolean(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Boolean resolveBoolean(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Boolean)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDRootLayout:void setDividerColor(java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:void setTypeface(androidx.appcompat.widget.AppCompatTextView,android.graphics.Typeface)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:void setTypeface(androidx.appcompat.widget.AppCompatTextView,android.graphics.Typeface)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDRootLayout:void setButtonGravity(com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.internal.MDRootLayout:void setButtonGravity(com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.internal.MDRootLayout:void invertGravityIfNecessary()
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDRootLayout:void setButtonStackedGravity(com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.internal.MDRootLayout:void setButtonStackedGravity(com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.internal.MDButton:void setStackedGravity(com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.internal.MDRootLayout:void setButtonStackedGravity(com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.internal.MDButton:void setStackedGravity(com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.internal.MDRootLayout:void setButtonStackedGravity(com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.internal.MDButton:void setStackedGravity(com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDRootLayout:void setStackingBehavior(com.afollestad.materialdialogs.StackingBehavior)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Boolean resolveBoolean(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Boolean)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Boolean resolveBoolean(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Boolean)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:void setTypeface(com.afollestad.materialdialogs.internal.MDButton,android.graphics.Typeface)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setAllCapsCompat(java.lang.Boolean)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setStackedSelector(android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.RippleHelper:void applyColor(android.graphics.drawable.RippleDrawable,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setDefaultSelector(android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.internal.MDButton:void setDefaultSelector(android.graphics.drawable.RippleDrawable)->com.afollestad.materialdialogs.internal.MDButton:void setStacked(java.lang.Boolean,java.lang.Boolean)
com.afollestad.materialdialogs.internal.MDButton:void setStacked(java.lang.Boolean,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void setBackgroundCompat(com.afollestad.materialdialogs.internal.MDButton,android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:void setTypeface(com.afollestad.materialdialogs.internal.MDButton,android.graphics.Typeface)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setAllCapsCompat(java.lang.Boolean)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setStackedSelector(android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.RippleHelper:void applyColor(android.graphics.drawable.RippleDrawable,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setDefaultSelector(android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.internal.MDButton:void setDefaultSelector(android.graphics.drawable.RippleDrawable)->com.afollestad.materialdialogs.internal.MDButton:void setStacked(java.lang.Boolean,java.lang.Boolean)
com.afollestad.materialdialogs.internal.MDButton:void setStacked(java.lang.Boolean,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void setBackgroundCompat(com.afollestad.materialdialogs.internal.MDButton,android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:void setTypeface(com.afollestad.materialdialogs.internal.MDButton,android.graphics.Typeface)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setAllCapsCompat(java.lang.Boolean)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setStackedSelector(android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.RippleHelper:void applyColor(android.graphics.drawable.RippleDrawable,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setDefaultSelector(android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.internal.MDButton:void setDefaultSelector(android.graphics.drawable.RippleDrawable)->com.afollestad.materialdialogs.internal.MDButton:void setStacked(java.lang.Boolean,java.lang.Boolean)
com.afollestad.materialdialogs.internal.MDButton:void setStacked(java.lang.Boolean,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void setBackgroundCompat(com.afollestad.materialdialogs.internal.MDButton,android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.DialogInit:void setupProgressDialog(com.afollestad.materialdialogs.MaterialDialog)
com.afollestad.materialdialogs.DialogInit:void setupProgressDialog(com.afollestad.materialdialogs.MaterialDialog)->me.zhanghai.android.materialprogressbar.internal.ThemeUtils:java.lang.Integer getColorFromAttrRes(java.lang.Integer,java.lang.Integer,com.ichi2.anki.DeckPicker)
com.afollestad.materialdialogs.DialogInit:void setupProgressDialog(com.afollestad.materialdialogs.MaterialDialog)->me.zhanghai.android.materialprogressbar.Animators:android.animation.AnimatorSet createIndeterminate(me.zhanghai.android.materialprogressbar.IndeterminateCircularProgressDrawable$RingPathTransform)
com.afollestad.materialdialogs.DialogInit:void setupProgressDialog(com.afollestad.materialdialogs.MaterialDialog)->me.zhanghai.android.materialprogressbar.Animators:android.animation.ObjectAnimator createIndeterminateRotation(me.zhanghai.android.materialprogressbar.IndeterminateCircularProgressDrawable$RingRotation)
com.afollestad.materialdialogs.DialogInit:void setupProgressDialog(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.DialogInit:void fixCanvasScalingWhenHardwareAccelerated(android.widget.ProgressBar)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.DialogInit:void setupInputDialog(com.afollestad.materialdialogs.MaterialDialog)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.DialogBase:void setOnShowListenerInternal()
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:void invalidateList()
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.DialogBase:void setViewInternal(com.afollestad.materialdialogs.internal.MDRootLayout)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:void checkIfListInitScroll()
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDRootLayout:void setMaxHeight(java.lang.Integer)
com.ichi2.themes.StyledProgressDialog:com.afollestad.materialdialogs.MaterialDialog show(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.String,java.lang.Boolean,android.content.DialogInterface$OnCancelListener)->com.afollestad.materialdialogs.MaterialDialog:void show()
com.ichi2.async.DeckTask:void onPreExecute()->com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$402(com.ichi2.anki.DeckPicker,com.afollestad.materialdialogs.MaterialDialog)
com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$402(com.ichi2.anki.DeckPicker,com.afollestad.materialdialogs.MaterialDialog)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.anki.dialogs.DatabaseErrorDialog:void lambda$onCreateDialog$11$DatabaseErrorDialog(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)->com.ichi2.anki.dialogs.DatabaseErrorDialog:void dismissAllDialogFragments()
com.ichi2.anki.dialogs.DatabaseErrorDialog:void dismissAllDialogFragments()->com.ichi2.anki.dialogs.DatabaseErrorDialog:[Z $jacocoInit()
com.ichi2.anki.dialogs.DatabaseErrorDialog:void dismissAllDialogFragments()->com.ichi2.anki.AnkiActivity:void dismissAllDialogFragments()
com.ichi2.anki.AnkiActivity:void dismissAllDialogFragments()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.afollestad.materialdialogs.MaterialDialog:void onClick(com.afollestad.materialdialogs.internal.MDButton)->com.afollestad.materialdialogs.MaterialDialog:java.lang.Boolean sendSingleChoiceCallback(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.MaterialDialog:void onClick(com.afollestad.materialdialogs.internal.MDButton)->com.afollestad.materialdialogs.MaterialDialog:java.lang.Boolean sendMultiChoiceCallback()
com.afollestad.materialdialogs.MaterialDialog:void onClick(com.afollestad.materialdialogs.internal.MDButton)->com.afollestad.materialdialogs.MaterialDialog:void dismiss()
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(android.widget.LinearLayout)
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(android.widget.LinearLayout)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(android.widget.LinearLayout)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(android.widget.LinearLayout)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:void setUpDividersVisibility(android.widget.LinearLayout,java.lang.Boolean,java.lang.Boolean)
com.afollestad.materialdialogs.internal.MDRootLayout:void setUpDividersVisibility(android.widget.LinearLayout,java.lang.Boolean,java.lang.Boolean)->com.afollestad.materialdialogs.internal.MDRootLayout:void getTopView(android.widget.LinearLayout)
com.afollestad.materialdialogs.internal.MDRootLayout:void setUpDividersVisibility(android.widget.LinearLayout,java.lang.Boolean,java.lang.Boolean)->com.afollestad.materialdialogs.internal.MDRootLayout:void setUpDividersVisibility(android.view.View,java.lang.Boolean,java.lang.Boolean)
com.afollestad.materialdialogs.internal.MDRootLayout:void setUpDividersVisibility(android.widget.LinearLayout,java.lang.Boolean,java.lang.Boolean)->com.afollestad.materialdialogs.internal.MDRootLayout:void getBottomView(android.widget.LinearLayout)
com.afollestad.materialdialogs.MaterialDialog:void onShow(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.DialogBase:void onShow(com.afollestad.materialdialogs.MaterialDialog)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.afollestad.materialdialogs.MaterialDialog:void setContent(java.lang.String)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.afollestad.materialdialogs.MaterialDialog:void setContent(java.lang.String)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.afollestad.materialdialogs.MaterialDialog:void setContent(java.lang.String)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.afollestad.materialdialogs.MaterialDialog:void setContent(java.lang.String)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.afollestad.materialdialogs.MaterialDialog:void setContent(java.lang.String)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.afollestad.materialdialogs.MaterialDialog:void setContent(java.lang.String)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.afollestad.materialdialogs.MaterialDialog:void setContent(java.lang.String)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.afollestad.materialdialogs.MaterialDialog:void setContent(java.lang.String)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.afollestad.materialdialogs.MaterialDialog:void setContent(java.lang.String)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.afollestad.materialdialogs.MaterialDialog:void setContent(java.lang.String)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.afollestad.materialdialogs.MaterialDialog:void setContent(java.lang.String)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.afollestad.materialdialogs.MaterialDialog:void setContent(java.lang.String)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.afollestad.materialdialogs.MaterialDialog:void setContent(java.lang.String)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.afollestad.materialdialogs.MaterialDialog:void setContent(java.lang.String)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.afollestad.materialdialogs.MaterialDialog:void setContent(java.lang.String)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.afollestad.materialdialogs.MaterialDialog:void setContent(java.lang.String)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.afollestad.materialdialogs.MaterialDialog:void setContent(java.lang.String)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.afollestad.materialdialogs.MaterialDialog:void setContent(java.lang.String)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.afollestad.materialdialogs.MaterialDialog:void setContent(java.lang.String)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.afollestad.materialdialogs.MaterialDialog:void setContent(java.lang.String)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.afollestad.materialdialogs.MaterialDialog:void setContent(java.lang.String)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.afollestad.materialdialogs.MaterialDialog:void setContent(java.lang.String)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.afollestad.materialdialogs.MaterialDialog:void setContent(java.lang.String)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.afollestad.materialdialogs.MaterialDialog:void setContent(java.lang.String)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.afollestad.materialdialogs.MaterialDialog:void setContent(java.lang.String)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.afollestad.materialdialogs.MaterialDialog:void setContent(java.lang.String)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.afollestad.materialdialogs.MaterialDialog:void setContent(java.lang.String)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.afollestad.materialdialogs.MaterialDialog:void setContent(java.lang.String)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.afollestad.materialdialogs.MaterialDialog:void setContent(java.lang.String)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.afollestad.materialdialogs.MaterialDialog:void setContent(java.lang.String)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.afollestad.materialdialogs.MaterialDialog:void setContent(java.lang.String)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.afollestad.materialdialogs.MaterialDialog:void setContent(java.lang.String)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.afollestad.materialdialogs.MaterialDialog:void setContent(java.lang.String)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.afollestad.materialdialogs.MaterialDialog:void setContent(java.lang.String)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.afollestad.materialdialogs.MaterialDialog:void setContent(java.lang.String)
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(android.widget.LinearLayout)
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(android.widget.LinearLayout)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(android.widget.LinearLayout)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(android.widget.LinearLayout)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:void setUpDividersVisibility(android.widget.LinearLayout,java.lang.Boolean,java.lang.Boolean)
com.afollestad.materialdialogs.internal.MDRootLayout:void setUpDividersVisibility(android.widget.LinearLayout,java.lang.Boolean,java.lang.Boolean)->com.afollestad.materialdialogs.internal.MDRootLayout:void getTopView(android.widget.LinearLayout)
com.afollestad.materialdialogs.internal.MDRootLayout:void setUpDividersVisibility(android.widget.LinearLayout,java.lang.Boolean,java.lang.Boolean)->com.afollestad.materialdialogs.internal.MDRootLayout:void setUpDividersVisibility(android.view.View,java.lang.Boolean,java.lang.Boolean)
com.afollestad.materialdialogs.internal.MDRootLayout:void setUpDividersVisibility(android.widget.LinearLayout,java.lang.Boolean,java.lang.Boolean)->com.afollestad.materialdialogs.internal.MDRootLayout:void getBottomView(android.widget.LinearLayout)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.afollestad.materialdialogs.MaterialDialog:void setContent(java.lang.String)
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.BaseAsyncTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)
com.ichi2.async.BaseAsyncTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.afollestad.materialdialogs.MaterialDialog:void dismiss()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.AnkiActivity:void showSimpleMessageDialog(java.lang.String,java.lang.Boolean)
com.ichi2.anki.AnkiActivity:void showSimpleMessageDialog(java.lang.String,java.lang.Boolean)->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void showSimpleMessageDialog(java.lang.String,java.lang.Boolean)->com.ichi2.anki.dialogs.SimpleMessageDialog:com.ichi2.anki.dialogs.SimpleMessageDialog newInstance(java.lang.String,java.lang.Boolean)
com.ichi2.anki.dialogs.SimpleMessageDialog:com.ichi2.anki.dialogs.SimpleMessageDialog newInstance(java.lang.String,java.lang.Boolean)->com.ichi2.anki.dialogs.SimpleMessageDialog:[Z $jacocoInit()
com.ichi2.anki.dialogs.SimpleMessageDialog:com.ichi2.anki.dialogs.SimpleMessageDialog newInstance(java.lang.String,java.lang.Boolean)->com.ichi2.anki.dialogs.SimpleMessageDialog:com.ichi2.anki.dialogs.SimpleMessageDialog newInstance(java.lang.String,java.lang.String,java.lang.Boolean)
com.ichi2.anki.dialogs.SimpleMessageDialog:com.ichi2.anki.dialogs.SimpleMessageDialog newInstance(java.lang.String,java.lang.String,java.lang.Boolean)->com.ichi2.anki.dialogs.SimpleMessageDialog:[Z $jacocoInit()
com.ichi2.anki.dialogs.SimpleMessageDialog:com.ichi2.anki.dialogs.SimpleMessageDialog newInstance(java.lang.String,java.lang.String,java.lang.Boolean)->com.ichi2.anki.dialogs.SimpleMessageDialog:[Z $jacocoInit()
com.ichi2.anki.dialogs.SimpleMessageDialog:com.ichi2.anki.dialogs.SimpleMessageDialog newInstance(java.lang.String,java.lang.String,java.lang.Boolean)->com.ichi2.anki.dialogs.AsyncDialogFragment:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void showSimpleMessageDialog(java.lang.String,java.lang.Boolean)->com.ichi2.anki.AnkiActivity:void showAsyncDialogFragment(com.ichi2.anki.dialogs.SimpleMessageDialog)
com.ichi2.anki.AnkiActivity:void showAsyncDialogFragment(com.ichi2.anki.dialogs.SimpleMessageDialog)->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void showAsyncDialogFragment(com.ichi2.anki.dialogs.SimpleMessageDialog)->com.ichi2.anki.AnkiActivity:void showAsyncDialogFragment(com.ichi2.anki.dialogs.SimpleMessageDialog,com.ichi2.anki.NotificationChannels$Channel)
com.ichi2.anki.AnkiActivity:void showAsyncDialogFragment(com.ichi2.anki.dialogs.SimpleMessageDialog,com.ichi2.anki.NotificationChannels$Channel)->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void showAsyncDialogFragment(com.ichi2.anki.dialogs.SimpleMessageDialog,com.ichi2.anki.NotificationChannels$Channel)->com.ichi2.anki.AnkiActivity:void showDialogFragment(com.ichi2.anki.dialogs.SimpleMessageDialog)
com.ichi2.anki.AnkiActivity:void showDialogFragment(com.ichi2.anki.dialogs.SimpleMessageDialog)->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void showDialogFragment(com.ichi2.anki.dialogs.SimpleMessageDialog)->com.ichi2.anki.dialogs.SimpleMessageDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)
com.ichi2.anki.dialogs.SimpleMessageDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.ichi2.anki.dialogs.SimpleMessageDialog:[Z $jacocoInit()
com.ichi2.anki.dialogs.SimpleMessageDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.ichi2.anki.dialogs.SimpleMessageDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)
com.ichi2.anki.dialogs.SimpleMessageDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.ichi2.anki.dialogs.SimpleMessageDialog:[Z $jacocoInit()
com.ichi2.anki.dialogs.SimpleMessageDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer getColor(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.ichi2.anki.dialogs.SimpleMessageDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.ichi2.anki.dialogs.SimpleMessageDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.ichi2.anki.dialogs.SimpleMessageDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer adjustAlpha(java.lang.Integer,java.lang.Float)
com.ichi2.anki.dialogs.SimpleMessageDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer adjustAlpha(java.lang.Integer,java.lang.Float)
com.ichi2.anki.dialogs.SimpleMessageDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer adjustAlpha(java.lang.Integer,java.lang.Float)
com.ichi2.anki.dialogs.SimpleMessageDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.ichi2.anki.dialogs.SimpleMessageDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList getActionTextStateList(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer adjustAlpha(java.lang.Integer,java.lang.Float)
com.ichi2.anki.dialogs.SimpleMessageDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.ichi2.anki.dialogs.SimpleMessageDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.ichi2.anki.dialogs.SimpleMessageDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.ichi2.anki.dialogs.SimpleMessageDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.ichi2.anki.dialogs.SimpleMessageDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Boolean isColorDark(java.lang.Integer)
com.ichi2.anki.dialogs.SimpleMessageDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.internal.ThemeSingleton:void get(java.lang.Boolean)
com.ichi2.anki.dialogs.SimpleMessageDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.DeckPicker,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.DeckPicker,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer gravityEnumToAttrInt(com.afollestad.materialdialogs.GravityEnum)
com.ichi2.anki.dialogs.SimpleMessageDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.DeckPicker,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.DeckPicker,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer gravityEnumToAttrInt(com.afollestad.materialdialogs.GravityEnum)
com.ichi2.anki.dialogs.SimpleMessageDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.DeckPicker,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.DeckPicker,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer gravityEnumToAttrInt(com.afollestad.materialdialogs.GravityEnum)
com.ichi2.anki.dialogs.SimpleMessageDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.DeckPicker,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.DeckPicker,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer gravityEnumToAttrInt(com.afollestad.materialdialogs.GravityEnum)
com.ichi2.anki.dialogs.SimpleMessageDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.DeckPicker,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.util.DialogUtils:com.afollestad.materialdialogs.GravityEnum resolveGravityEnum(com.ichi2.anki.DeckPicker,java.lang.Integer,com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer gravityEnumToAttrInt(com.afollestad.materialdialogs.GravityEnum)
com.ichi2.anki.dialogs.SimpleMessageDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.util.DialogUtils:void resolveString(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.ichi2.anki.dialogs.SimpleMessageDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.util.DialogUtils:void resolveString(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.ichi2.anki.dialogs.SimpleMessageDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.ichi2.anki.dialogs.SimpleMessageDialog:java.lang.String getNotificationTitle()
com.ichi2.anki.dialogs.SimpleMessageDialog:java.lang.String getNotificationTitle()->com.ichi2.anki.dialogs.SimpleMessageDialog:[Z $jacocoInit()
com.ichi2.anki.dialogs.SimpleMessageDialog:java.lang.String getNotificationTitle()->com.ichi2.anki.AnkiDroidApp:android.content.res.XResources getAppResources()
com.ichi2.anki.AnkiDroidApp:android.content.res.XResources getAppResources()->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.dialogs.SimpleMessageDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.ichi2.anki.dialogs.SimpleMessageDialog:java.lang.String getNotificationMessage()
com.ichi2.anki.dialogs.SimpleMessageDialog:java.lang.String getNotificationMessage()->com.ichi2.anki.dialogs.SimpleMessageDialog:[Z $jacocoInit()
com.ichi2.anki.dialogs.SimpleMessageDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.ichi2.anki.dialogs.AsyncDialogFragment:android.content.res.XResources res()
com.ichi2.anki.dialogs.AsyncDialogFragment:android.content.res.XResources res()->com.ichi2.anki.dialogs.AsyncDialogFragment:[Z $jacocoInit()
com.ichi2.anki.dialogs.AsyncDialogFragment:android.content.res.XResources res()->com.ichi2.anki.AnkiDroidApp:android.content.res.XResources getAppResources()
com.ichi2.anki.AnkiDroidApp:android.content.res.XResources getAppResources()->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.dialogs.SimpleMessageDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.DialogInit:java.lang.Integer getTheme(com.afollestad.materialdialogs.MaterialDialog$Builder)
com.afollestad.materialdialogs.DialogInit:java.lang.Integer getTheme(com.afollestad.materialdialogs.MaterialDialog$Builder)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Boolean resolveBoolean(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Boolean)
com.ichi2.anki.dialogs.SimpleMessageDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.DialogInit:java.lang.Integer getInflateLayout(com.afollestad.materialdialogs.MaterialDialog$Builder)
com.ichi2.anki.dialogs.SimpleMessageDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.internal.MDRootLayout:void init(com.ichi2.anki.DeckPicker,android.content.res.XmlBlock$Parser,java.lang.Integer)
com.afollestad.materialdialogs.internal.MDRootLayout:void init(com.ichi2.anki.DeckPicker,android.content.res.XmlBlock$Parser,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.ichi2.anki.dialogs.SimpleMessageDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.internal.MDButton:void init(com.ichi2.anki.DeckPicker)
com.ichi2.anki.dialogs.SimpleMessageDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.internal.MDButton:void init(com.ichi2.anki.DeckPicker)
com.ichi2.anki.dialogs.SimpleMessageDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.internal.MDButton:void init(com.ichi2.anki.DeckPicker)
com.ichi2.anki.dialogs.SimpleMessageDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.internal.MDRootLayout:void onFinishInflate()
com.ichi2.anki.dialogs.SimpleMessageDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList resolveActionTextColorStateList(com.ichi2.anki.DeckPicker,java.lang.Integer,android.content.res.ColorStateList)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList resolveActionTextColorStateList(com.ichi2.anki.DeckPicker,java.lang.Integer,android.content.res.ColorStateList)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:android.content.res.ColorStateList resolveActionTextColorStateList(com.ichi2.anki.DeckPicker,java.lang.Integer,android.content.res.ColorStateList)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveDimension(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveDimension(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveDimension(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Boolean resolveBoolean(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Boolean resolveBoolean(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Boolean resolveBoolean(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Boolean)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(android.view.ContextThemeWrapper,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Integer resolveColor(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDRootLayout:void setDividerColor(java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:void setTypeface(androidx.appcompat.widget.AppCompatTextView,android.graphics.Typeface)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:void setTypeface(androidx.appcompat.widget.AppCompatTextView,android.graphics.Typeface)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDRootLayout:void setButtonGravity(com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.internal.MDRootLayout:void setButtonGravity(com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.internal.MDRootLayout:void invertGravityIfNecessary()
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDRootLayout:void setButtonStackedGravity(com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.internal.MDRootLayout:void setButtonStackedGravity(com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.internal.MDButton:void setStackedGravity(com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.internal.MDRootLayout:void setButtonStackedGravity(com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.internal.MDButton:void setStackedGravity(com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.internal.MDRootLayout:void setButtonStackedGravity(com.afollestad.materialdialogs.GravityEnum)->com.afollestad.materialdialogs.internal.MDButton:void setStackedGravity(com.afollestad.materialdialogs.GravityEnum)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDRootLayout:void setStackingBehavior(com.afollestad.materialdialogs.StackingBehavior)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Boolean resolveBoolean(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Boolean)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.util.DialogUtils:java.lang.Boolean resolveBoolean(com.ichi2.anki.DeckPicker,java.lang.Integer,java.lang.Boolean)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:void setTypeface(com.afollestad.materialdialogs.internal.MDButton,android.graphics.Typeface)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setAllCapsCompat(java.lang.Boolean)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setStackedSelector(android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.RippleHelper:void applyColor(android.graphics.drawable.RippleDrawable,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setDefaultSelector(android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.internal.MDButton:void setDefaultSelector(android.graphics.drawable.RippleDrawable)->com.afollestad.materialdialogs.internal.MDButton:void setStacked(java.lang.Boolean,java.lang.Boolean)
com.afollestad.materialdialogs.internal.MDButton:void setStacked(java.lang.Boolean,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void setBackgroundCompat(com.afollestad.materialdialogs.internal.MDButton,android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:void setTypeface(com.afollestad.materialdialogs.internal.MDButton,android.graphics.Typeface)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setAllCapsCompat(java.lang.Boolean)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setStackedSelector(android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.RippleHelper:void applyColor(android.graphics.drawable.RippleDrawable,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setDefaultSelector(android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.internal.MDButton:void setDefaultSelector(android.graphics.drawable.RippleDrawable)->com.afollestad.materialdialogs.internal.MDButton:void setStacked(java.lang.Boolean,java.lang.Boolean)
com.afollestad.materialdialogs.internal.MDButton:void setStacked(java.lang.Boolean,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void setBackgroundCompat(com.afollestad.materialdialogs.internal.MDButton,android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:void setTypeface(com.afollestad.materialdialogs.internal.MDButton,android.graphics.Typeface)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setAllCapsCompat(java.lang.Boolean)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setStackedSelector(android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:void resolveDrawable(com.ichi2.anki.DeckPicker,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)
com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer)->com.afollestad.materialdialogs.util.DialogUtils:android.graphics.drawable.RippleDrawable resolveDrawable(android.view.ContextThemeWrapper,java.lang.Integer,android.graphics.drawable.Drawable)
com.afollestad.materialdialogs.MaterialDialog:android.graphics.drawable.RippleDrawable getButtonSelector(com.afollestad.materialdialogs.DialogAction,java.lang.Boolean)->com.afollestad.materialdialogs.util.RippleHelper:void applyColor(android.graphics.drawable.RippleDrawable,java.lang.Integer)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDButton:void setDefaultSelector(android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.internal.MDButton:void setDefaultSelector(android.graphics.drawable.RippleDrawable)->com.afollestad.materialdialogs.internal.MDButton:void setStacked(java.lang.Boolean,java.lang.Boolean)
com.afollestad.materialdialogs.internal.MDButton:void setStacked(java.lang.Boolean,java.lang.Boolean)->com.afollestad.materialdialogs.util.DialogUtils:void setBackgroundCompat(com.afollestad.materialdialogs.internal.MDButton,android.graphics.drawable.RippleDrawable)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.DialogInit:void setupProgressDialog(com.afollestad.materialdialogs.MaterialDialog)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.DialogInit:void setupInputDialog(com.afollestad.materialdialogs.MaterialDialog)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.DialogBase:void setOnShowListenerInternal()
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:void invalidateList()
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.DialogBase:void setViewInternal(com.afollestad.materialdialogs.internal.MDRootLayout)
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.MaterialDialog:void checkIfListInitScroll()
com.afollestad.materialdialogs.DialogInit:void init(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.internal.MDRootLayout:void setMaxHeight(java.lang.Integer)
com.ichi2.anki.dialogs.SimpleMessageDialog:com.afollestad.materialdialogs.MaterialDialog onCreateDialog(android.os.Bundle)->com.afollestad.materialdialogs.MaterialDialog:void show()
com.ichi2.anki.AnkiActivity:void showDialogFragment(com.ichi2.anki.dialogs.SimpleMessageDialog)->com.afollestad.materialdialogs.MaterialDialog:void show()
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDButton:void setStacked(java.lang.Boolean,java.lang.Boolean)
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(android.widget.LinearLayout)
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(android.widget.ScrollView)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(android.widget.LinearLayout)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(android.widget.ScrollView)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:void setUpDividersVisibility(android.widget.ScrollView,java.lang.Boolean,java.lang.Boolean)
com.afollestad.materialdialogs.internal.MDRootLayout:void setUpDividersVisibility(android.widget.ScrollView,java.lang.Boolean,java.lang.Boolean)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean canScrollViewScroll(android.widget.ScrollView)
com.afollestad.materialdialogs.MaterialDialog:void onShow(com.afollestad.materialdialogs.MaterialDialog)->com.afollestad.materialdialogs.DialogBase:void onShow(com.afollestad.materialdialogs.MaterialDialog)
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDButton:void setStacked(java.lang.Boolean,java.lang.Boolean)
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(android.widget.LinearLayout)
com.afollestad.materialdialogs.internal.MDRootLayout:void onMeasure(java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(android.widget.ScrollView)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(android.widget.LinearLayout)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(android.widget.ScrollView)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean isVisible(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.internal.MDRootLayout:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.afollestad.materialdialogs.internal.MDRootLayout:void setUpDividersVisibility(android.widget.ScrollView,java.lang.Boolean,java.lang.Boolean)
com.afollestad.materialdialogs.internal.MDRootLayout:void setUpDividersVisibility(android.widget.ScrollView,java.lang.Boolean,java.lang.Boolean)->com.afollestad.materialdialogs.internal.MDRootLayout:java.lang.Boolean canScrollViewScroll(android.widget.ScrollView)
com.afollestad.materialdialogs.MaterialDialog:void onClick(com.afollestad.materialdialogs.internal.MDButton)->com.ichi2.anki.dialogs.SimpleMessageDialog:void lambda$onCreateDialog$0$SimpleMessageDialog(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)
com.ichi2.anki.dialogs.SimpleMessageDialog:void lambda$onCreateDialog$0$SimpleMessageDialog(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)->com.ichi2.anki.dialogs.SimpleMessageDialog:[Z $jacocoInit()
com.ichi2.anki.dialogs.SimpleMessageDialog:void lambda$onCreateDialog$0$SimpleMessageDialog(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)->com.ichi2.anki.AnkiActivity:void dismissSimpleMessageDialog(java.lang.Boolean)
com.ichi2.anki.AnkiActivity:void dismissSimpleMessageDialog(java.lang.Boolean)->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void dismissSimpleMessageDialog(java.lang.Boolean)->com.ichi2.anki.AnkiActivity:void dismissAllDialogFragments()
com.ichi2.anki.AnkiActivity:void dismissAllDialogFragments()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void dismissSimpleMessageDialog(java.lang.Boolean)->com.ichi2.anki.AnkiActivity:void startActivityWithoutAnimation(android.content.Intent)
com.ichi2.anki.AnkiActivity:void startActivityWithoutAnimation(android.content.Intent)->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void startActivityWithoutAnimation(android.content.Intent)->com.ichi2.anki.AnkiActivity:void disableIntentAnimation(android.content.Intent)
com.ichi2.anki.AnkiActivity:void disableIntentAnimation(android.content.Intent)->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void startActivityWithoutAnimation(android.content.Intent)->com.ichi2.anki.AnkiActivity:void startActivityForResult(android.content.Intent,java.lang.Integer)
com.ichi2.anki.AnkiActivity:void startActivityForResult(android.content.Intent,java.lang.Integer)->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void startActivityWithoutAnimation(android.content.Intent)->com.ichi2.anki.AnkiActivity:void disableActivityAnimation()
com.ichi2.anki.AnkiActivity:void disableActivityAnimation()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void disableActivityAnimation()->com.ichi2.anim.ActivityTransitionAnimation:void slide(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.ichi2.anim.ActivityTransitionAnimation:void slide(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.ichi2.anim.ActivityTransitionAnimation:[Z $jacocoInit()
com.afollestad.materialdialogs.MaterialDialog:void onClick(com.afollestad.materialdialogs.internal.MDButton)->com.afollestad.materialdialogs.MaterialDialog:java.lang.Boolean sendSingleChoiceCallback(com.afollestad.materialdialogs.internal.MDButton)
com.afollestad.materialdialogs.MaterialDialog:void onClick(com.afollestad.materialdialogs.internal.MDButton)->com.afollestad.materialdialogs.MaterialDialog:java.lang.Boolean sendMultiChoiceCallback()
com.afollestad.materialdialogs.MaterialDialog:void onClick(com.afollestad.materialdialogs.internal.MDButton)->com.afollestad.materialdialogs.MaterialDialog:void dismiss()
com.ichi2.anki.DeckPicker:void onPause()->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onCreate(android.os.Bundle)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onCreate(android.os.Bundle)->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(android.app.ContextImpl)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(android.app.ContextImpl)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onCreate(android.os.Bundle)->com.ichi2.anki.DeckPicker:java.lang.Boolean firstCollectionOpen()
com.ichi2.anki.DeckPicker:java.lang.Boolean firstCollectionOpen()->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:java.lang.Boolean firstCollectionOpen()->com.ichi2.anki.CollectionHelper:java.lang.Boolean hasStorageAccessPermission(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:java.lang.Boolean hasStorageAccessPermission(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:java.lang.Boolean firstCollectionOpen()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:java.lang.Boolean firstCollectionOpen()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getColSafe(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getColSafe(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getColSafe(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:void getDb()
com.ichi2.libanki.Collection:void getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getParentDirectory(java.lang.String)
com.ichi2.anki.CollectionHelper:java.lang.String getParentDirectory(java.lang.String)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:void initializeAnkiDroidDirectory(java.lang.String)
com.ichi2.anki.CollectionHelper:void initializeAnkiDroidDirectory(java.lang.String)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.libanki.Storage:com.ichi2.libanki.Collection Collection(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.Boolean,java.lang.Boolean)
com.ichi2.libanki.Storage:com.ichi2.libanki.Collection Collection(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Storage:[Z $jacocoInit()
com.ichi2.libanki.Storage:com.ichi2.libanki.Collection Collection(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.hooks.Hooks:com.ichi2.libanki.hooks.Hooks getInstance(com.ichi2.anki.DeckPicker)
com.ichi2.libanki.hooks.Hooks:com.ichi2.libanki.hooks.Hooks getInstance(com.ichi2.anki.DeckPicker)->com.ichi2.libanki.hooks.Hooks:[Z $jacocoInit()
com.ichi2.libanki.Storage:com.ichi2.libanki.Collection Collection(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.Storage:com.ichi2.libanki.Collection Collection(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.Boolean,java.lang.Boolean)->com.ichi2.anki.AnkiDroidApp:com.ichi2.anki.AnkiDroidApp getInstance()
com.ichi2.anki.AnkiDroidApp:com.ichi2.anki.AnkiDroidApp getInstance()->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.libanki.Storage:com.ichi2.libanki.Collection Collection(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.DB:com.ichi2.libanki.DB$SupportSQLiteOpenHelperCallback getDBCallback()
com.ichi2.libanki.DB:com.ichi2.libanki.DB$SupportSQLiteOpenHelperCallback getDBCallback()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.Storage:com.ichi2.libanki.Collection Collection(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.DB:io.requery.android.database.sqlite.RequerySQLiteOpenHelperFactory getSqliteOpenHelperFactory()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.RequerySQLiteOpenHelperFactory getSqliteOpenHelperFactory()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.Storage:com.ichi2.libanki.Collection Collection(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.Boolean,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteOpenHelper:io.requery.android.database.sqlite.SQLiteDatabase getWritableDatabase()
io.requery.android.database.sqlite.SQLiteOpenHelper:io.requery.android.database.sqlite.SQLiteDatabase getWritableDatabase()->io.requery.android.database.sqlite.SQLiteOpenHelper:io.requery.android.database.sqlite.SQLiteDatabase getWritableDatabase()
io.requery.android.database.sqlite.SQLiteOpenHelper:io.requery.android.database.sqlite.SQLiteDatabase getWritableDatabase()->io.requery.android.database.sqlite.SQLiteOpenHelper:io.requery.android.database.sqlite.SQLiteDatabase getDatabaseLocked(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteOpenHelper:io.requery.android.database.sqlite.SQLiteDatabase getDatabaseLocked(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteOpenHelper:io.requery.android.database.sqlite.SQLiteDatabaseConfiguration createConfiguration(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteOpenHelper:io.requery.android.database.sqlite.SQLiteDatabaseConfiguration createConfiguration(java.lang.String,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.String stripPathForLogs(java.lang.String)
io.requery.android.database.sqlite.SQLiteOpenHelper:io.requery.android.database.sqlite.SQLiteDatabase getDatabaseLocked(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteDatabase openDatabase(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration,io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,io.requery.android.database.sqlite.RequerySQLiteOpenHelperFactory$CallbackDatabaseErrorHandler)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteDatabase openDatabase(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration,io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,io.requery.android.database.sqlite.RequerySQLiteOpenHelperFactory$CallbackDatabaseErrorHandler)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteDatabase openDatabase(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration,io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,io.requery.android.database.sqlite.RequerySQLiteOpenHelperFactory$CallbackDatabaseErrorHandler)->io.requery.android.database.sqlite.SQLiteDatabase:void open()
io.requery.android.database.sqlite.SQLiteDatabase:void open()->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteDatabase:void open()->io.requery.android.database.sqlite.SQLiteDatabase:void ensureFile(java.lang.String)
io.requery.android.database.sqlite.SQLiteDatabase:void open()->io.requery.android.database.sqlite.SQLiteDatabase:void openInner()
io.requery.android.database.sqlite.SQLiteDatabase:void openInner()->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnectionPool open(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnectionPool open(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnectionPool open(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:void updateParametersFrom(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnectionPool open(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration)->io.requery.android.database.sqlite.SQLiteConnectionPool:void setMaxConnectionPoolSizeLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:void setMaxConnectionPoolSizeLocked()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean hasCodec()
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean hasCodec()->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean hasCodec()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnectionPool open(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration)->io.requery.android.database.sqlite.SQLiteConnectionPool:void open()
io.requery.android.database.sqlite.SQLiteConnectionPool:void open()->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection openConnectionLocked(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection openConnectionLocked(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection open(io.requery.android.database.sqlite.SQLiteConnectionPool,io.requery.android.database.sqlite.SQLiteDatabaseConfiguration,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection open(io.requery.android.database.sqlite.SQLiteConnectionPool,io.requery.android.database.sqlite.SQLiteDatabaseConfiguration,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection open(io.requery.android.database.sqlite.SQLiteConnectionPool,io.requery.android.database.sqlite.SQLiteDatabaseConfiguration,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:void updateParametersFrom(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection open(io.requery.android.database.sqlite.SQLiteConnectionPool,io.requery.android.database.sqlite.SQLiteDatabaseConfiguration,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.CloseGuard:void open(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection open(io.requery.android.database.sqlite.SQLiteConnectionPool,io.requery.android.database.sqlite.SQLiteDatabaseConfiguration,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteConnection:void open()
io.requery.android.database.sqlite.SQLiteConnection:void open()->io.requery.android.database.sqlite.SQLiteConnection:void setPageSize()
io.requery.android.database.sqlite.SQLiteConnection:void setPageSize()->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:void setPageSize()->io.requery.android.database.sqlite.SQLiteGlobal:java.lang.Integer getDefaultPageSize()
io.requery.android.database.sqlite.SQLiteConnection:void setPageSize()->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void recyclePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void open()->io.requery.android.database.sqlite.SQLiteConnection:void setForeignKeyModeFromConfiguration()
io.requery.android.database.sqlite.SQLiteConnection:void setForeignKeyModeFromConfiguration()->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void recyclePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void open()->io.requery.android.database.sqlite.SQLiteConnection:void setJournalSizeLimit()
io.requery.android.database.sqlite.SQLiteConnection:void setJournalSizeLimit()->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:void setJournalSizeLimit()->io.requery.android.database.sqlite.SQLiteGlobal:java.lang.Integer getJournalSizeLimit()
io.requery.android.database.sqlite.SQLiteConnection:void setJournalSizeLimit()->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void recyclePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void setJournalSizeLimit()->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void recyclePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void open()->io.requery.android.database.sqlite.SQLiteConnection:void setAutoCheckpointInterval()
io.requery.android.database.sqlite.SQLiteConnection:void setAutoCheckpointInterval()->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:void setAutoCheckpointInterval()->io.requery.android.database.sqlite.SQLiteGlobal:java.lang.Integer getWALAutoCheckpoint()
io.requery.android.database.sqlite.SQLiteConnection:void setAutoCheckpointInterval()->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void recyclePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void setAutoCheckpointInterval()->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void recyclePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void open()->io.requery.android.database.sqlite.SQLiteConnection:void setWalModeFromConfiguration()
io.requery.android.database.sqlite.SQLiteConnection:void setWalModeFromConfiguration()->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:void setWalModeFromConfiguration()->io.requery.android.database.sqlite.SQLiteGlobal:java.lang.String getDefaultJournalMode()
io.requery.android.database.sqlite.SQLiteConnection:void setWalModeFromConfiguration()->io.requery.android.database.sqlite.SQLiteConnection:void setJournalMode(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:void setJournalMode(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void recyclePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void setJournalMode(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void recyclePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void setWalModeFromConfiguration()->io.requery.android.database.sqlite.SQLiteGlobal:java.lang.String getDefaultSyncMode()
io.requery.android.database.sqlite.SQLiteConnection:void setWalModeFromConfiguration()->io.requery.android.database.sqlite.SQLiteConnection:void setSyncMode(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:void setSyncMode(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void recyclePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void setSyncMode(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.String canonicalizeSyncMode(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:void setSyncMode(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.String canonicalizeSyncMode(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:void open()->io.requery.android.database.sqlite.SQLiteConnection:void setLocaleFromConfiguration()
io.requery.android.database.sqlite.SQLiteConnection:void setLocaleFromConfiguration()->io.requery.android.database.sqlite.SQLiteConnection:void execute(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:void execute(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:void execute(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void execute(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:void execute(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:void execute(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:void execute(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:void execute(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void recyclePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void setLocaleFromConfiguration()->io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnectionPool:void open()->io.requery.android.database.sqlite.CloseGuard:void open(java.lang.String)
io.requery.android.database.sqlite.SQLiteDatabase:void openInner()->io.requery.android.database.sqlite.CloseGuard:void open(java.lang.String)
io.requery.android.database.sqlite.SQLiteOpenHelper:io.requery.android.database.sqlite.SQLiteDatabase getDatabaseLocked(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getVersion()
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getVersion()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Long longForQuery(java.lang.String,[Ljava.lang.String;)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Long longForQuery(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession createSession()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession createSession()->io.requery.android.database.sqlite.SQLiteDatabase:void throwIfNotOpenLocked()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void recyclePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Long longForQuery(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Long longForQuery(io.requery.android.database.sqlite.SQLiteStatement,[Ljava.lang.String;)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Long longForQuery(io.requery.android.database.sqlite.SQLiteStatement,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteProgram:void bindAllArgsAsStrings([Ljava.lang.String;)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Long longForQuery(io.requery.android.database.sqlite.SQLiteStatement,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteStatement:java.lang.Long simpleQueryForLong()
io.requery.android.database.sqlite.SQLiteStatement:java.lang.Long simpleQueryForLong()->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteStatement:java.lang.Long simpleQueryForLong()->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()
io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteStatement:java.lang.Long simpleQueryForLong()->io.requery.android.database.sqlite.SQLiteProgram:java.lang.String getSql()
io.requery.android.database.sqlite.SQLiteStatement:java.lang.Long simpleQueryForLong()->io.requery.android.database.sqlite.SQLiteProgram:void getBindArgs()
io.requery.android.database.sqlite.SQLiteStatement:java.lang.Long simpleQueryForLong()->io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()
io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteStatement:java.lang.Long simpleQueryForLong()->io.requery.android.database.sqlite.SQLiteSession:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void recyclePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteStatement:java.lang.Long simpleQueryForLong()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Long longForQuery(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()
io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()->io.requery.android.database.sqlite.SQLiteProgram:void clearBindings()
io.requery.android.database.sqlite.SQLiteOpenHelper:io.requery.android.database.sqlite.SQLiteDatabase getDatabaseLocked(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isReadOnly()
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isReadOnly()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isReadOnlyLocked()
com.ichi2.libanki.Storage:com.ichi2.libanki.Collection Collection(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.Boolean,java.lang.Boolean)->com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()->com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatHelper getInstance()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatHelper getInstance()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.libanki.Storage:com.ichi2.libanki.Collection Collection(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.Boolean,java.lang.Boolean)->com.ichi2.compat.CompatV16:void disableDatabaseWriteAheadLogging(io.requery.android.database.sqlite.SQLiteDatabase)
com.ichi2.compat.CompatV16:void disableDatabaseWriteAheadLogging(io.requery.android.database.sqlite.SQLiteDatabase)->com.ichi2.compat.CompatV16:[Z $jacocoInit()
com.ichi2.compat.CompatV16:void disableDatabaseWriteAheadLogging(io.requery.android.database.sqlite.SQLiteDatabase)->io.requery.android.database.sqlite.SQLiteDatabase:void disableWriteAheadLogging()
io.requery.android.database.sqlite.SQLiteDatabase:void disableWriteAheadLogging()->io.requery.android.database.sqlite.SQLiteDatabase:void throwIfNotOpenLocked()
com.ichi2.libanki.Storage:com.ichi2.libanki.Collection Collection(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.Boolean,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void recyclePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteProgram:[Ljava.lang.String; getColumnNames()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
com.ichi2.libanki.Storage:com.ichi2.libanki.Collection Collection(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Storage:java.lang.Integer _upgradeSchema(com.ichi2.libanki.DB)
com.ichi2.libanki.Storage:java.lang.Integer _upgradeSchema(com.ichi2.libanki.DB)->com.ichi2.libanki.Storage:[Z $jacocoInit()
com.ichi2.libanki.Storage:java.lang.Integer _upgradeSchema(com.ichi2.libanki.DB)->com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String)
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String)->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String)->com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteProgram:[Ljava.lang.String; getColumnNames()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()->io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.String getPath()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void clearOrCreateWindow(java.lang.String)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer cursorPickFillWindowStartPosition(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()
io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.String getSql()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:void getBindArgs()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()
io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:void setStartPosition(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteCursor:void close()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.AbstractCursor:void close()
io.requery.android.database.AbstractCursor:void close()->io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractWindowedCursor:void closeWindow()
io.requery.android.database.AbstractWindowedCursor:void closeWindow()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.CursorWindow:void onAllReferencesReleased()
io.requery.android.database.CursorWindow:void onAllReferencesReleased()->io.requery.android.database.CursorWindow:void dispose()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()
io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()->io.requery.android.database.sqlite.SQLiteProgram:void clearBindings()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:void cursorClosed()
com.ichi2.libanki.Storage:com.ichi2.libanki.Collection Collection(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.DB:void execute(java.lang.String)
com.ichi2.libanki.DB:void execute(java.lang.String)->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.DB:void execute(java.lang.String)->com.ichi2.libanki.DB:void execute(java.lang.String,[Ljava.lang.Object;)
com.ichi2.libanki.DB:void execute(java.lang.String,[Ljava.lang.Object;)->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.DB:void execute(java.lang.String,[Ljava.lang.Object;)->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.DB:void execute(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:void execSQL(java.lang.String)
io.requery.android.database.sqlite.SQLiteDatabase:void execSQL(java.lang.String)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer executeSql(java.lang.String,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer executeSql(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer executeSql(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer executeSql(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer executeSql(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer executeSql(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void recyclePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer executeSql(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteStatement:java.lang.Integer executeUpdateDelete()
io.requery.android.database.sqlite.SQLiteStatement:java.lang.Integer executeUpdateDelete()->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteStatement:java.lang.Integer executeUpdateDelete()->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()
io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteStatement:java.lang.Integer executeUpdateDelete()->io.requery.android.database.sqlite.SQLiteProgram:java.lang.String getSql()
io.requery.android.database.sqlite.SQLiteStatement:java.lang.Integer executeUpdateDelete()->io.requery.android.database.sqlite.SQLiteProgram:void getBindArgs()
io.requery.android.database.sqlite.SQLiteStatement:java.lang.Integer executeUpdateDelete()->io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()
io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteStatement:java.lang.Integer executeUpdateDelete()->io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForChangedRowCount(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForChangedRowCount(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForChangedRowCount(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForChangedRowCount(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForChangedRowCount(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForChangedRowCount(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForChangedRowCount(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForChangedRowCount(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForChangedRowCount(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForChangedRowCount(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForChangedRowCount(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForChangedRowCount(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void recyclePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForChangedRowCount(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteStatement:java.lang.Integer executeUpdateDelete()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer executeSql(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()
io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()->io.requery.android.database.sqlite.SQLiteProgram:void clearBindings()
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer executeSql(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
com.ichi2.libanki.Storage:com.ichi2.libanki.Collection Collection(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Storage:com.ichi2.libanki.Collection Collection(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Collection:void _openLog()
com.ichi2.libanki.Collection:void _openLog()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Storage:com.ichi2.libanki.Collection Collection(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.Boolean,java.lang.Boolean)->com.ichi2.utils.VersionUtils:java.lang.String getPkgVersionName()
com.ichi2.utils.VersionUtils:java.lang.String getPkgVersionName()->com.ichi2.utils.VersionUtils:[Z $jacocoInit()
com.ichi2.utils.VersionUtils:java.lang.String getPkgVersionName()->com.ichi2.anki.AnkiDroidApp:com.ichi2.anki.AnkiDroidApp getInstance()
com.ichi2.anki.AnkiDroidApp:com.ichi2.anki.AnkiDroidApp getInstance()->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.libanki.Storage:com.ichi2.libanki.Collection Collection(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Collection:void log([Ljava.lang.Object;)
com.ichi2.libanki.Collection:void log([Ljava.lang.Object;)->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Collection:void log([Ljava.lang.Object;)->com.ichi2.libanki.Utils:java.lang.Long intNow()
com.ichi2.libanki.Utils:java.lang.Long intNow()->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.Long intNow()->com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)
com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)->com.ichi2.libanki.Utils:java.lang.Double now()
com.ichi2.libanki.Utils:java.lang.Double now()->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Storage:com.ichi2.libanki.Collection Collection(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Collection:void clearUndo()
com.ichi2.libanki.Collection:void clearUndo()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Storage:com.ichi2.libanki.Collection Collection(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Media:[Z $jacocoInit()
com.ichi2.libanki.Storage:com.ichi2.libanki.Collection Collection(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Collection:java.lang.String getPath()
com.ichi2.libanki.Collection:java.lang.String getPath()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Storage:com.ichi2.libanki.Collection Collection(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Media:void connect()
com.ichi2.libanki.Media:void connect()->com.ichi2.libanki.Media:[Z $jacocoInit()
com.ichi2.libanki.Media:void connect()->com.ichi2.libanki.Collection:java.lang.Boolean getServer()
com.ichi2.libanki.Collection:java.lang.Boolean getServer()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Media:void connect()->com.ichi2.libanki.Media:java.lang.String dir()
com.ichi2.libanki.Media:java.lang.String dir()->com.ichi2.libanki.Media:[Z $jacocoInit()
com.ichi2.libanki.Media:void connect()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.Media:void connect()->com.ichi2.anki.AnkiDroidApp:com.ichi2.anki.AnkiDroidApp getInstance()
com.ichi2.anki.AnkiDroidApp:com.ichi2.anki.AnkiDroidApp getInstance()->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.libanki.Media:void connect()->com.ichi2.libanki.DB:com.ichi2.libanki.DB$SupportSQLiteOpenHelperCallback getDBCallback()
com.ichi2.libanki.DB:com.ichi2.libanki.DB$SupportSQLiteOpenHelperCallback getDBCallback()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.Media:void connect()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.RequerySQLiteOpenHelperFactory getSqliteOpenHelperFactory()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.RequerySQLiteOpenHelperFactory getSqliteOpenHelperFactory()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.Media:void connect()->io.requery.android.database.sqlite.SQLiteOpenHelper:io.requery.android.database.sqlite.SQLiteDatabase getWritableDatabase()
io.requery.android.database.sqlite.SQLiteOpenHelper:io.requery.android.database.sqlite.SQLiteDatabase getWritableDatabase()->io.requery.android.database.sqlite.SQLiteOpenHelper:io.requery.android.database.sqlite.SQLiteDatabase getWritableDatabase()
io.requery.android.database.sqlite.SQLiteOpenHelper:io.requery.android.database.sqlite.SQLiteDatabase getWritableDatabase()->io.requery.android.database.sqlite.SQLiteOpenHelper:io.requery.android.database.sqlite.SQLiteDatabase getDatabaseLocked(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteOpenHelper:io.requery.android.database.sqlite.SQLiteDatabase getDatabaseLocked(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteOpenHelper:io.requery.android.database.sqlite.SQLiteDatabaseConfiguration createConfiguration(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteOpenHelper:io.requery.android.database.sqlite.SQLiteDatabaseConfiguration createConfiguration(java.lang.String,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.String stripPathForLogs(java.lang.String)
io.requery.android.database.sqlite.SQLiteOpenHelper:io.requery.android.database.sqlite.SQLiteDatabase getDatabaseLocked(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteDatabase openDatabase(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration,io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,io.requery.android.database.sqlite.RequerySQLiteOpenHelperFactory$CallbackDatabaseErrorHandler)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteDatabase openDatabase(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration,io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,io.requery.android.database.sqlite.RequerySQLiteOpenHelperFactory$CallbackDatabaseErrorHandler)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteDatabase openDatabase(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration,io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,io.requery.android.database.sqlite.RequerySQLiteOpenHelperFactory$CallbackDatabaseErrorHandler)->io.requery.android.database.sqlite.SQLiteDatabase:void open()
io.requery.android.database.sqlite.SQLiteDatabase:void open()->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteDatabase:void open()->io.requery.android.database.sqlite.SQLiteDatabase:void ensureFile(java.lang.String)
io.requery.android.database.sqlite.SQLiteDatabase:void open()->io.requery.android.database.sqlite.SQLiteDatabase:void openInner()
io.requery.android.database.sqlite.SQLiteDatabase:void openInner()->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnectionPool open(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnectionPool open(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnectionPool open(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:void updateParametersFrom(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnectionPool open(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration)->io.requery.android.database.sqlite.SQLiteConnectionPool:void setMaxConnectionPoolSizeLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:void setMaxConnectionPoolSizeLocked()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean hasCodec()
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean hasCodec()->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean hasCodec()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnectionPool open(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration)->io.requery.android.database.sqlite.SQLiteConnectionPool:void open()
io.requery.android.database.sqlite.SQLiteConnectionPool:void open()->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection openConnectionLocked(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection openConnectionLocked(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection open(io.requery.android.database.sqlite.SQLiteConnectionPool,io.requery.android.database.sqlite.SQLiteDatabaseConfiguration,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection open(io.requery.android.database.sqlite.SQLiteConnectionPool,io.requery.android.database.sqlite.SQLiteDatabaseConfiguration,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection open(io.requery.android.database.sqlite.SQLiteConnectionPool,io.requery.android.database.sqlite.SQLiteDatabaseConfiguration,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:void updateParametersFrom(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection open(io.requery.android.database.sqlite.SQLiteConnectionPool,io.requery.android.database.sqlite.SQLiteDatabaseConfiguration,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.CloseGuard:void open(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection open(io.requery.android.database.sqlite.SQLiteConnectionPool,io.requery.android.database.sqlite.SQLiteDatabaseConfiguration,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteConnection:void open()
io.requery.android.database.sqlite.SQLiteConnection:void open()->io.requery.android.database.sqlite.SQLiteConnection:void setPageSize()
io.requery.android.database.sqlite.SQLiteConnection:void setPageSize()->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:void setPageSize()->io.requery.android.database.sqlite.SQLiteGlobal:java.lang.Integer getDefaultPageSize()
io.requery.android.database.sqlite.SQLiteConnection:void setPageSize()->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void recyclePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void open()->io.requery.android.database.sqlite.SQLiteConnection:void setForeignKeyModeFromConfiguration()
io.requery.android.database.sqlite.SQLiteConnection:void setForeignKeyModeFromConfiguration()->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void recyclePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void open()->io.requery.android.database.sqlite.SQLiteConnection:void setJournalSizeLimit()
io.requery.android.database.sqlite.SQLiteConnection:void setJournalSizeLimit()->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:void setJournalSizeLimit()->io.requery.android.database.sqlite.SQLiteGlobal:java.lang.Integer getJournalSizeLimit()
io.requery.android.database.sqlite.SQLiteConnection:void setJournalSizeLimit()->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void recyclePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void setJournalSizeLimit()->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void recyclePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void open()->io.requery.android.database.sqlite.SQLiteConnection:void setAutoCheckpointInterval()
io.requery.android.database.sqlite.SQLiteConnection:void setAutoCheckpointInterval()->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:void setAutoCheckpointInterval()->io.requery.android.database.sqlite.SQLiteGlobal:java.lang.Integer getWALAutoCheckpoint()
io.requery.android.database.sqlite.SQLiteConnection:void setAutoCheckpointInterval()->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void recyclePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void setAutoCheckpointInterval()->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void recyclePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void open()->io.requery.android.database.sqlite.SQLiteConnection:void setWalModeFromConfiguration()
io.requery.android.database.sqlite.SQLiteConnection:void setWalModeFromConfiguration()->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:void setWalModeFromConfiguration()->io.requery.android.database.sqlite.SQLiteGlobal:java.lang.String getDefaultJournalMode()
io.requery.android.database.sqlite.SQLiteConnection:void setWalModeFromConfiguration()->io.requery.android.database.sqlite.SQLiteConnection:void setJournalMode(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:void setJournalMode(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void recyclePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void setJournalMode(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void recyclePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void setWalModeFromConfiguration()->io.requery.android.database.sqlite.SQLiteGlobal:java.lang.String getDefaultSyncMode()
io.requery.android.database.sqlite.SQLiteConnection:void setWalModeFromConfiguration()->io.requery.android.database.sqlite.SQLiteConnection:void setSyncMode(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:void setSyncMode(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void recyclePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void setSyncMode(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.String canonicalizeSyncMode(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:void setSyncMode(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.String canonicalizeSyncMode(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:void open()->io.requery.android.database.sqlite.SQLiteConnection:void setLocaleFromConfiguration()
io.requery.android.database.sqlite.SQLiteConnection:void setLocaleFromConfiguration()->io.requery.android.database.sqlite.SQLiteConnection:void execute(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:void execute(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:void execute(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void execute(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:void execute(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:void execute(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:void execute(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:void execute(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void recyclePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void setLocaleFromConfiguration()->io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.String executeForString(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnectionPool:void open()->io.requery.android.database.sqlite.CloseGuard:void open(java.lang.String)
io.requery.android.database.sqlite.SQLiteDatabase:void openInner()->io.requery.android.database.sqlite.CloseGuard:void open(java.lang.String)
io.requery.android.database.sqlite.SQLiteOpenHelper:io.requery.android.database.sqlite.SQLiteDatabase getDatabaseLocked(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getVersion()
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getVersion()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Long longForQuery(java.lang.String,[Ljava.lang.String;)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Long longForQuery(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession createSession()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession createSession()->io.requery.android.database.sqlite.SQLiteDatabase:void throwIfNotOpenLocked()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void recyclePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Long longForQuery(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Long longForQuery(io.requery.android.database.sqlite.SQLiteStatement,[Ljava.lang.String;)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Long longForQuery(io.requery.android.database.sqlite.SQLiteStatement,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteProgram:void bindAllArgsAsStrings([Ljava.lang.String;)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Long longForQuery(io.requery.android.database.sqlite.SQLiteStatement,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteStatement:java.lang.Long simpleQueryForLong()
io.requery.android.database.sqlite.SQLiteStatement:java.lang.Long simpleQueryForLong()->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteStatement:java.lang.Long simpleQueryForLong()->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()
io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteStatement:java.lang.Long simpleQueryForLong()->io.requery.android.database.sqlite.SQLiteProgram:java.lang.String getSql()
io.requery.android.database.sqlite.SQLiteStatement:java.lang.Long simpleQueryForLong()->io.requery.android.database.sqlite.SQLiteProgram:void getBindArgs()
io.requery.android.database.sqlite.SQLiteStatement:java.lang.Long simpleQueryForLong()->io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()
io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteStatement:java.lang.Long simpleQueryForLong()->io.requery.android.database.sqlite.SQLiteSession:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void recyclePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Long executeForLong(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteStatement:java.lang.Long simpleQueryForLong()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Long longForQuery(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()
io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()->io.requery.android.database.sqlite.SQLiteProgram:void clearBindings()
io.requery.android.database.sqlite.SQLiteOpenHelper:io.requery.android.database.sqlite.SQLiteDatabase getDatabaseLocked(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isReadOnly()
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isReadOnly()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isReadOnlyLocked()
com.ichi2.libanki.Media:void connect()->com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()->com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatHelper getInstance()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatHelper getInstance()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.libanki.Media:void connect()->com.ichi2.compat.CompatV16:void disableDatabaseWriteAheadLogging(io.requery.android.database.sqlite.SQLiteDatabase)
com.ichi2.compat.CompatV16:void disableDatabaseWriteAheadLogging(io.requery.android.database.sqlite.SQLiteDatabase)->com.ichi2.compat.CompatV16:[Z $jacocoInit()
com.ichi2.compat.CompatV16:void disableDatabaseWriteAheadLogging(io.requery.android.database.sqlite.SQLiteDatabase)->io.requery.android.database.sqlite.SQLiteDatabase:void disableWriteAheadLogging()
io.requery.android.database.sqlite.SQLiteDatabase:void disableWriteAheadLogging()->io.requery.android.database.sqlite.SQLiteDatabase:void throwIfNotOpenLocked()
com.ichi2.libanki.Media:void connect()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void recyclePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteProgram:[Ljava.lang.String; getColumnNames()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
com.ichi2.libanki.Media:void connect()->com.ichi2.libanki.Media:void maybeUpgrade()
com.ichi2.libanki.Media:void maybeUpgrade()->com.ichi2.libanki.Media:[Z $jacocoInit()
com.ichi2.libanki.Media:void maybeUpgrade()->com.ichi2.libanki.Media:java.lang.String dir()
com.ichi2.libanki.Media:java.lang.String dir()->com.ichi2.libanki.Media:[Z $jacocoInit()
com.ichi2.libanki.Storage:com.ichi2.libanki.Collection Collection(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.libanki.Storage:com.ichi2.libanki.Collection Collection(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Storage:com.ichi2.libanki.Collection Collection(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Tags:[Z $jacocoInit()
com.ichi2.libanki.Storage:com.ichi2.libanki.Collection Collection(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Collection:void load()
com.ichi2.libanki.Collection:void load()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Collection:void load()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.Collection:void load()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteProgram:[Ljava.lang.String; getColumnNames()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
com.ichi2.libanki.Collection:void load()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToFirst()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToFirst()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()->io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.String getPath()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void clearOrCreateWindow(java.lang.String)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer cursorPickFillWindowStartPosition(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()
io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.String getSql()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:void getBindArgs()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()
io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:void setStartPosition(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
com.ichi2.libanki.Collection:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Collection:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Collection:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Collection:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Collection:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Collection:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Collection:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.String getString(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.String getString(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.String getString(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.String getString(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Collection:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.String getString(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.String getString(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.String getString(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.String getString(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Collection:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.String getString(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.String getString(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.String getString(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.String getString(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Collection:void load()->com.ichi2.libanki.Tags:void load(java.lang.String)
com.ichi2.libanki.Tags:void load(java.lang.String)->com.ichi2.libanki.Tags:[Z $jacocoInit()
com.ichi2.libanki.Collection:void load()->io.requery.android.database.sqlite.SQLiteCursor:void close()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.AbstractCursor:void close()
io.requery.android.database.AbstractCursor:void close()->io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractWindowedCursor:void closeWindow()
io.requery.android.database.AbstractWindowedCursor:void closeWindow()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.CursorWindow:void onAllReferencesReleased()
io.requery.android.database.CursorWindow:void onAllReferencesReleased()->io.requery.android.database.CursorWindow:void dispose()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()
io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()->io.requery.android.database.sqlite.SQLiteProgram:void clearBindings()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:void cursorClosed()
com.ichi2.libanki.Collection:void load()->com.ichi2.libanki.Collection:java.lang.String loadColumn(java.lang.String)
com.ichi2.libanki.Collection:java.lang.String loadColumn(java.lang.String)->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Collection:java.lang.String loadColumn(java.lang.String)->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.Collection:java.lang.String loadColumn(java.lang.String)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.String;)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.String;,java.lang.String,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.String;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.String;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.String;)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.String;)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteProgram:[Ljava.lang.String; getColumnNames()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.String;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
com.ichi2.libanki.Collection:java.lang.String loadColumn(java.lang.String)->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToFirst()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToFirst()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()->io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.String getPath()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void clearOrCreateWindow(java.lang.String)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer cursorPickFillWindowStartPosition(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()
io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.String getSql()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:[Ljava.lang.Object; getBindArgs()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()
io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer getTypeOfObject(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer getTypeOfObject(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:void setStartPosition(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
com.ichi2.libanki.Collection:java.lang.String loadColumn(java.lang.String)->io.requery.android.database.AbstractWindowedCursor:java.lang.String getString(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.String getString(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.String getString(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.String getString(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Collection:java.lang.String loadColumn(java.lang.String)->io.requery.android.database.sqlite.SQLiteCursor:void close()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.AbstractCursor:void close()
io.requery.android.database.AbstractCursor:void close()->io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractWindowedCursor:void closeWindow()
io.requery.android.database.AbstractWindowedCursor:void closeWindow()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.CursorWindow:void onAllReferencesReleased()
io.requery.android.database.CursorWindow:void onAllReferencesReleased()->io.requery.android.database.CursorWindow:void dispose()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()
io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()->io.requery.android.database.sqlite.SQLiteProgram:void clearBindings()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:void cursorClosed()
com.ichi2.libanki.Collection:void load()->com.ichi2.libanki.Models:void load(java.lang.String)
com.ichi2.libanki.Models:void load(java.lang.String)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.libanki.Collection:void load()->com.ichi2.libanki.Collection:java.lang.String loadColumn(java.lang.String)
com.ichi2.libanki.Collection:java.lang.String loadColumn(java.lang.String)->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Collection:java.lang.String loadColumn(java.lang.String)->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.Collection:java.lang.String loadColumn(java.lang.String)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.String;)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.String;,java.lang.String,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.String;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.String;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.String;)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.String;)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteProgram:[Ljava.lang.String; getColumnNames()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.String;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
com.ichi2.libanki.Collection:java.lang.String loadColumn(java.lang.String)->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToFirst()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToFirst()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()->io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.String getPath()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void clearOrCreateWindow(java.lang.String)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer cursorPickFillWindowStartPosition(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()
io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.String getSql()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:[Ljava.lang.Object; getBindArgs()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()
io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer getTypeOfObject(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer getTypeOfObject(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:void setStartPosition(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
com.ichi2.libanki.Collection:java.lang.String loadColumn(java.lang.String)->io.requery.android.database.AbstractWindowedCursor:java.lang.String getString(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.String getString(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.String getString(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.String getString(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Collection:java.lang.String loadColumn(java.lang.String)->io.requery.android.database.sqlite.SQLiteCursor:void close()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.AbstractCursor:void close()
io.requery.android.database.AbstractCursor:void close()->io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractWindowedCursor:void closeWindow()
io.requery.android.database.AbstractWindowedCursor:void closeWindow()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.CursorWindow:void onAllReferencesReleased()
io.requery.android.database.CursorWindow:void onAllReferencesReleased()->io.requery.android.database.CursorWindow:void dispose()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()
io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()->io.requery.android.database.sqlite.SQLiteProgram:void clearBindings()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:void cursorClosed()
com.ichi2.libanki.Collection:void load()->com.ichi2.libanki.Decks:void load(java.lang.String,java.lang.String)
com.ichi2.libanki.Decks:void load(java.lang.String,java.lang.String)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Storage:com.ichi2.libanki.Collection Collection(com.ichi2.anki.DeckPicker,java.lang.String,java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Collection:void _loadScheduler()
com.ichi2.libanki.Collection:void _loadScheduler()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Collection:void _loadScheduler()->com.ichi2.libanki.Collection:java.lang.Integer schedVer()
com.ichi2.libanki.Collection:java.lang.Integer schedVer()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Collection:void _loadScheduler()->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Collection:void _loadScheduler()->com.ichi2.libanki.Sched:void _updateCutoff()
com.ichi2.libanki.Sched:void _updateCutoff()->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _updateCutoff()->com.ichi2.libanki.Utils:java.lang.Double now()
com.ichi2.libanki.Utils:java.lang.Double now()->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _updateCutoff()->com.ichi2.libanki.Collection:java.lang.Long getCrt()
com.ichi2.libanki.Collection:java.lang.Long getCrt()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _updateCutoff()->com.ichi2.libanki.Collection:java.lang.Long getCrt()
com.ichi2.libanki.Collection:java.lang.Long getCrt()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _updateCutoff()->com.ichi2.libanki.Collection:void log([Ljava.lang.Object;)
com.ichi2.libanki.Collection:void log([Ljava.lang.Object;)->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Collection:void log([Ljava.lang.Object;)->com.ichi2.libanki.Utils:java.lang.Long intNow()
com.ichi2.libanki.Utils:java.lang.Long intNow()->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.Long intNow()->com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)
com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)->com.ichi2.libanki.Utils:java.lang.Double now()
com.ichi2.libanki.Utils:java.lang.Double now()->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _updateCutoff()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _updateCutoff()->com.ichi2.libanki.Decks:java.util.ArrayList all()
com.ichi2.libanki.Decks:java.util.ArrayList all()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _updateCutoff()->com.ichi2.libanki.Sched:void update(org.json.JSONObject)
com.ichi2.libanki.Sched:void update(org.json.JSONObject)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _updateCutoff()->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onCreate(android.os.Bundle)->com.ichi2.anki.AnkiActivity:void onCreate(android.os.Bundle)
com.ichi2.anki.AnkiActivity:void onCreate(android.os.Bundle)->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void onCreate(android.os.Bundle)->com.ichi2.themes.Themes:void setTheme(com.ichi2.anki.DeckPicker)
com.ichi2.themes.Themes:void setTheme(com.ichi2.anki.DeckPicker)->com.ichi2.themes.Themes:[Z $jacocoInit()
com.ichi2.themes.Themes:void setTheme(com.ichi2.anki.DeckPicker)->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.AnkiDroidApp)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.AnkiDroidApp)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void onCreate(android.os.Bundle)->com.ichi2.compat.customtabs.CustomTabActivityHelper:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onCreate(android.os.Bundle)->com.getbase.floatingactionbutton.FloatingActionsMenu:void init(com.ichi2.anki.DeckPicker,android.content.res.XmlBlock$Parser)
com.getbase.floatingactionbutton.FloatingActionsMenu:void init(com.ichi2.anki.DeckPicker,android.content.res.XmlBlock$Parser)->com.getbase.floatingactionbutton.FloatingActionsMenu:java.lang.Integer getColor(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionsMenu:void init(com.ichi2.anki.DeckPicker,android.content.res.XmlBlock$Parser)->com.getbase.floatingactionbutton.FloatingActionsMenu:java.lang.Integer getColor(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionsMenu:void init(com.ichi2.anki.DeckPicker,android.content.res.XmlBlock$Parser)->com.getbase.floatingactionbutton.FloatingActionsMenu:java.lang.Integer getColor(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionsMenu:void init(com.ichi2.anki.DeckPicker,android.content.res.XmlBlock$Parser)->com.getbase.floatingactionbutton.FloatingActionsMenu:java.lang.Boolean expandsHorizontally()
com.getbase.floatingactionbutton.FloatingActionsMenu:void init(com.ichi2.anki.DeckPicker,android.content.res.XmlBlock$Parser)->com.getbase.floatingactionbutton.FloatingActionsMenu:void createAddButton(com.ichi2.anki.DeckPicker)
com.getbase.floatingactionbutton.FloatingActionsMenu:void createAddButton(com.ichi2.anki.DeckPicker)->com.getbase.floatingactionbutton.AddFloatingActionButton:void init(com.ichi2.anki.DeckPicker,android.util.AttributeSet)
com.getbase.floatingactionbutton.AddFloatingActionButton:void init(com.ichi2.anki.DeckPicker,android.util.AttributeSet)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer getColor(java.lang.Integer)
com.getbase.floatingactionbutton.AddFloatingActionButton:void init(com.ichi2.anki.DeckPicker,android.util.AttributeSet)->com.getbase.floatingactionbutton.FloatingActionButton:void init(com.ichi2.anki.DeckPicker,android.util.AttributeSet)
com.getbase.floatingactionbutton.FloatingActionButton:void init(com.ichi2.anki.DeckPicker,android.util.AttributeSet)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer getColor(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:void init(com.ichi2.anki.DeckPicker,android.util.AttributeSet)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer getColor(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:void init(com.ichi2.anki.DeckPicker,android.util.AttributeSet)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer getColor(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:void init(com.ichi2.anki.DeckPicker,android.util.AttributeSet)->com.getbase.floatingactionbutton.FloatingActionButton:void updateCircleSize()
com.getbase.floatingactionbutton.FloatingActionButton:void updateCircleSize()->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Float getDimension(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:void init(com.ichi2.anki.DeckPicker,android.util.AttributeSet)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Float getDimension(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:void init(com.ichi2.anki.DeckPicker,android.util.AttributeSet)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Float getDimension(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:void init(com.ichi2.anki.DeckPicker,android.util.AttributeSet)->com.getbase.floatingactionbutton.FloatingActionButton:void updateDrawableSize()
com.getbase.floatingactionbutton.FloatingActionButton:void init(com.ichi2.anki.DeckPicker,android.util.AttributeSet)->com.getbase.floatingactionbutton.FloatingActionsMenu:java.lang.Integer access$000(com.getbase.floatingactionbutton.FloatingActionsMenu)
com.getbase.floatingactionbutton.FloatingActionButton:void init(com.ichi2.anki.DeckPicker,android.util.AttributeSet)->com.getbase.floatingactionbutton.FloatingActionsMenu:java.lang.Integer access$100(com.getbase.floatingactionbutton.FloatingActionsMenu)
com.getbase.floatingactionbutton.FloatingActionButton:void init(com.ichi2.anki.DeckPicker,android.util.AttributeSet)->com.getbase.floatingactionbutton.FloatingActionsMenu:java.lang.Integer access$200(com.getbase.floatingactionbutton.FloatingActionsMenu)
com.getbase.floatingactionbutton.FloatingActionButton:void init(com.ichi2.anki.DeckPicker,android.util.AttributeSet)->com.getbase.floatingactionbutton.FloatingActionsMenu:java.lang.Boolean access$300(com.getbase.floatingactionbutton.FloatingActionsMenu)
com.getbase.floatingactionbutton.FloatingActionButton:void init(com.ichi2.anki.DeckPicker,android.util.AttributeSet)->com.getbase.floatingactionbutton.FloatingActionButton:void updateBackground()
com.getbase.floatingactionbutton.FloatingActionButton:void updateBackground()->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Float getDimension(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:void updateBackground()->com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.StateListDrawable createFillDrawable(java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.StateListDrawable createFillDrawable(java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.LayerDrawable createCircleDrawable(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.LayerDrawable createCircleDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer opaque(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.LayerDrawable createCircleDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer darkenColor(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer darkenColor(java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer adjustColorBrightness(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer halfTransparent(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer lightenColor(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer lightenColor(java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer adjustColorBrightness(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer halfTransparent(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.StateListDrawable createFillDrawable(java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.LayerDrawable createCircleDrawable(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.LayerDrawable createCircleDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer opaque(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.LayerDrawable createCircleDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer darkenColor(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer darkenColor(java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer adjustColorBrightness(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer halfTransparent(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer lightenColor(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer lightenColor(java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer adjustColorBrightness(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer halfTransparent(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.StateListDrawable createFillDrawable(java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.LayerDrawable createCircleDrawable(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.LayerDrawable createCircleDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer opaque(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.LayerDrawable createCircleDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer darkenColor(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer darkenColor(java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer adjustColorBrightness(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer halfTransparent(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer lightenColor(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer lightenColor(java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer adjustColorBrightness(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer halfTransparent(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:void updateBackground()->com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createOuterStrokeDrawable(java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createOuterStrokeDrawable(java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer opacityToAlpha(java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:void updateBackground()->com.getbase.floatingactionbutton.AddFloatingActionButton:android.graphics.drawable.ShapeDrawable getIconDrawable()
com.getbase.floatingactionbutton.AddFloatingActionButton:android.graphics.drawable.ShapeDrawable getIconDrawable()->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Float getDimension(java.lang.Integer)
com.getbase.floatingactionbutton.AddFloatingActionButton:android.graphics.drawable.ShapeDrawable getIconDrawable()->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Float getDimension(java.lang.Integer)
com.getbase.floatingactionbutton.AddFloatingActionButton:android.graphics.drawable.ShapeDrawable getIconDrawable()->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Float getDimension(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:void updateBackground()->com.getbase.floatingactionbutton.FloatingActionsMenu:com.getbase.floatingactionbutton.FloatingActionsMenu$RotatingDrawable access$402(com.getbase.floatingactionbutton.FloatingActionsMenu,com.getbase.floatingactionbutton.FloatingActionsMenu$RotatingDrawable)
com.getbase.floatingactionbutton.FloatingActionButton:void updateBackground()->com.getbase.floatingactionbutton.FloatingActionsMenu:android.animation.AnimatorSet access$500(com.getbase.floatingactionbutton.FloatingActionsMenu)
com.getbase.floatingactionbutton.FloatingActionButton:void updateBackground()->com.getbase.floatingactionbutton.FloatingActionsMenu:android.animation.AnimatorSet access$600(com.getbase.floatingactionbutton.FloatingActionsMenu)
com.getbase.floatingactionbutton.FloatingActionButton:void updateBackground()->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Float getDimension(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:void updateBackground()->com.getbase.floatingactionbutton.FloatingActionButton:void setBackgroundCompat(android.graphics.drawable.LayerDrawable)
com.getbase.floatingactionbutton.FloatingActionsMenu:void createAddButton(com.ichi2.anki.DeckPicker)->com.getbase.floatingactionbutton.FloatingActionButton:void setSize(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionsMenu:void createAddButton(com.ichi2.anki.DeckPicker)->com.getbase.floatingactionbutton.FloatingActionsMenu:java.lang.Boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)
com.ichi2.anki.DeckPicker:void onCreate(android.os.Bundle)->com.ichi2.anki.widgets.FabBehavior:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onCreate(android.os.Bundle)->com.getbase.floatingactionbutton.FloatingActionButton:void init(com.ichi2.anki.DeckPicker,android.content.res.XmlBlock$Parser)
com.getbase.floatingactionbutton.FloatingActionButton:void init(com.ichi2.anki.DeckPicker,android.content.res.XmlBlock$Parser)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer getColor(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:void init(com.ichi2.anki.DeckPicker,android.content.res.XmlBlock$Parser)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer getColor(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:void init(com.ichi2.anki.DeckPicker,android.content.res.XmlBlock$Parser)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer getColor(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:void init(com.ichi2.anki.DeckPicker,android.content.res.XmlBlock$Parser)->com.getbase.floatingactionbutton.FloatingActionButton:void updateCircleSize()
com.getbase.floatingactionbutton.FloatingActionButton:void updateCircleSize()->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Float getDimension(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:void init(com.ichi2.anki.DeckPicker,android.content.res.XmlBlock$Parser)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Float getDimension(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:void init(com.ichi2.anki.DeckPicker,android.content.res.XmlBlock$Parser)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Float getDimension(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:void init(com.ichi2.anki.DeckPicker,android.content.res.XmlBlock$Parser)->com.getbase.floatingactionbutton.FloatingActionButton:void updateDrawableSize()
com.getbase.floatingactionbutton.FloatingActionButton:void init(com.ichi2.anki.DeckPicker,android.content.res.XmlBlock$Parser)->com.getbase.floatingactionbutton.FloatingActionButton:void updateBackground()
com.getbase.floatingactionbutton.FloatingActionButton:void updateBackground()->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Float getDimension(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:void updateBackground()->com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.StateListDrawable createFillDrawable(java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.StateListDrawable createFillDrawable(java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.LayerDrawable createCircleDrawable(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.LayerDrawable createCircleDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer opaque(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.LayerDrawable createCircleDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer darkenColor(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer darkenColor(java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer adjustColorBrightness(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer halfTransparent(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer lightenColor(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer lightenColor(java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer adjustColorBrightness(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer halfTransparent(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.StateListDrawable createFillDrawable(java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.LayerDrawable createCircleDrawable(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.LayerDrawable createCircleDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer opaque(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.LayerDrawable createCircleDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer darkenColor(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer darkenColor(java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer adjustColorBrightness(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer halfTransparent(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer lightenColor(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer lightenColor(java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer adjustColorBrightness(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer halfTransparent(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.StateListDrawable createFillDrawable(java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.LayerDrawable createCircleDrawable(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.LayerDrawable createCircleDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer opaque(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.LayerDrawable createCircleDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer darkenColor(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer darkenColor(java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer adjustColorBrightness(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer halfTransparent(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer lightenColor(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer lightenColor(java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer adjustColorBrightness(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer halfTransparent(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:void updateBackground()->com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createOuterStrokeDrawable(java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createOuterStrokeDrawable(java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer opacityToAlpha(java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:void updateBackground()->com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.BitmapDrawable getIconDrawable()
com.getbase.floatingactionbutton.FloatingActionButton:void updateBackground()->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Float getDimension(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:void updateBackground()->com.getbase.floatingactionbutton.FloatingActionButton:void setBackgroundCompat(android.graphics.drawable.LayerDrawable)
com.ichi2.anki.DeckPicker:void onCreate(android.os.Bundle)->com.getbase.floatingactionbutton.FloatingActionsMenu:com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams generateLayoutParams(android.content.res.XmlBlock$Parser)
com.getbase.floatingactionbutton.FloatingActionsMenu:com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams generateLayoutParams(android.content.res.XmlBlock$Parser)->com.getbase.floatingactionbutton.FloatingActionsMenu:android.view.animation.OvershootInterpolator access$900()
com.getbase.floatingactionbutton.FloatingActionsMenu:com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams generateLayoutParams(android.content.res.XmlBlock$Parser)->com.getbase.floatingactionbutton.FloatingActionsMenu:android.view.animation.DecelerateInterpolator access$1000()
com.getbase.floatingactionbutton.FloatingActionsMenu:com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams generateLayoutParams(android.content.res.XmlBlock$Parser)->com.getbase.floatingactionbutton.FloatingActionsMenu:android.view.animation.DecelerateInterpolator access$1100()
com.getbase.floatingactionbutton.FloatingActionsMenu:com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams generateLayoutParams(android.content.res.XmlBlock$Parser)->com.getbase.floatingactionbutton.FloatingActionsMenu:android.view.animation.DecelerateInterpolator access$1100()
com.getbase.floatingactionbutton.FloatingActionsMenu:com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams generateLayoutParams(android.content.res.XmlBlock$Parser)->com.getbase.floatingactionbutton.FloatingActionsMenu:java.lang.Integer access$1200(com.getbase.floatingactionbutton.FloatingActionsMenu)
com.ichi2.anki.DeckPicker:void onCreate(android.os.Bundle)->com.getbase.floatingactionbutton.FloatingActionsMenu:java.lang.Boolean checkLayoutParams(com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams)
com.ichi2.anki.DeckPicker:void onCreate(android.os.Bundle)->com.getbase.floatingactionbutton.FloatingActionButton:void init(com.ichi2.anki.DeckPicker,android.content.res.XmlBlock$Parser)
com.getbase.floatingactionbutton.FloatingActionButton:void init(com.ichi2.anki.DeckPicker,android.content.res.XmlBlock$Parser)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer getColor(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:void init(com.ichi2.anki.DeckPicker,android.content.res.XmlBlock$Parser)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer getColor(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:void init(com.ichi2.anki.DeckPicker,android.content.res.XmlBlock$Parser)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer getColor(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:void init(com.ichi2.anki.DeckPicker,android.content.res.XmlBlock$Parser)->com.getbase.floatingactionbutton.FloatingActionButton:void updateCircleSize()
com.getbase.floatingactionbutton.FloatingActionButton:void updateCircleSize()->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Float getDimension(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:void init(com.ichi2.anki.DeckPicker,android.content.res.XmlBlock$Parser)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Float getDimension(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:void init(com.ichi2.anki.DeckPicker,android.content.res.XmlBlock$Parser)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Float getDimension(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:void init(com.ichi2.anki.DeckPicker,android.content.res.XmlBlock$Parser)->com.getbase.floatingactionbutton.FloatingActionButton:void updateDrawableSize()
com.getbase.floatingactionbutton.FloatingActionButton:void init(com.ichi2.anki.DeckPicker,android.content.res.XmlBlock$Parser)->com.getbase.floatingactionbutton.FloatingActionButton:void updateBackground()
com.getbase.floatingactionbutton.FloatingActionButton:void updateBackground()->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Float getDimension(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:void updateBackground()->com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.StateListDrawable createFillDrawable(java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.StateListDrawable createFillDrawable(java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.LayerDrawable createCircleDrawable(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.LayerDrawable createCircleDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer opaque(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.LayerDrawable createCircleDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer darkenColor(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer darkenColor(java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer adjustColorBrightness(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer halfTransparent(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer lightenColor(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer lightenColor(java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer adjustColorBrightness(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer halfTransparent(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.StateListDrawable createFillDrawable(java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.LayerDrawable createCircleDrawable(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.LayerDrawable createCircleDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer opaque(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.LayerDrawable createCircleDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer darkenColor(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer darkenColor(java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer adjustColorBrightness(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer halfTransparent(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer lightenColor(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer lightenColor(java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer adjustColorBrightness(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer halfTransparent(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.StateListDrawable createFillDrawable(java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.LayerDrawable createCircleDrawable(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.LayerDrawable createCircleDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer opaque(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.LayerDrawable createCircleDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer darkenColor(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer darkenColor(java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer adjustColorBrightness(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer halfTransparent(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer lightenColor(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer lightenColor(java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer adjustColorBrightness(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer halfTransparent(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:void updateBackground()->com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createOuterStrokeDrawable(java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createOuterStrokeDrawable(java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer opacityToAlpha(java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:void updateBackground()->com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.BitmapDrawable getIconDrawable()
com.getbase.floatingactionbutton.FloatingActionButton:void updateBackground()->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Float getDimension(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:void updateBackground()->com.getbase.floatingactionbutton.FloatingActionButton:void setBackgroundCompat(android.graphics.drawable.LayerDrawable)
com.ichi2.anki.DeckPicker:void onCreate(android.os.Bundle)->com.getbase.floatingactionbutton.FloatingActionsMenu:com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams generateLayoutParams(android.content.res.XmlBlock$Parser)
com.getbase.floatingactionbutton.FloatingActionsMenu:com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams generateLayoutParams(android.content.res.XmlBlock$Parser)->com.getbase.floatingactionbutton.FloatingActionsMenu:android.view.animation.OvershootInterpolator access$900()
com.getbase.floatingactionbutton.FloatingActionsMenu:com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams generateLayoutParams(android.content.res.XmlBlock$Parser)->com.getbase.floatingactionbutton.FloatingActionsMenu:android.view.animation.DecelerateInterpolator access$1000()
com.getbase.floatingactionbutton.FloatingActionsMenu:com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams generateLayoutParams(android.content.res.XmlBlock$Parser)->com.getbase.floatingactionbutton.FloatingActionsMenu:android.view.animation.DecelerateInterpolator access$1100()
com.getbase.floatingactionbutton.FloatingActionsMenu:com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams generateLayoutParams(android.content.res.XmlBlock$Parser)->com.getbase.floatingactionbutton.FloatingActionsMenu:android.view.animation.DecelerateInterpolator access$1100()
com.getbase.floatingactionbutton.FloatingActionsMenu:com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams generateLayoutParams(android.content.res.XmlBlock$Parser)->com.getbase.floatingactionbutton.FloatingActionsMenu:java.lang.Integer access$1200(com.getbase.floatingactionbutton.FloatingActionsMenu)
com.ichi2.anki.DeckPicker:void onCreate(android.os.Bundle)->com.getbase.floatingactionbutton.FloatingActionsMenu:java.lang.Boolean checkLayoutParams(com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams)
com.ichi2.anki.DeckPicker:void onCreate(android.os.Bundle)->com.getbase.floatingactionbutton.FloatingActionButton:void init(com.ichi2.anki.DeckPicker,android.content.res.XmlBlock$Parser)
com.getbase.floatingactionbutton.FloatingActionButton:void init(com.ichi2.anki.DeckPicker,android.content.res.XmlBlock$Parser)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer getColor(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:void init(com.ichi2.anki.DeckPicker,android.content.res.XmlBlock$Parser)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer getColor(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:void init(com.ichi2.anki.DeckPicker,android.content.res.XmlBlock$Parser)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer getColor(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:void init(com.ichi2.anki.DeckPicker,android.content.res.XmlBlock$Parser)->com.getbase.floatingactionbutton.FloatingActionButton:void updateCircleSize()
com.getbase.floatingactionbutton.FloatingActionButton:void updateCircleSize()->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Float getDimension(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:void init(com.ichi2.anki.DeckPicker,android.content.res.XmlBlock$Parser)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Float getDimension(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:void init(com.ichi2.anki.DeckPicker,android.content.res.XmlBlock$Parser)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Float getDimension(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:void init(com.ichi2.anki.DeckPicker,android.content.res.XmlBlock$Parser)->com.getbase.floatingactionbutton.FloatingActionButton:void updateDrawableSize()
com.getbase.floatingactionbutton.FloatingActionButton:void init(com.ichi2.anki.DeckPicker,android.content.res.XmlBlock$Parser)->com.getbase.floatingactionbutton.FloatingActionButton:void updateBackground()
com.getbase.floatingactionbutton.FloatingActionButton:void updateBackground()->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Float getDimension(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:void updateBackground()->com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.StateListDrawable createFillDrawable(java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.StateListDrawable createFillDrawable(java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.LayerDrawable createCircleDrawable(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.LayerDrawable createCircleDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer opaque(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.LayerDrawable createCircleDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer darkenColor(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer darkenColor(java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer adjustColorBrightness(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer halfTransparent(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer lightenColor(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer lightenColor(java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer adjustColorBrightness(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer halfTransparent(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.StateListDrawable createFillDrawable(java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.LayerDrawable createCircleDrawable(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.LayerDrawable createCircleDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer opaque(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.LayerDrawable createCircleDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer darkenColor(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer darkenColor(java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer adjustColorBrightness(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer halfTransparent(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer lightenColor(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer lightenColor(java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer adjustColorBrightness(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer halfTransparent(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.StateListDrawable createFillDrawable(java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.LayerDrawable createCircleDrawable(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.LayerDrawable createCircleDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer opaque(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.LayerDrawable createCircleDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer darkenColor(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer darkenColor(java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer adjustColorBrightness(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer halfTransparent(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer lightenColor(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer lightenColor(java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer adjustColorBrightness(java.lang.Integer,java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createInnerStrokesDrawable(java.lang.Integer,java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer halfTransparent(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:void updateBackground()->com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createOuterStrokeDrawable(java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.ShapeDrawable createOuterStrokeDrawable(java.lang.Float)->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Integer opacityToAlpha(java.lang.Float)
com.getbase.floatingactionbutton.FloatingActionButton:void updateBackground()->com.getbase.floatingactionbutton.FloatingActionButton:android.graphics.drawable.BitmapDrawable getIconDrawable()
com.getbase.floatingactionbutton.FloatingActionButton:void updateBackground()->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.Float getDimension(java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionButton:void updateBackground()->com.getbase.floatingactionbutton.FloatingActionButton:void setBackgroundCompat(android.graphics.drawable.LayerDrawable)
com.ichi2.anki.DeckPicker:void onCreate(android.os.Bundle)->com.getbase.floatingactionbutton.FloatingActionsMenu:com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams generateLayoutParams(android.content.res.XmlBlock$Parser)
com.getbase.floatingactionbutton.FloatingActionsMenu:com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams generateLayoutParams(android.content.res.XmlBlock$Parser)->com.getbase.floatingactionbutton.FloatingActionsMenu:android.view.animation.OvershootInterpolator access$900()
com.getbase.floatingactionbutton.FloatingActionsMenu:com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams generateLayoutParams(android.content.res.XmlBlock$Parser)->com.getbase.floatingactionbutton.FloatingActionsMenu:android.view.animation.DecelerateInterpolator access$1000()
com.getbase.floatingactionbutton.FloatingActionsMenu:com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams generateLayoutParams(android.content.res.XmlBlock$Parser)->com.getbase.floatingactionbutton.FloatingActionsMenu:android.view.animation.DecelerateInterpolator access$1100()
com.getbase.floatingactionbutton.FloatingActionsMenu:com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams generateLayoutParams(android.content.res.XmlBlock$Parser)->com.getbase.floatingactionbutton.FloatingActionsMenu:android.view.animation.DecelerateInterpolator access$1100()
com.getbase.floatingactionbutton.FloatingActionsMenu:com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams generateLayoutParams(android.content.res.XmlBlock$Parser)->com.getbase.floatingactionbutton.FloatingActionsMenu:java.lang.Integer access$1200(com.getbase.floatingactionbutton.FloatingActionsMenu)
com.ichi2.anki.DeckPicker:void onCreate(android.os.Bundle)->com.getbase.floatingactionbutton.FloatingActionsMenu:java.lang.Boolean checkLayoutParams(com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams)
com.ichi2.anki.DeckPicker:void onCreate(android.os.Bundle)->com.getbase.floatingactionbutton.FloatingActionsMenu:void onFinishInflate()
com.getbase.floatingactionbutton.FloatingActionsMenu:void onFinishInflate()->com.getbase.floatingactionbutton.FloatingActionsMenu:void createLabels()
com.getbase.floatingactionbutton.FloatingActionsMenu:void createLabels()->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.String getTitle()
com.getbase.floatingactionbutton.FloatingActionsMenu:void createLabels()->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.String getTitle()
com.getbase.floatingactionbutton.FloatingActionsMenu:void createLabels()->com.getbase.floatingactionbutton.FloatingActionsMenu:com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams generateDefaultLayoutParams()
com.getbase.floatingactionbutton.FloatingActionsMenu:com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams generateDefaultLayoutParams()->com.getbase.floatingactionbutton.FloatingActionsMenu:android.view.animation.OvershootInterpolator access$900()
com.getbase.floatingactionbutton.FloatingActionsMenu:com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams generateDefaultLayoutParams()->com.getbase.floatingactionbutton.FloatingActionsMenu:android.view.animation.DecelerateInterpolator access$1000()
com.getbase.floatingactionbutton.FloatingActionsMenu:com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams generateDefaultLayoutParams()->com.getbase.floatingactionbutton.FloatingActionsMenu:android.view.animation.DecelerateInterpolator access$1100()
com.getbase.floatingactionbutton.FloatingActionsMenu:com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams generateDefaultLayoutParams()->com.getbase.floatingactionbutton.FloatingActionsMenu:android.view.animation.DecelerateInterpolator access$1100()
com.getbase.floatingactionbutton.FloatingActionsMenu:com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams generateDefaultLayoutParams()->com.getbase.floatingactionbutton.FloatingActionsMenu:java.lang.Integer access$1200(com.getbase.floatingactionbutton.FloatingActionsMenu)
com.getbase.floatingactionbutton.FloatingActionsMenu:void createLabels()->com.getbase.floatingactionbutton.FloatingActionsMenu:java.lang.Boolean checkLayoutParams(com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams)
com.getbase.floatingactionbutton.FloatingActionsMenu:void createLabels()->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.String getTitle()
com.getbase.floatingactionbutton.FloatingActionsMenu:void createLabels()->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.String getTitle()
com.getbase.floatingactionbutton.FloatingActionsMenu:void createLabels()->com.getbase.floatingactionbutton.FloatingActionsMenu:com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams generateDefaultLayoutParams()
com.getbase.floatingactionbutton.FloatingActionsMenu:com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams generateDefaultLayoutParams()->com.getbase.floatingactionbutton.FloatingActionsMenu:android.view.animation.OvershootInterpolator access$900()
com.getbase.floatingactionbutton.FloatingActionsMenu:com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams generateDefaultLayoutParams()->com.getbase.floatingactionbutton.FloatingActionsMenu:android.view.animation.DecelerateInterpolator access$1000()
com.getbase.floatingactionbutton.FloatingActionsMenu:com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams generateDefaultLayoutParams()->com.getbase.floatingactionbutton.FloatingActionsMenu:android.view.animation.DecelerateInterpolator access$1100()
com.getbase.floatingactionbutton.FloatingActionsMenu:com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams generateDefaultLayoutParams()->com.getbase.floatingactionbutton.FloatingActionsMenu:android.view.animation.DecelerateInterpolator access$1100()
com.getbase.floatingactionbutton.FloatingActionsMenu:com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams generateDefaultLayoutParams()->com.getbase.floatingactionbutton.FloatingActionsMenu:java.lang.Integer access$1200(com.getbase.floatingactionbutton.FloatingActionsMenu)
com.getbase.floatingactionbutton.FloatingActionsMenu:void createLabels()->com.getbase.floatingactionbutton.FloatingActionsMenu:java.lang.Boolean checkLayoutParams(com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams)
com.getbase.floatingactionbutton.FloatingActionsMenu:void createLabels()->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.String getTitle()
com.getbase.floatingactionbutton.FloatingActionsMenu:void createLabels()->com.getbase.floatingactionbutton.FloatingActionButton:java.lang.String getTitle()
com.getbase.floatingactionbutton.FloatingActionsMenu:void createLabels()->com.getbase.floatingactionbutton.FloatingActionsMenu:com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams generateDefaultLayoutParams()
com.getbase.floatingactionbutton.FloatingActionsMenu:com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams generateDefaultLayoutParams()->com.getbase.floatingactionbutton.FloatingActionsMenu:android.view.animation.OvershootInterpolator access$900()
com.getbase.floatingactionbutton.FloatingActionsMenu:com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams generateDefaultLayoutParams()->com.getbase.floatingactionbutton.FloatingActionsMenu:android.view.animation.DecelerateInterpolator access$1000()
com.getbase.floatingactionbutton.FloatingActionsMenu:com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams generateDefaultLayoutParams()->com.getbase.floatingactionbutton.FloatingActionsMenu:android.view.animation.DecelerateInterpolator access$1100()
com.getbase.floatingactionbutton.FloatingActionsMenu:com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams generateDefaultLayoutParams()->com.getbase.floatingactionbutton.FloatingActionsMenu:android.view.animation.DecelerateInterpolator access$1100()
com.getbase.floatingactionbutton.FloatingActionsMenu:com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams generateDefaultLayoutParams()->com.getbase.floatingactionbutton.FloatingActionsMenu:java.lang.Integer access$1200(com.getbase.floatingactionbutton.FloatingActionsMenu)
com.getbase.floatingactionbutton.FloatingActionsMenu:void createLabels()->com.getbase.floatingactionbutton.FloatingActionsMenu:java.lang.Boolean checkLayoutParams(com.getbase.floatingactionbutton.FloatingActionsMenu$LayoutParams)
com.getbase.floatingactionbutton.FloatingActionsMenu:void createLabels()->com.getbase.floatingactionbutton.FloatingActionButton:void getTitle()
com.ichi2.anki.DeckPicker:void onCreate(android.os.Bundle)->com.ichi2.anki.DeckPicker:void registerExternalStorageListener()
com.ichi2.anki.DeckPicker:void registerExternalStorageListener()->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onCreate(android.os.Bundle)->com.ichi2.anki.NavigationDrawerActivity:void initNavigationDrawer(androidx.appcompat.widget.ContentFrameLayout)
com.ichi2.anki.NavigationDrawerActivity:void initNavigationDrawer(androidx.appcompat.widget.ContentFrameLayout)->com.ichi2.anki.NavigationDrawerActivity:[Z $jacocoInit()
com.ichi2.anki.NavigationDrawerActivity:void initNavigationDrawer(androidx.appcompat.widget.ContentFrameLayout)->com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()->com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatHelper getInstance()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatHelper getInstance()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.anki.NavigationDrawerActivity:void initNavigationDrawer(androidx.appcompat.widget.ContentFrameLayout)->com.ichi2.compat.CompatV21:void setStatusBarColor(com.android.internal.policy.PhoneWindow,java.lang.Integer)
com.ichi2.compat.CompatV21:void setStatusBarColor(com.android.internal.policy.PhoneWindow,java.lang.Integer)->com.ichi2.compat.CompatV21:[Z $jacocoInit()
com.ichi2.anki.NavigationDrawerActivity:void initNavigationDrawer(androidx.appcompat.widget.ContentFrameLayout)->com.ichi2.themes.Themes:java.lang.Integer getColorFromAttr(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.ichi2.themes.Themes:java.lang.Integer getColorFromAttr(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.ichi2.themes.Themes:[Z $jacocoInit()
com.ichi2.themes.Themes:java.lang.Integer getColorFromAttr(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.ichi2.themes.Themes:[I getColorFromAttr(com.ichi2.anki.DeckPicker,[I)
com.ichi2.themes.Themes:[I getColorFromAttr(com.ichi2.anki.DeckPicker,[I)->com.ichi2.themes.Themes:[Z $jacocoInit()
com.ichi2.anki.NavigationDrawerActivity:void initNavigationDrawer(androidx.appcompat.widget.ContentFrameLayout)->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onCreate(android.os.Bundle)->com.ichi2.anki.NavigationDrawerActivity:void setTitle(java.lang.String)
com.ichi2.anki.NavigationDrawerActivity:void setTitle(java.lang.String)->com.ichi2.anki.NavigationDrawerActivity:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onCreate(android.os.Bundle)->com.ichi2.anki.widgets.DeckAdapter:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onCreate(android.os.Bundle)->com.ichi2.anki.widgets.DeckAdapter:void setDeckClickListener(com.ichi2.anki.DeckPicker$1)
com.ichi2.anki.widgets.DeckAdapter:void setDeckClickListener(com.ichi2.anki.DeckPicker$1)->com.ichi2.anki.widgets.DeckAdapter:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onCreate(android.os.Bundle)->com.ichi2.anki.widgets.DeckAdapter:void setCountsClickListener(com.ichi2.anki.DeckPicker$2)
com.ichi2.anki.widgets.DeckAdapter:void setCountsClickListener(com.ichi2.anki.DeckPicker$2)->com.ichi2.anki.widgets.DeckAdapter:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onCreate(android.os.Bundle)->com.ichi2.anki.widgets.DeckAdapter:void setDeckExpanderClickListener(com.ichi2.anki.-$$Lambda$DeckPicker$JS3fNtwgLNwAx3DGfdZ6aI1Z-VI)
com.ichi2.anki.widgets.DeckAdapter:void setDeckExpanderClickListener(com.ichi2.anki.-$$Lambda$DeckPicker$JS3fNtwgLNwAx3DGfdZ6aI1Z-VI)->com.ichi2.anki.widgets.DeckAdapter:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onCreate(android.os.Bundle)->com.ichi2.anki.widgets.DeckAdapter:void setDeckLongClickListener(com.ichi2.anki.DeckPicker$3)
com.ichi2.anki.widgets.DeckAdapter:void setDeckLongClickListener(com.ichi2.anki.DeckPicker$3)->com.ichi2.anki.widgets.DeckAdapter:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onCreate(android.os.Bundle)->com.ichi2.anki.DeckPicker:void configureFloatingActionsMenu()
com.ichi2.anki.DeckPicker:void configureFloatingActionsMenu()->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onCreate(android.os.Bundle)->com.ichi2.anki.DeckPicker:void showStartupScreensAndDialogs(android.app.SharedPreferencesImpl,java.lang.Integer)
com.ichi2.anki.DeckPicker:void showStartupScreensAndDialogs(android.app.SharedPreferencesImpl,java.lang.Integer)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void showStartupScreensAndDialogs(android.app.SharedPreferencesImpl,java.lang.Integer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void showStartupScreensAndDialogs(android.app.SharedPreferencesImpl,java.lang.Integer)->com.ichi2.anki.BackupManager:java.lang.Boolean enoughDiscSpace(java.lang.String)
com.ichi2.anki.BackupManager:java.lang.Boolean enoughDiscSpace(java.lang.String)->com.ichi2.anki.BackupManager:[Z $jacocoInit()
com.ichi2.anki.BackupManager:java.lang.Boolean enoughDiscSpace(java.lang.String)->com.ichi2.anki.BackupManager:java.lang.Long getFreeDiscSpace(java.lang.String)
com.ichi2.anki.BackupManager:java.lang.Long getFreeDiscSpace(java.lang.String)->com.ichi2.anki.BackupManager:[Z $jacocoInit()
com.ichi2.anki.BackupManager:java.lang.Long getFreeDiscSpace(java.lang.String)->com.ichi2.anki.BackupManager:java.lang.Long getFreeDiscSpace(java.io.File)
com.ichi2.anki.BackupManager:java.lang.Long getFreeDiscSpace(java.io.File)->com.ichi2.anki.BackupManager:[Z $jacocoInit()
com.ichi2.anki.BackupManager:java.lang.Long getFreeDiscSpace(java.io.File)->com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()->com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatHelper getInstance()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatHelper getInstance()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void showStartupScreensAndDialogs(android.app.SharedPreferencesImpl,java.lang.Integer)->com.ichi2.utils.VersionUtils:java.lang.String getPkgVersionName()
com.ichi2.utils.VersionUtils:java.lang.String getPkgVersionName()->com.ichi2.utils.VersionUtils:[Z $jacocoInit()
com.ichi2.utils.VersionUtils:java.lang.String getPkgVersionName()->com.ichi2.anki.AnkiDroidApp:com.ichi2.anki.AnkiDroidApp getInstance()
com.ichi2.anki.AnkiDroidApp:com.ichi2.anki.AnkiDroidApp getInstance()->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void showStartupScreensAndDialogs(android.app.SharedPreferencesImpl,java.lang.Integer)->com.ichi2.anki.DeckPicker:void onFinishedStartup()
com.ichi2.anki.DeckPicker:void onFinishedStartup()->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onFinishedStartup()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.DeckPicker:void onFinishedStartup()->com.ichi2.libanki.Collection:java.lang.String getPath()
com.ichi2.libanki.Collection:java.lang.String getPath()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onFinishedStartup()->com.ichi2.anki.BackupManager:java.lang.Boolean performBackupInBackground(java.lang.String)
com.ichi2.anki.BackupManager:java.lang.Boolean performBackupInBackground(java.lang.String)->com.ichi2.anki.BackupManager:[Z $jacocoInit()
com.ichi2.anki.BackupManager:java.lang.Boolean performBackupInBackground(java.lang.String)->com.ichi2.anki.BackupManager:java.lang.Boolean performBackupInBackground(java.lang.String,java.lang.Integer,java.lang.Boolean)
com.ichi2.anki.BackupManager:java.lang.Boolean performBackupInBackground(java.lang.String,java.lang.Integer,java.lang.Boolean)->com.ichi2.anki.BackupManager:[Z $jacocoInit()
com.ichi2.anki.BackupManager:java.lang.Boolean performBackupInBackground(java.lang.String,java.lang.Integer,java.lang.Boolean)->com.ichi2.anki.AnkiDroidApp:com.ichi2.anki.AnkiDroidApp getInstance()
com.ichi2.anki.AnkiDroidApp:com.ichi2.anki.AnkiDroidApp getInstance()->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.BackupManager:java.lang.Boolean performBackupInBackground(java.lang.String,java.lang.Integer,java.lang.Boolean)->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(android.app.ContextImpl)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(android.app.ContextImpl)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.BackupManager:java.lang.Boolean performBackupInBackground(java.lang.String,java.lang.Integer,java.lang.Boolean)->com.ichi2.anki.BackupManager:[Ljava.io.File; getBackups(java.io.File)
com.ichi2.anki.BackupManager:[Ljava.io.File; getBackups(java.io.File)->com.ichi2.anki.BackupManager:[Z $jacocoInit()
com.ichi2.anki.BackupManager:[Ljava.io.File; getBackups(java.io.File)->com.ichi2.anki.BackupManager:java.io.File getBackupDirectory(java.io.File)
com.ichi2.anki.BackupManager:java.io.File getBackupDirectory(java.io.File)->com.ichi2.anki.BackupManager:[Z $jacocoInit()
com.ichi2.anki.BackupManager:java.lang.Boolean performBackupInBackground(java.lang.String,java.lang.Integer,java.lang.Boolean)->com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)
com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)->com.ichi2.libanki.Utils:java.lang.Double now()
com.ichi2.libanki.Utils:java.lang.Double now()->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onFinishedStartup()->com.ichi2.anki.DeckPicker:void automaticSync()
com.ichi2.anki.DeckPicker:void automaticSync()->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void automaticSync()->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(android.app.ContextImpl)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(android.app.ContextImpl)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void onStart()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void onStart()->com.ichi2.compat.customtabs.CustomTabActivityHelper:void bindCustomTabsService(com.ichi2.anki.DeckPicker)
com.ichi2.compat.customtabs.CustomTabActivityHelper:void bindCustomTabsService(com.ichi2.anki.DeckPicker)->com.ichi2.compat.customtabs.CustomTabActivityHelper:[Z $jacocoInit()
com.ichi2.compat.customtabs.CustomTabActivityHelper:void bindCustomTabsService(com.ichi2.anki.DeckPicker)->com.ichi2.compat.customtabs.CustomTabsHelper:void getPackageNameToUse(com.ichi2.anki.DeckPicker)
com.ichi2.compat.customtabs.CustomTabsHelper:void getPackageNameToUse(com.ichi2.anki.DeckPicker)->com.ichi2.compat.customtabs.CustomTabsHelper:[Z $jacocoInit()
com.ichi2.compat.customtabs.CustomTabsHelper:void getPackageNameToUse(com.ichi2.anki.DeckPicker)->com.ichi2.compat.CompatHelper:java.lang.Integer getSdkVersion()
com.ichi2.compat.CompatHelper:java.lang.Integer getSdkVersion()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.anki.NavigationDrawerActivity:void onPostCreate(android.os.Bundle)->com.ichi2.anki.NavigationDrawerActivity:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onResume()->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onResume()->com.ichi2.anki.AnkiActivity:void onResume()
com.ichi2.anki.AnkiActivity:void onResume()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void onResume()->com.ichi2.anki.dialogs.DialogHandler:void readMessage()
com.ichi2.anki.dialogs.DialogHandler:void readMessage()->com.ichi2.anki.dialogs.DialogHandler:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onResume()->com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.DeckPicker:void onResume()->com.ichi2.anki.NavigationDrawerActivity:void selectNavigationItem(java.lang.Integer)
com.ichi2.anki.NavigationDrawerActivity:void selectNavigationItem(java.lang.Integer)->com.ichi2.anki.NavigationDrawerActivity:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onResume()->com.ichi2.anki.DeckPicker:void updateDeckList()
com.ichi2.anki.DeckPicker:void updateDeckList()->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void updateDeckList()->com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.DeckPicker$13,[Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.DeckPicker$13,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.DeckPicker$13,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.DeckPicker$13,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.DeckPicker$13,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.DeckPicker$13,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onPreExecute()
com.ichi2.async.DeckTask:void onPreExecute()->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPreExecute()->com.ichi2.async.BaseAsyncTask:void onPreExecute()
com.ichi2.async.BaseAsyncTask:void onPreExecute()->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onPreExecute()->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPreExecute()->com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.DeckPicker:void onResume()->com.ichi2.anki.NavigationDrawerActivity:void setTitle(java.lang.String)
com.ichi2.anki.NavigationDrawerActivity:void setTitle(java.lang.String)->com.ichi2.anki.NavigationDrawerActivity:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onAttachedToWindow()->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.anki.widgets.FabBehavior:java.lang.Boolean layoutDependsOn(androidx.coordinatorlayout.widget.CoordinatorLayout,com.getbase.floatingactionbutton.FloatingActionsMenu,android.widget.RelativeLayout)->com.ichi2.anki.widgets.FabBehavior:[Z $jacocoInit()
com.ichi2.anki.widgets.FabBehavior:java.lang.Boolean layoutDependsOn(androidx.coordinatorlayout.widget.CoordinatorLayout,com.getbase.floatingactionbutton.FloatingActionsMenu,android.widget.RelativeLayout)->com.ichi2.anki.widgets.FabBehavior:java.lang.Boolean layoutDependsOn(androidx.coordinatorlayout.widget.CoordinatorLayout,com.getbase.floatingactionbutton.FloatingActionsMenu,android.widget.RelativeLayout)
com.ichi2.anki.widgets.FabBehavior:java.lang.Boolean layoutDependsOn(androidx.coordinatorlayout.widget.CoordinatorLayout,com.getbase.floatingactionbutton.FloatingActionsMenu,android.widget.RelativeLayout)->com.ichi2.anki.widgets.FabBehavior:[Z $jacocoInit()
com.ichi2.anki.widgets.FabBehavior:java.lang.Boolean layoutDependsOn(androidx.coordinatorlayout.widget.CoordinatorLayout,com.getbase.floatingactionbutton.FloatingActionsMenu,android.widget.ProgressBar)->com.ichi2.anki.widgets.FabBehavior:[Z $jacocoInit()
com.ichi2.anki.widgets.FabBehavior:java.lang.Boolean layoutDependsOn(androidx.coordinatorlayout.widget.CoordinatorLayout,com.getbase.floatingactionbutton.FloatingActionsMenu,android.widget.ProgressBar)->com.ichi2.anki.widgets.FabBehavior:java.lang.Boolean layoutDependsOn(androidx.coordinatorlayout.widget.CoordinatorLayout,com.getbase.floatingactionbutton.FloatingActionsMenu,android.widget.ProgressBar)
com.ichi2.anki.widgets.FabBehavior:java.lang.Boolean layoutDependsOn(androidx.coordinatorlayout.widget.CoordinatorLayout,com.getbase.floatingactionbutton.FloatingActionsMenu,android.widget.ProgressBar)->com.ichi2.anki.widgets.FabBehavior:[Z $jacocoInit()
com.getbase.floatingactionbutton.FloatingActionsMenu:void onMeasure(java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionButton:void onMeasure(java.lang.Integer,java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionsMenu:void onMeasure(java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionButton:void onMeasure(java.lang.Integer,java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionsMenu:void onMeasure(java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionButton:void onMeasure(java.lang.Integer,java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionsMenu:void onMeasure(java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionButton:void onMeasure(java.lang.Integer,java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionsMenu:void onMeasure(java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionsMenu:java.lang.Boolean expandsHorizontally()
com.getbase.floatingactionbutton.FloatingActionsMenu:void onMeasure(java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionsMenu:java.lang.Boolean expandsHorizontally()
com.getbase.floatingactionbutton.FloatingActionsMenu:void onMeasure(java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionsMenu:java.lang.Boolean expandsHorizontally()
com.getbase.floatingactionbutton.FloatingActionsMenu:void onMeasure(java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionsMenu:java.lang.Boolean expandsHorizontally()
com.getbase.floatingactionbutton.FloatingActionsMenu:void onMeasure(java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionsMenu:java.lang.Boolean expandsHorizontally()
com.getbase.floatingactionbutton.FloatingActionsMenu:void onMeasure(java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionsMenu:java.lang.Integer adjustForOvershoot(java.lang.Integer)
com.ichi2.anki.widgets.DeckAdapter:java.lang.Integer getItemCount()->com.ichi2.anki.widgets.DeckAdapter:[Z $jacocoInit()
com.ichi2.anki.widgets.DeckAdapter:java.lang.Integer getItemCount()->com.ichi2.anki.widgets.DeckAdapter:[Z $jacocoInit()
com.getbase.floatingactionbutton.FloatingActionsMenu:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.TouchDelegateGroup:void clearTouchDelegates()
com.getbase.floatingactionbutton.FloatingActionsMenu:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionsMenu:android.animation.AnimatorSet access$600(com.getbase.floatingactionbutton.FloatingActionsMenu)
com.getbase.floatingactionbutton.FloatingActionsMenu:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionsMenu:android.animation.AnimatorSet access$600(com.getbase.floatingactionbutton.FloatingActionsMenu)
com.getbase.floatingactionbutton.FloatingActionsMenu:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionsMenu:android.animation.AnimatorSet access$500(com.getbase.floatingactionbutton.FloatingActionsMenu)
com.getbase.floatingactionbutton.FloatingActionsMenu:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionsMenu:android.animation.AnimatorSet access$500(com.getbase.floatingactionbutton.FloatingActionsMenu)
com.getbase.floatingactionbutton.FloatingActionsMenu:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.TouchDelegateGroup:void addTouchDelegate(android.view.TouchDelegate)
com.getbase.floatingactionbutton.FloatingActionsMenu:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionsMenu:android.animation.AnimatorSet access$600(com.getbase.floatingactionbutton.FloatingActionsMenu)
com.getbase.floatingactionbutton.FloatingActionsMenu:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionsMenu:android.animation.AnimatorSet access$600(com.getbase.floatingactionbutton.FloatingActionsMenu)
com.getbase.floatingactionbutton.FloatingActionsMenu:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionsMenu:android.animation.AnimatorSet access$500(com.getbase.floatingactionbutton.FloatingActionsMenu)
com.getbase.floatingactionbutton.FloatingActionsMenu:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionsMenu:android.animation.AnimatorSet access$500(com.getbase.floatingactionbutton.FloatingActionsMenu)
com.getbase.floatingactionbutton.FloatingActionsMenu:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionsMenu:android.animation.AnimatorSet access$600(com.getbase.floatingactionbutton.FloatingActionsMenu)
com.getbase.floatingactionbutton.FloatingActionsMenu:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionsMenu:android.animation.AnimatorSet access$600(com.getbase.floatingactionbutton.FloatingActionsMenu)
com.getbase.floatingactionbutton.FloatingActionsMenu:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionsMenu:android.animation.AnimatorSet access$500(com.getbase.floatingactionbutton.FloatingActionsMenu)
com.getbase.floatingactionbutton.FloatingActionsMenu:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionsMenu:android.animation.AnimatorSet access$500(com.getbase.floatingactionbutton.FloatingActionsMenu)
com.getbase.floatingactionbutton.FloatingActionsMenu:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.TouchDelegateGroup:void addTouchDelegate(android.view.TouchDelegate)
com.getbase.floatingactionbutton.FloatingActionsMenu:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionsMenu:android.animation.AnimatorSet access$600(com.getbase.floatingactionbutton.FloatingActionsMenu)
com.getbase.floatingactionbutton.FloatingActionsMenu:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionsMenu:android.animation.AnimatorSet access$600(com.getbase.floatingactionbutton.FloatingActionsMenu)
com.getbase.floatingactionbutton.FloatingActionsMenu:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionsMenu:android.animation.AnimatorSet access$500(com.getbase.floatingactionbutton.FloatingActionsMenu)
com.getbase.floatingactionbutton.FloatingActionsMenu:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionsMenu:android.animation.AnimatorSet access$500(com.getbase.floatingactionbutton.FloatingActionsMenu)
com.getbase.floatingactionbutton.FloatingActionsMenu:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionsMenu:android.animation.AnimatorSet access$600(com.getbase.floatingactionbutton.FloatingActionsMenu)
com.getbase.floatingactionbutton.FloatingActionsMenu:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionsMenu:android.animation.AnimatorSet access$600(com.getbase.floatingactionbutton.FloatingActionsMenu)
com.getbase.floatingactionbutton.FloatingActionsMenu:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionsMenu:android.animation.AnimatorSet access$500(com.getbase.floatingactionbutton.FloatingActionsMenu)
com.getbase.floatingactionbutton.FloatingActionsMenu:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionsMenu:android.animation.AnimatorSet access$500(com.getbase.floatingactionbutton.FloatingActionsMenu)
com.getbase.floatingactionbutton.FloatingActionsMenu:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.TouchDelegateGroup:void addTouchDelegate(android.view.TouchDelegate)
com.getbase.floatingactionbutton.FloatingActionsMenu:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionsMenu:android.animation.AnimatorSet access$600(com.getbase.floatingactionbutton.FloatingActionsMenu)
com.getbase.floatingactionbutton.FloatingActionsMenu:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionsMenu:android.animation.AnimatorSet access$600(com.getbase.floatingactionbutton.FloatingActionsMenu)
com.getbase.floatingactionbutton.FloatingActionsMenu:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionsMenu:android.animation.AnimatorSet access$500(com.getbase.floatingactionbutton.FloatingActionsMenu)
com.getbase.floatingactionbutton.FloatingActionsMenu:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionsMenu:android.animation.AnimatorSet access$500(com.getbase.floatingactionbutton.FloatingActionsMenu)
com.ichi2.anki.DeckPicker:void lambda$onCreate$2$DeckPicker()->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.BaseAsyncTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)
com.ichi2.async.BaseAsyncTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.AnkiActivity:void hideProgressBar()
com.ichi2.anki.AnkiActivity:void hideProgressBar()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.DeckPicker:com.ichi2.anki.widgets.DeckAdapter access$200(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:com.ichi2.anki.widgets.DeckAdapter access$200(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.widgets.DeckAdapter:void buildDeckList(java.util.ArrayList,com.ichi2.libanki.Collection)
com.ichi2.anki.widgets.DeckAdapter:void buildDeckList(java.util.ArrayList,com.ichi2.libanki.Collection)->com.ichi2.anki.widgets.DeckAdapter:[Z $jacocoInit()
com.ichi2.anki.widgets.DeckAdapter:void buildDeckList(java.util.ArrayList,com.ichi2.libanki.Collection)->com.ichi2.anki.widgets.DeckAdapter:void processNodes(java.util.ArrayList)
com.ichi2.anki.widgets.DeckAdapter:void processNodes(java.util.ArrayList)->com.ichi2.anki.widgets.DeckAdapter:[Z $jacocoInit()
com.ichi2.anki.widgets.DeckAdapter:void processNodes(java.util.ArrayList)->com.ichi2.anki.widgets.DeckAdapter:void processNodes(java.util.ArrayList,java.lang.Integer)
com.ichi2.anki.widgets.DeckAdapter:void processNodes(java.util.ArrayList,java.lang.Integer)->com.ichi2.anki.widgets.DeckAdapter:[Z $jacocoInit()
com.ichi2.anki.widgets.DeckAdapter:void processNodes(java.util.ArrayList,java.lang.Integer)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.widgets.DeckAdapter:void processNodes(java.util.ArrayList,java.lang.Integer)->com.ichi2.libanki.Decks:java.util.ArrayList parents(java.lang.Long)
com.ichi2.libanki.Decks:java.util.ArrayList parents(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.util.ArrayList parents(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.widgets.DeckAdapter:void processNodes(java.util.ArrayList,java.lang.Integer)->com.ichi2.anki.widgets.DeckAdapter:void processNodes(java.util.ArrayList,java.lang.Integer)
com.ichi2.anki.widgets.DeckAdapter:void processNodes(java.util.ArrayList,java.lang.Integer)->com.ichi2.anki.widgets.DeckAdapter:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.DeckPicker:com.ichi2.anki.widgets.DeckAdapter access$200(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:com.ichi2.anki.widgets.DeckAdapter access$200(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.widgets.DeckAdapter:java.lang.Integer getEta()
com.ichi2.anki.widgets.DeckAdapter:java.lang.Integer getEta()->com.ichi2.anki.widgets.DeckAdapter:[Z $jacocoInit()
com.ichi2.anki.widgets.DeckAdapter:java.lang.Integer getEta()->com.ichi2.libanki.Collection:com.ichi2.libanki.Sched getSched()
com.ichi2.libanki.Collection:com.ichi2.libanki.Sched getSched()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.widgets.DeckAdapter:java.lang.Integer getEta()->com.ichi2.libanki.Sched:java.lang.Integer eta([I)
com.ichi2.libanki.Sched:java.lang.Integer eta([I)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer eta([I)->com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)
com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)->com.ichi2.libanki.Collection:com.ichi2.libanki.Sched getSched()
com.ichi2.libanki.Collection:com.ichi2.libanki.Sched getSched()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)->com.ichi2.libanki.Sched:java.lang.Long getDayCutoff()
com.ichi2.libanki.Sched:java.lang.Long getDayCutoff()->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteProgram:[Ljava.lang.String; getColumnNames()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToFirst()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToFirst()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()->io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.String getPath()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void clearOrCreateWindow(java.lang.String)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer cursorPickFillWindowStartPosition(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()
io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.String getSql()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:void getBindArgs()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()
io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:void setStartPosition(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)->io.requery.android.database.AbstractWindowedCursor:java.lang.Double getDouble(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Double getDouble(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Double getDouble(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Double getDouble(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)->io.requery.android.database.AbstractWindowedCursor:java.lang.Double getDouble(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Double getDouble(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Double getDouble(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Double getDouble(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)->io.requery.android.database.AbstractCursor:java.lang.Boolean isClosed()
com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteCursor:void close()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.AbstractCursor:void close()
io.requery.android.database.AbstractCursor:void close()->io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractWindowedCursor:void closeWindow()
io.requery.android.database.AbstractWindowedCursor:void closeWindow()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.CursorWindow:void onAllReferencesReleased()
io.requery.android.database.CursorWindow:void onAllReferencesReleased()->io.requery.android.database.CursorWindow:void dispose()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()
io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()->io.requery.android.database.sqlite.SQLiteProgram:void clearBindings()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:void cursorClosed()
com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)->com.ichi2.libanki.Collection:com.ichi2.libanki.Sched getSched()
com.ichi2.libanki.Collection:com.ichi2.libanki.Sched getSched()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)->com.ichi2.libanki.Sched:java.lang.Long getDayCutoff()
com.ichi2.libanki.Sched:java.lang.Long getDayCutoff()->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteProgram:[Ljava.lang.String; getColumnNames()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToFirst()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToFirst()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()->io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.String getPath()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void clearOrCreateWindow(java.lang.String)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer cursorPickFillWindowStartPosition(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()
io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.String getSql()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:void getBindArgs()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()
io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:void setStartPosition(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)->io.requery.android.database.AbstractWindowedCursor:java.lang.Double getDouble(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Double getDouble(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Double getDouble(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Double getDouble(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)->io.requery.android.database.AbstractWindowedCursor:java.lang.Double getDouble(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Double getDouble(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Double getDouble(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Double getDouble(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)->io.requery.android.database.AbstractCursor:java.lang.Boolean isClosed()
com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteCursor:void close()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.AbstractCursor:void close()
io.requery.android.database.AbstractCursor:void close()->io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractWindowedCursor:void closeWindow()
io.requery.android.database.AbstractWindowedCursor:void closeWindow()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.CursorWindow:void onAllReferencesReleased()
io.requery.android.database.CursorWindow:void onAllReferencesReleased()->io.requery.android.database.CursorWindow:void dispose()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()
io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()->io.requery.android.database.sqlite.SQLiteProgram:void clearBindings()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:void cursorClosed()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.DeckPicker:com.ichi2.anki.widgets.DeckAdapter access$200(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:com.ichi2.anki.widgets.DeckAdapter access$200(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.widgets.DeckAdapter:java.lang.Integer getDue()
com.ichi2.anki.widgets.DeckAdapter:java.lang.Integer getDue()->com.ichi2.anki.widgets.DeckAdapter:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.libanki.Collection:java.lang.Integer cardCount()
com.ichi2.libanki.Collection:java.lang.Integer cardCount()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Collection:java.lang.Integer cardCount()->com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String)
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String)->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String)->com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteProgram:[Ljava.lang.String; getColumnNames()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()->io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.String getPath()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void clearOrCreateWindow(java.lang.String)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer cursorPickFillWindowStartPosition(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()
io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.String getSql()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:void getBindArgs()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()
io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:void setStartPosition(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteCursor:void close()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.AbstractCursor:void close()
io.requery.android.database.AbstractCursor:void close()->io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractWindowedCursor:void closeWindow()
io.requery.android.database.AbstractWindowedCursor:void closeWindow()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.CursorWindow:void onAllReferencesReleased()
io.requery.android.database.CursorWindow:void onAllReferencesReleased()->io.requery.android.database.CursorWindow:void dispose()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()
io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()->io.requery.android.database.sqlite.SQLiteProgram:void clearBindings()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:void cursorClosed()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.libanki.Decks:org.json.JSONObject current()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:java.lang.Long selected()
com.ichi2.libanki.Decks:java.lang.Long selected()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.lang.Long selected()->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.DeckPicker:java.lang.Long access$1400(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:java.lang.Long access$1400(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.DeckPicker:void access$1500(com.ichi2.anki.DeckPicker,java.lang.Long)
com.ichi2.anki.DeckPicker:void access$1500(com.ichi2.anki.DeckPicker,java.lang.Long)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void access$1500(com.ichi2.anki.DeckPicker,java.lang.Long)->com.ichi2.anki.DeckPicker:void scrollDecklistToDeck(java.lang.Long)
com.ichi2.anki.DeckPicker:void scrollDecklistToDeck(java.lang.Long)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void scrollDecklistToDeck(java.lang.Long)->com.ichi2.anki.widgets.DeckAdapter:java.lang.Integer findDeckPosition(java.lang.Long)
com.ichi2.anki.widgets.DeckAdapter:java.lang.Integer findDeckPosition(java.lang.Long)->com.ichi2.anki.widgets.DeckAdapter:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.DeckPicker:java.lang.Long access$1402(com.ichi2.anki.DeckPicker,java.lang.Long)
com.ichi2.anki.DeckPicker:java.lang.Long access$1402(com.ichi2.anki.DeckPicker,java.lang.Long)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.DeckPicker:androidx.appcompat.widget.AppCompatTextView access$1600(com.ichi2.anki.DeckPicker)
com.ichi2.anki.DeckPicker:androidx.appcompat.widget.AppCompatTextView access$1600(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.stats.AnkiStatsTaskHandler:com.ichi2.anki.stats.AnkiStatsTaskHandler$DeckPreviewStatistics createReviewSummaryStatistics(com.ichi2.libanki.Collection,androidx.appcompat.widget.AppCompatTextView)
com.ichi2.anki.stats.AnkiStatsTaskHandler:com.ichi2.anki.stats.AnkiStatsTaskHandler$DeckPreviewStatistics createReviewSummaryStatistics(com.ichi2.libanki.Collection,androidx.appcompat.widget.AppCompatTextView)->com.ichi2.anki.stats.AnkiStatsTaskHandler:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.AnkiDroidApp:java.lang.Boolean isSdCardMounted()
com.ichi2.anki.AnkiDroidApp:java.lang.Boolean isSdCardMounted()->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:java.lang.Boolean onPrepareOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:java.lang.Boolean onPrepareOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:java.lang.Boolean onPrepareOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getColSafe(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getColSafe(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getColSafe(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.DeckPicker:java.lang.Boolean onPrepareOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.DeckPicker:java.lang.Boolean onPrepareOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.libanki.Collection:java.lang.Boolean undoAvailable()
com.ichi2.libanki.Collection:java.lang.Boolean undoAvailable()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.widgets.FabBehavior:java.lang.Boolean layoutDependsOn(androidx.coordinatorlayout.widget.CoordinatorLayout,com.getbase.floatingactionbutton.FloatingActionsMenu,android.widget.RelativeLayout)->com.ichi2.anki.widgets.FabBehavior:[Z $jacocoInit()
com.ichi2.anki.widgets.FabBehavior:java.lang.Boolean layoutDependsOn(androidx.coordinatorlayout.widget.CoordinatorLayout,com.getbase.floatingactionbutton.FloatingActionsMenu,android.widget.RelativeLayout)->com.ichi2.anki.widgets.FabBehavior:java.lang.Boolean layoutDependsOn(androidx.coordinatorlayout.widget.CoordinatorLayout,com.getbase.floatingactionbutton.FloatingActionsMenu,android.widget.RelativeLayout)
com.ichi2.anki.widgets.FabBehavior:java.lang.Boolean layoutDependsOn(androidx.coordinatorlayout.widget.CoordinatorLayout,com.getbase.floatingactionbutton.FloatingActionsMenu,android.widget.RelativeLayout)->com.ichi2.anki.widgets.FabBehavior:[Z $jacocoInit()
com.ichi2.anki.widgets.FabBehavior:java.lang.Boolean layoutDependsOn(androidx.coordinatorlayout.widget.CoordinatorLayout,com.getbase.floatingactionbutton.FloatingActionsMenu,android.widget.ProgressBar)->com.ichi2.anki.widgets.FabBehavior:[Z $jacocoInit()
com.ichi2.anki.widgets.FabBehavior:java.lang.Boolean layoutDependsOn(androidx.coordinatorlayout.widget.CoordinatorLayout,com.getbase.floatingactionbutton.FloatingActionsMenu,android.widget.ProgressBar)->com.ichi2.anki.widgets.FabBehavior:java.lang.Boolean layoutDependsOn(androidx.coordinatorlayout.widget.CoordinatorLayout,com.getbase.floatingactionbutton.FloatingActionsMenu,android.widget.ProgressBar)
com.ichi2.anki.widgets.FabBehavior:java.lang.Boolean layoutDependsOn(androidx.coordinatorlayout.widget.CoordinatorLayout,com.getbase.floatingactionbutton.FloatingActionsMenu,android.widget.ProgressBar)->com.ichi2.anki.widgets.FabBehavior:[Z $jacocoInit()
com.getbase.floatingactionbutton.FloatingActionsMenu:void onMeasure(java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionButton:void onMeasure(java.lang.Integer,java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionsMenu:void onMeasure(java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionButton:void onMeasure(java.lang.Integer,java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionsMenu:void onMeasure(java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionButton:void onMeasure(java.lang.Integer,java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionsMenu:void onMeasure(java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionButton:void onMeasure(java.lang.Integer,java.lang.Integer)
com.getbase.floatingactionbutton.FloatingActionsMenu:void onMeasure(java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionsMenu:java.lang.Boolean expandsHorizontally()
com.getbase.floatingactionbutton.FloatingActionsMenu:void onMeasure(java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionsMenu:java.lang.Boolean expandsHorizontally()
com.getbase.floatingactionbutton.FloatingActionsMenu:void onMeasure(java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionsMenu:java.lang.Boolean expandsHorizontally()
com.getbase.floatingactionbutton.FloatingActionsMenu:void onMeasure(java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionsMenu:java.lang.Boolean expandsHorizontally()
com.getbase.floatingactionbutton.FloatingActionsMenu:void onMeasure(java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionsMenu:java.lang.Boolean expandsHorizontally()
com.getbase.floatingactionbutton.FloatingActionsMenu:void onMeasure(java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.FloatingActionsMenu:java.lang.Integer adjustForOvershoot(java.lang.Integer)
com.ichi2.anki.widgets.DeckAdapter:java.lang.Integer getItemCount()->com.ichi2.anki.widgets.DeckAdapter:[Z $jacocoInit()
com.ichi2.anki.widgets.DeckAdapter:java.lang.Integer getItemCount()->com.ichi2.anki.widgets.DeckAdapter:[Z $jacocoInit()
com.ichi2.anki.widgets.DeckAdapter:java.lang.Integer getItemCount()->com.ichi2.anki.widgets.DeckAdapter:[Z $jacocoInit()
com.ichi2.anki.widgets.DeckAdapter:com.ichi2.anki.widgets.DeckAdapter$ViewHolder onCreateViewHolder(androidx.recyclerview.widget.RecyclerView,java.lang.Integer)->com.ichi2.anki.widgets.DeckAdapter:[Z $jacocoInit()
com.ichi2.anki.widgets.DeckAdapter:com.ichi2.anki.widgets.DeckAdapter$ViewHolder onCreateViewHolder(androidx.recyclerview.widget.RecyclerView,java.lang.Integer)->com.ichi2.anki.widgets.DeckAdapter:com.ichi2.anki.widgets.DeckAdapter$ViewHolder onCreateViewHolder(androidx.recyclerview.widget.RecyclerView,java.lang.Integer)
com.ichi2.anki.widgets.DeckAdapter:com.ichi2.anki.widgets.DeckAdapter$ViewHolder onCreateViewHolder(androidx.recyclerview.widget.RecyclerView,java.lang.Integer)->com.ichi2.anki.widgets.DeckAdapter:[Z $jacocoInit()
com.ichi2.anki.widgets.DeckAdapter:void onBindViewHolder(com.ichi2.anki.widgets.DeckAdapter$ViewHolder,java.lang.Integer)->com.ichi2.anki.widgets.DeckAdapter:[Z $jacocoInit()
com.ichi2.anki.widgets.DeckAdapter:void onBindViewHolder(com.ichi2.anki.widgets.DeckAdapter$ViewHolder,java.lang.Integer)->com.ichi2.anki.widgets.DeckAdapter:void onBindViewHolder(com.ichi2.anki.widgets.DeckAdapter$ViewHolder,java.lang.Integer)
com.ichi2.anki.widgets.DeckAdapter:void onBindViewHolder(com.ichi2.anki.widgets.DeckAdapter$ViewHolder,java.lang.Integer)->com.ichi2.anki.widgets.DeckAdapter:[Z $jacocoInit()
com.ichi2.anki.widgets.DeckAdapter:void onBindViewHolder(com.ichi2.anki.widgets.DeckAdapter$ViewHolder,java.lang.Integer)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.widgets.DeckAdapter:void onBindViewHolder(com.ichi2.anki.widgets.DeckAdapter$ViewHolder,java.lang.Integer)->com.ichi2.libanki.Decks:org.json.JSONObject current()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:java.lang.Long selected()
com.ichi2.libanki.Decks:java.lang.Long selected()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.lang.Long selected()->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.widgets.DeckAdapter:void onBindViewHolder(com.ichi2.anki.widgets.DeckAdapter$ViewHolder,java.lang.Integer)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.widgets.DeckAdapter:void onBindViewHolder(com.ichi2.anki.widgets.DeckAdapter$ViewHolder,java.lang.Integer)->com.ichi2.libanki.Decks:java.lang.Boolean isDyn(java.lang.Long)
com.ichi2.libanki.Decks:java.lang.Boolean isDyn(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.lang.Boolean isDyn(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.getbase.floatingactionbutton.FloatingActionsMenu:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.TouchDelegateGroup:void addTouchDelegate(android.view.TouchDelegate)
com.getbase.floatingactionbutton.FloatingActionsMenu:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.TouchDelegateGroup:void addTouchDelegate(android.view.TouchDelegate)
com.getbase.floatingactionbutton.FloatingActionsMenu:void onLayout(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)->com.getbase.floatingactionbutton.TouchDelegateGroup:void addTouchDelegate(android.view.TouchDelegate)
com.ichi2.anki.DeckPicker:void lambda$onCreate$2$DeckPicker()->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onStop()->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onStop()->com.ichi2.anki.AnkiActivity:void onStop()
com.ichi2.anki.AnkiActivity:void onStop()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void onStop()->com.ichi2.compat.customtabs.CustomTabActivityHelper:void unbindCustomTabsService(com.ichi2.anki.DeckPicker)
com.ichi2.compat.customtabs.CustomTabActivityHelper:void unbindCustomTabsService(com.ichi2.anki.DeckPicker)->com.ichi2.compat.customtabs.CustomTabActivityHelper:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onStop()->com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.DeckPicker:void onStop()->com.ichi2.widget.WidgetStatus:void update(com.ichi2.anki.DeckPicker)
com.ichi2.widget.WidgetStatus:void update(com.ichi2.anki.DeckPicker)->com.ichi2.widget.WidgetStatus:[Z $jacocoInit()
com.ichi2.widget.WidgetStatus:void update(com.ichi2.anki.DeckPicker)->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onStop()->com.ichi2.anki.UIUtils:void saveCollectionInBackground(com.ichi2.anki.DeckPicker)
com.ichi2.anki.UIUtils:void saveCollectionInBackground(com.ichi2.anki.DeckPicker)->com.ichi2.anki.UIUtils:[Z $jacocoInit()
com.ichi2.anki.UIUtils:void saveCollectionInBackground(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.UIUtils:void saveCollectionInBackground(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.UIUtils:void saveCollectionInBackground(com.ichi2.anki.DeckPicker)->com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.UIUtils$1,[Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.UIUtils$1,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.UIUtils$1,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.UIUtils$1,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.UIUtils$1,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.UIUtils$1,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onPreExecute()
com.ichi2.async.DeckTask:void onPreExecute()->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPreExecute()->com.ichi2.async.BaseAsyncTask:void onPreExecute()
com.ichi2.async.BaseAsyncTask:void onPreExecute()->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onPreExecute()->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onDestroy()->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(java.lang.Object)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(java.lang.Object)->com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.BaseAsyncTask:void onPostExecute(java.lang.Object)
com.ichi2.async.BaseAsyncTask:void onPostExecute(java.lang.Object)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onPostExecute(java.lang.Object)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->android.widget.LinearLayout:boolean dispatchTouchEvent(android.view.MotionEvent)
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->android.widget.RelativeLayout:boolean dispatchTouchEvent(android.view.MotionEvent)
com.ichi2.anki.widgets.FabBehavior:java.lang.Boolean layoutDependsOn(androidx.coordinatorlayout.widget.CoordinatorLayout,com.getbase.floatingactionbutton.FloatingActionsMenu,android.widget.RelativeLayout)->com.ichi2.anki.widgets.FabBehavior:[Z $jacocoInit()
com.ichi2.anki.widgets.FabBehavior:java.lang.Boolean layoutDependsOn(androidx.coordinatorlayout.widget.CoordinatorLayout,com.getbase.floatingactionbutton.FloatingActionsMenu,android.widget.RelativeLayout)->com.ichi2.anki.widgets.FabBehavior:java.lang.Boolean layoutDependsOn(androidx.coordinatorlayout.widget.CoordinatorLayout,com.getbase.floatingactionbutton.FloatingActionsMenu,android.widget.RelativeLayout)
com.ichi2.anki.widgets.FabBehavior:java.lang.Boolean layoutDependsOn(androidx.coordinatorlayout.widget.CoordinatorLayout,com.getbase.floatingactionbutton.FloatingActionsMenu,android.widget.RelativeLayout)->com.ichi2.anki.widgets.FabBehavior:[Z $jacocoInit()
com.ichi2.anki.widgets.FabBehavior:java.lang.Boolean layoutDependsOn(androidx.coordinatorlayout.widget.CoordinatorLayout,com.getbase.floatingactionbutton.FloatingActionsMenu,android.widget.ProgressBar)->com.ichi2.anki.widgets.FabBehavior:[Z $jacocoInit()
com.ichi2.anki.widgets.FabBehavior:java.lang.Boolean layoutDependsOn(androidx.coordinatorlayout.widget.CoordinatorLayout,com.getbase.floatingactionbutton.FloatingActionsMenu,android.widget.ProgressBar)->com.ichi2.anki.widgets.FabBehavior:java.lang.Boolean layoutDependsOn(androidx.coordinatorlayout.widget.CoordinatorLayout,com.getbase.floatingactionbutton.FloatingActionsMenu,android.widget.ProgressBar)
com.ichi2.anki.widgets.FabBehavior:java.lang.Boolean layoutDependsOn(androidx.coordinatorlayout.widget.CoordinatorLayout,com.getbase.floatingactionbutton.FloatingActionsMenu,android.widget.ProgressBar)->com.ichi2.anki.widgets.FabBehavior:[Z $jacocoInit()
com.ichi2.anki.widgets.DeckAdapter:java.lang.Integer getItemCount()->com.ichi2.anki.widgets.DeckAdapter:[Z $jacocoInit()
com.ichi2.anki.widgets.DeckAdapter:java.lang.Integer getItemCount()->com.ichi2.anki.widgets.DeckAdapter:[Z $jacocoInit()
com.ichi2.anki.widgets.DeckAdapter:java.lang.Integer getItemCount()->com.ichi2.anki.widgets.DeckAdapter:[Z $jacocoInit()
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->android.widget.RelativeLayout:boolean dispatchTouchEvent(android.view.MotionEvent)
com.ichi2.anki.DeckPicker:com.getbase.floatingactionbutton.FloatingActionsMenu access$000(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:com.getbase.floatingactionbutton.FloatingActionsMenu access$000(com.ichi2.anki.DeckPicker)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void access$100(com.ichi2.anki.DeckPicker,java.lang.Long,java.lang.Boolean)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void access$100(com.ichi2.anki.DeckPicker,java.lang.Long,java.lang.Boolean)->com.ichi2.anki.DeckPicker:void handleDeckSelection(java.lang.Long,java.lang.Boolean)
com.ichi2.anki.DeckPicker:void handleDeckSelection(java.lang.Long,java.lang.Boolean)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void handleDeckSelection(java.lang.Long,java.lang.Boolean)->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.DeckPicker:void handleDeckSelection(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void handleDeckSelection(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:java.lang.Long selected()
com.ichi2.libanki.Decks:java.lang.Long selected()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.lang.Long selected()->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void handleDeckSelection(java.lang.Long,java.lang.Boolean)->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.DeckPicker:void handleDeckSelection(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void handleDeckSelection(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:void select(java.lang.Long)
com.ichi2.libanki.Decks:void select(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:void select(java.lang.Long)->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Decks:void select(java.lang.Long)->com.ichi2.libanki.Decks:java.util.TreeMap children(java.lang.Long)
com.ichi2.libanki.Decks:java.util.TreeMap children(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.util.TreeMap children(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.util.TreeMap children(java.lang.Long)->com.ichi2.libanki.Decks:java.util.ArrayList all()
com.ichi2.libanki.Decks:java.util.ArrayList all()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:void select(java.lang.Long)->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void handleDeckSelection(java.lang.Long,java.lang.Boolean)->com.ichi2.anki.CardBrowser:void clearLastDeckId()
com.ichi2.anki.CardBrowser:void clearLastDeckId()->com.ichi2.anki.CardBrowser:[Z $jacocoInit()
com.ichi2.anki.CardBrowser:void clearLastDeckId()->com.ichi2.anki.AnkiDroidApp:com.ichi2.anki.AnkiDroidApp getInstance()
com.ichi2.anki.AnkiDroidApp:com.ichi2.anki.AnkiDroidApp getInstance()->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void handleDeckSelection(java.lang.Long,java.lang.Boolean)->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.DeckPicker:void handleDeckSelection(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Collection:com.ichi2.libanki.Sched getSched()
com.ichi2.libanki.Collection:com.ichi2.libanki.Sched getSched()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void handleDeckSelection(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Sched:void reset()
com.ichi2.libanki.Sched:void reset()->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:void reset()->com.ichi2.libanki.Sched:void _updateCutoff()
com.ichi2.libanki.Sched:void _updateCutoff()->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _updateCutoff()->com.ichi2.libanki.Utils:java.lang.Double now()
com.ichi2.libanki.Utils:java.lang.Double now()->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _updateCutoff()->com.ichi2.libanki.Collection:java.lang.Long getCrt()
com.ichi2.libanki.Collection:java.lang.Long getCrt()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _updateCutoff()->com.ichi2.libanki.Collection:java.lang.Long getCrt()
com.ichi2.libanki.Collection:java.lang.Long getCrt()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _updateCutoff()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _updateCutoff()->com.ichi2.libanki.Decks:java.util.ArrayList all()
com.ichi2.libanki.Decks:java.util.ArrayList all()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _updateCutoff()->com.ichi2.libanki.Sched:void update(org.json.JSONObject)
com.ichi2.libanki.Sched:void update(org.json.JSONObject)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _updateCutoff()->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:void reset()->com.ichi2.libanki.Sched:void _resetLrn()
com.ichi2.libanki.Sched:void _resetLrn()->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _resetLrn()->com.ichi2.libanki.Sched:void _resetLrnCount()
com.ichi2.libanki.Sched:void _resetLrnCount()->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _resetLrnCount()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _resetLrnCount()->com.ichi2.libanki.Sched:java.lang.String _deckLimit()
com.ichi2.libanki.Sched:java.lang.String _deckLimit()->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.String _deckLimit()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.String _deckLimit()->com.ichi2.libanki.Decks:java.util.LinkedList active()
com.ichi2.libanki.Decks:java.util.LinkedList active()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.util.LinkedList active()->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.String _deckLimit()->com.ichi2.libanki.Utils:java.lang.String ids2str(java.util.LinkedList)
com.ichi2.libanki.Utils:java.lang.String ids2str(java.util.LinkedList)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _resetLrnCount()->com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String)
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String)->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String)->com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteProgram:[Ljava.lang.String; getColumnNames()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()->io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.String getPath()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void clearOrCreateWindow(java.lang.String)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer cursorPickFillWindowStartPosition(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()
io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.String getSql()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:void getBindArgs()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()
io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:void setStartPosition(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteCursor:void close()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.AbstractCursor:void close()
io.requery.android.database.AbstractCursor:void close()->io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractWindowedCursor:void closeWindow()
io.requery.android.database.AbstractWindowedCursor:void closeWindow()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.CursorWindow:void onAllReferencesReleased()
io.requery.android.database.CursorWindow:void onAllReferencesReleased()->io.requery.android.database.CursorWindow:void dispose()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()
io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()->io.requery.android.database.sqlite.SQLiteProgram:void clearBindings()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:void cursorClosed()
com.ichi2.libanki.Sched:void _resetLrnCount()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _resetLrnCount()->com.ichi2.libanki.Sched:java.lang.String _deckLimit()
com.ichi2.libanki.Sched:java.lang.String _deckLimit()->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.String _deckLimit()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.String _deckLimit()->com.ichi2.libanki.Decks:java.util.LinkedList active()
com.ichi2.libanki.Decks:java.util.LinkedList active()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.util.LinkedList active()->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.String _deckLimit()->com.ichi2.libanki.Utils:java.lang.String ids2str(java.util.LinkedList)
com.ichi2.libanki.Utils:java.lang.String ids2str(java.util.LinkedList)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _resetLrnCount()->com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String)
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String)->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String)->com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteProgram:[Ljava.lang.String; getColumnNames()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()->io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.String getPath()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void clearOrCreateWindow(java.lang.String)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer cursorPickFillWindowStartPosition(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()
io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.String getSql()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:void getBindArgs()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()
io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:void setStartPosition(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteCursor:void close()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.AbstractCursor:void close()
io.requery.android.database.AbstractCursor:void close()->io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractWindowedCursor:void closeWindow()
io.requery.android.database.AbstractWindowedCursor:void closeWindow()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.CursorWindow:void onAllReferencesReleased()
io.requery.android.database.CursorWindow:void onAllReferencesReleased()->io.requery.android.database.CursorWindow:void dispose()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()
io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()->io.requery.android.database.sqlite.SQLiteProgram:void clearBindings()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:void cursorClosed()
com.ichi2.libanki.Sched:void _resetLrn()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _resetLrn()->com.ichi2.libanki.Decks:java.util.LinkedList active()
com.ichi2.libanki.Decks:java.util.LinkedList active()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.util.LinkedList active()->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:void reset()->com.ichi2.libanki.Sched:void _resetRev()
com.ichi2.libanki.Sched:void _resetRev()->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _resetRev()->com.ichi2.libanki.Sched:void _resetRevCount()
com.ichi2.libanki.Sched:void _resetRevCount()->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _resetRevCount()->com.ichi2.libanki.Sched:java.lang.Integer _walkingCount(java.lang.reflect.Method,java.lang.reflect.Method)
com.ichi2.libanki.Sched:java.lang.Integer _walkingCount(java.lang.reflect.Method,java.lang.reflect.Method)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _walkingCount(java.lang.reflect.Method,java.lang.reflect.Method)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _walkingCount(java.lang.reflect.Method,java.lang.reflect.Method)->com.ichi2.libanki.Decks:java.util.LinkedList active()
com.ichi2.libanki.Decks:java.util.LinkedList active()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.util.LinkedList active()->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _walkingCount(java.lang.reflect.Method,java.lang.reflect.Method)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _walkingCount(java.lang.reflect.Method,java.lang.reflect.Method)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _walkingCount(java.lang.reflect.Method,java.lang.reflect.Method)->com.ichi2.libanki.Sched:java.lang.Integer _deckRevLimitSingle(org.json.JSONObject)
com.ichi2.libanki.Sched:java.lang.Integer _deckRevLimitSingle(org.json.JSONObject)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _deckRevLimitSingle(org.json.JSONObject)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _deckRevLimitSingle(org.json.JSONObject)->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _walkingCount(java.lang.reflect.Method,java.lang.reflect.Method)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _walkingCount(java.lang.reflect.Method,java.lang.reflect.Method)->com.ichi2.libanki.Decks:java.util.ArrayList parents(java.lang.Long)
com.ichi2.libanki.Decks:java.util.ArrayList parents(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.util.ArrayList parents(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _walkingCount(java.lang.reflect.Method,java.lang.reflect.Method)->com.ichi2.libanki.Sched:java.lang.Integer _cntFnRev(java.lang.Long,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.Integer _cntFnRev(java.lang.Long,java.lang.Integer)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _cntFnRev(java.lang.Long,java.lang.Integer)->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _cntFnRev(java.lang.Long,java.lang.Integer)->com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String)
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String)->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String)->com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteProgram:[Ljava.lang.String; getColumnNames()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()->io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.String getPath()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void clearOrCreateWindow(java.lang.String)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer cursorPickFillWindowStartPosition(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()
io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.String getSql()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:void getBindArgs()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()
io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:void setStartPosition(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteCursor:void close()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.AbstractCursor:void close()
io.requery.android.database.AbstractCursor:void close()->io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractWindowedCursor:void closeWindow()
io.requery.android.database.AbstractWindowedCursor:void closeWindow()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.CursorWindow:void onAllReferencesReleased()
io.requery.android.database.CursorWindow:void onAllReferencesReleased()->io.requery.android.database.CursorWindow:void dispose()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()
io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()->io.requery.android.database.sqlite.SQLiteProgram:void clearBindings()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:void cursorClosed()
com.ichi2.libanki.Sched:void _resetRev()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _resetRev()->com.ichi2.libanki.Decks:java.util.LinkedList active()
com.ichi2.libanki.Decks:java.util.LinkedList active()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.util.LinkedList active()->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:void reset()->com.ichi2.libanki.Sched:void _resetNew()
com.ichi2.libanki.Sched:void _resetNew()->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _resetNew()->com.ichi2.libanki.Sched:void _resetNewCount()
com.ichi2.libanki.Sched:void _resetNewCount()->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _resetNewCount()->com.ichi2.libanki.Sched:java.lang.Integer _walkingCount(java.lang.reflect.Method,java.lang.reflect.Method)
com.ichi2.libanki.Sched:java.lang.Integer _walkingCount(java.lang.reflect.Method,java.lang.reflect.Method)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _walkingCount(java.lang.reflect.Method,java.lang.reflect.Method)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _walkingCount(java.lang.reflect.Method,java.lang.reflect.Method)->com.ichi2.libanki.Decks:java.util.LinkedList active()
com.ichi2.libanki.Decks:java.util.LinkedList active()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.util.LinkedList active()->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _walkingCount(java.lang.reflect.Method,java.lang.reflect.Method)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _walkingCount(java.lang.reflect.Method,java.lang.reflect.Method)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _walkingCount(java.lang.reflect.Method,java.lang.reflect.Method)->com.ichi2.libanki.Sched:java.lang.Integer _deckNewLimitSingle(org.json.JSONObject)
com.ichi2.libanki.Sched:java.lang.Integer _deckNewLimitSingle(org.json.JSONObject)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _deckNewLimitSingle(org.json.JSONObject)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _deckNewLimitSingle(org.json.JSONObject)->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _walkingCount(java.lang.reflect.Method,java.lang.reflect.Method)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _walkingCount(java.lang.reflect.Method,java.lang.reflect.Method)->com.ichi2.libanki.Decks:java.util.ArrayList parents(java.lang.Long)
com.ichi2.libanki.Decks:java.util.ArrayList parents(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.util.ArrayList parents(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _walkingCount(java.lang.reflect.Method,java.lang.reflect.Method)->com.ichi2.libanki.Sched:java.lang.Integer _cntFnNew(java.lang.Long,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.Integer _cntFnNew(java.lang.Long,java.lang.Integer)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _cntFnNew(java.lang.Long,java.lang.Integer)->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _cntFnNew(java.lang.Long,java.lang.Integer)->com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String)
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String)->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String)->com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteProgram:[Ljava.lang.String; getColumnNames()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()->io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.String getPath()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void clearOrCreateWindow(java.lang.String)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer cursorPickFillWindowStartPosition(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()
io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.String getSql()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:void getBindArgs()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()
io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:void setStartPosition(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteCursor:void close()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.AbstractCursor:void close()
io.requery.android.database.AbstractCursor:void close()->io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractWindowedCursor:void closeWindow()
io.requery.android.database.AbstractWindowedCursor:void closeWindow()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.CursorWindow:void onAllReferencesReleased()
io.requery.android.database.CursorWindow:void onAllReferencesReleased()->io.requery.android.database.CursorWindow:void dispose()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()
io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()->io.requery.android.database.sqlite.SQLiteProgram:void clearBindings()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:void cursorClosed()
com.ichi2.libanki.Sched:void _resetNew()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _resetNew()->com.ichi2.libanki.Decks:java.util.LinkedList active()
com.ichi2.libanki.Decks:java.util.LinkedList active()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.util.LinkedList active()->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _resetNew()->com.ichi2.libanki.Sched:void _updateNewCardRatio()
com.ichi2.libanki.Sched:void _updateNewCardRatio()->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _updateNewCardRatio()->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void handleDeckSelection(java.lang.Long,java.lang.Boolean)->com.ichi2.anki.widgets.DeckAdapter:java.lang.Integer findDeckPosition(java.lang.Long)
com.ichi2.anki.widgets.DeckAdapter:java.lang.Integer findDeckPosition(java.lang.Long)->com.ichi2.anki.widgets.DeckAdapter:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void handleDeckSelection(java.lang.Long,java.lang.Boolean)->com.ichi2.anki.widgets.DeckAdapter:java.util.ArrayList getDeckList()
com.ichi2.anki.widgets.DeckAdapter:java.util.ArrayList getDeckList()->com.ichi2.anki.widgets.DeckAdapter:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void handleDeckSelection(java.lang.Long,java.lang.Boolean)->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.DeckPicker:void handleDeckSelection(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Collection:com.ichi2.libanki.Sched getSched()
com.ichi2.libanki.Collection:com.ichi2.libanki.Sched getSched()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void handleDeckSelection(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Sched:[I counts()
com.ichi2.libanki.Sched:[I counts()->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:[I counts()->com.ichi2.libanki.Sched:[I counts(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:[I counts(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void handleDeckSelection(java.lang.Long,java.lang.Boolean)->com.ichi2.anki.DeckPicker:void openReviewer()
com.ichi2.anki.DeckPicker:void openReviewer()->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void openReviewer()->com.ichi2.anki.AnkiActivity:void startActivityForResultWithAnimation(android.content.Intent,java.lang.Integer,java.lang.Integer)
com.ichi2.anki.AnkiActivity:void startActivityForResultWithAnimation(android.content.Intent,java.lang.Integer,java.lang.Integer)->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void startActivityForResultWithAnimation(android.content.Intent,java.lang.Integer,java.lang.Integer)->com.ichi2.anki.AnkiActivity:void enableIntentAnimation(android.content.Intent)
com.ichi2.anki.AnkiActivity:void enableIntentAnimation(android.content.Intent)->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void enableIntentAnimation(android.content.Intent)->com.ichi2.anki.AnkiActivity:java.lang.Boolean animationDisabled()
com.ichi2.anki.AnkiActivity:java.lang.Boolean animationDisabled()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:java.lang.Boolean animationDisabled()->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void startActivityForResultWithAnimation(android.content.Intent,java.lang.Integer,java.lang.Integer)->com.ichi2.anki.AnkiActivity:void enableActivityAnimation(java.lang.Integer)
com.ichi2.anki.AnkiActivity:void enableActivityAnimation(java.lang.Integer)->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void enableActivityAnimation(java.lang.Integer)->com.ichi2.anki.AnkiActivity:java.lang.Boolean animationDisabled()
com.ichi2.anki.AnkiActivity:java.lang.Boolean animationDisabled()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:java.lang.Boolean animationDisabled()->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void enableActivityAnimation(java.lang.Integer)->com.ichi2.anim.ActivityTransitionAnimation:void slide(com.ichi2.anki.DeckPicker,java.lang.Integer)
com.ichi2.anim.ActivityTransitionAnimation:void slide(com.ichi2.anki.DeckPicker,java.lang.Integer)->com.ichi2.anim.ActivityTransitionAnimation:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void openReviewer()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.DeckPicker:void openReviewer()->com.ichi2.libanki.Collection:void startTimebox()
com.ichi2.libanki.Collection:void startTimebox()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Collection:void startTimebox()->com.ichi2.libanki.Utils:java.lang.Double now()
com.ichi2.libanki.Utils:java.lang.Double now()->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Collection:void startTimebox()->com.ichi2.libanki.Sched:java.lang.Integer getReps()
com.ichi2.libanki.Sched:java.lang.Integer getReps()->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.compat.CompatHelper:java.lang.Boolean isLollipop()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.compat.CompatHelper:java.lang.Boolean isLollipop()->com.ichi2.compat.CompatHelper:java.lang.Integer getSdkVersion()
com.ichi2.compat.CompatHelper:java.lang.Integer getSdkVersion()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onPause()->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.anki.Reviewer:void onCreate(android.os.Bundle)->com.ichi2.anki.Reviewer:[Z $jacocoInit()
com.ichi2.anki.Reviewer:void onCreate(android.os.Bundle)->com.ichi2.anki.AbstractFlashcardViewer:void onCreate(android.os.Bundle)
com.ichi2.anki.AbstractFlashcardViewer:void onCreate(android.os.Bundle)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void onCreate(android.os.Bundle)->com.ichi2.anki.reviewer.ReviewerExtRegistry:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void onCreate(android.os.Bundle)->com.ichi2.anki.reviewer.CustomFontsReviewerExt:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void onCreate(android.os.Bundle)->com.ichi2.anki.reviewer.CustomFontsReviewerExt:java.util.HashMap getCustomFontsMap(android.app.ContextImpl)
com.ichi2.anki.reviewer.CustomFontsReviewerExt:java.util.HashMap getCustomFontsMap(android.app.ContextImpl)->com.ichi2.anki.reviewer.CustomFontsReviewerExt:[Z $jacocoInit()
com.ichi2.anki.reviewer.CustomFontsReviewerExt:java.util.HashMap getCustomFontsMap(android.app.ContextImpl)->com.ichi2.libanki.Utils:java.util.ArrayList getCustomFonts(android.app.ContextImpl)
com.ichi2.libanki.Utils:java.util.ArrayList getCustomFonts(android.app.ContextImpl)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.util.ArrayList getCustomFonts(android.app.ContextImpl)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(android.app.ContextImpl)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(android.app.ContextImpl)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(android.app.ContextImpl)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.util.ArrayList getCustomFonts(android.app.ContextImpl)->com.ichi2.anki.AnkiFont:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.util.ArrayList getCustomFonts(android.app.ContextImpl)->com.ichi2.anki.AnkiFont:com.ichi2.anki.AnkiFont createAnkiFont(android.app.ContextImpl,java.lang.String,java.lang.Boolean)
com.ichi2.anki.AnkiFont:com.ichi2.anki.AnkiFont createAnkiFont(android.app.ContextImpl,java.lang.String,java.lang.Boolean)->com.ichi2.anki.AnkiFont:[Z $jacocoInit()
com.ichi2.anki.AnkiFont:com.ichi2.anki.AnkiFont createAnkiFont(android.app.ContextImpl,java.lang.String,java.lang.Boolean)->com.ichi2.libanki.Utils:[Ljava.lang.String; splitFilename(java.lang.String)
com.ichi2.libanki.Utils:[Ljava.lang.String; splitFilename(java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.anki.AnkiFont:com.ichi2.anki.AnkiFont createAnkiFont(android.app.ContextImpl,java.lang.String,java.lang.Boolean)->com.ichi2.anki.AnkiFont:android.graphics.Typeface getTypeface(android.app.ContextImpl,java.lang.String)
com.ichi2.anki.AnkiFont:android.graphics.Typeface getTypeface(android.app.ContextImpl,java.lang.String)->com.ichi2.anki.AnkiFont:[Z $jacocoInit()
com.ichi2.anki.AnkiFont:com.ichi2.anki.AnkiFont createAnkiFont(android.app.ContextImpl,java.lang.String,java.lang.Boolean)->com.ichi2.anki.AnkiFont:[Z $jacocoInit()
com.ichi2.anki.AnkiFont:com.ichi2.anki.AnkiFont createAnkiFont(android.app.ContextImpl,java.lang.String,java.lang.Boolean)->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(android.app.ContextImpl)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(android.app.ContextImpl)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.util.ArrayList getCustomFonts(android.app.ContextImpl)->com.ichi2.anki.AnkiFont:com.ichi2.anki.AnkiFont createAnkiFont(android.app.ContextImpl,java.lang.String,java.lang.Boolean)
com.ichi2.anki.AnkiFont:com.ichi2.anki.AnkiFont createAnkiFont(android.app.ContextImpl,java.lang.String,java.lang.Boolean)->com.ichi2.anki.AnkiFont:[Z $jacocoInit()
com.ichi2.anki.AnkiFont:com.ichi2.anki.AnkiFont createAnkiFont(android.app.ContextImpl,java.lang.String,java.lang.Boolean)->com.ichi2.libanki.Utils:[Ljava.lang.String; splitFilename(java.lang.String)
com.ichi2.libanki.Utils:[Ljava.lang.String; splitFilename(java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.anki.AnkiFont:com.ichi2.anki.AnkiFont createAnkiFont(android.app.ContextImpl,java.lang.String,java.lang.Boolean)->com.ichi2.anki.AnkiFont:android.graphics.Typeface getTypeface(android.app.ContextImpl,java.lang.String)
com.ichi2.anki.AnkiFont:android.graphics.Typeface getTypeface(android.app.ContextImpl,java.lang.String)->com.ichi2.anki.AnkiFont:[Z $jacocoInit()
com.ichi2.anki.AnkiFont:com.ichi2.anki.AnkiFont createAnkiFont(android.app.ContextImpl,java.lang.String,java.lang.Boolean)->com.ichi2.anki.AnkiFont:[Z $jacocoInit()
com.ichi2.anki.AnkiFont:com.ichi2.anki.AnkiFont createAnkiFont(android.app.ContextImpl,java.lang.String,java.lang.Boolean)->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(android.app.ContextImpl)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(android.app.ContextImpl)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.util.ArrayList getCustomFonts(android.app.ContextImpl)->com.ichi2.anki.AnkiFont:com.ichi2.anki.AnkiFont createAnkiFont(android.app.ContextImpl,java.lang.String,java.lang.Boolean)
com.ichi2.anki.AnkiFont:com.ichi2.anki.AnkiFont createAnkiFont(android.app.ContextImpl,java.lang.String,java.lang.Boolean)->com.ichi2.anki.AnkiFont:[Z $jacocoInit()
com.ichi2.anki.AnkiFont:com.ichi2.anki.AnkiFont createAnkiFont(android.app.ContextImpl,java.lang.String,java.lang.Boolean)->com.ichi2.libanki.Utils:[Ljava.lang.String; splitFilename(java.lang.String)
com.ichi2.libanki.Utils:[Ljava.lang.String; splitFilename(java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.anki.AnkiFont:com.ichi2.anki.AnkiFont createAnkiFont(android.app.ContextImpl,java.lang.String,java.lang.Boolean)->com.ichi2.anki.AnkiFont:android.graphics.Typeface getTypeface(android.app.ContextImpl,java.lang.String)
com.ichi2.anki.AnkiFont:android.graphics.Typeface getTypeface(android.app.ContextImpl,java.lang.String)->com.ichi2.anki.AnkiFont:[Z $jacocoInit()
com.ichi2.anki.AnkiFont:com.ichi2.anki.AnkiFont createAnkiFont(android.app.ContextImpl,java.lang.String,java.lang.Boolean)->com.ichi2.anki.AnkiFont:[Z $jacocoInit()
com.ichi2.anki.AnkiFont:com.ichi2.anki.AnkiFont createAnkiFont(android.app.ContextImpl,java.lang.String,java.lang.Boolean)->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(android.app.ContextImpl)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(android.app.ContextImpl)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.util.ArrayList getCustomFonts(android.app.ContextImpl)->com.ichi2.anki.AnkiFont:com.ichi2.anki.AnkiFont createAnkiFont(android.app.ContextImpl,java.lang.String,java.lang.Boolean)
com.ichi2.anki.AnkiFont:com.ichi2.anki.AnkiFont createAnkiFont(android.app.ContextImpl,java.lang.String,java.lang.Boolean)->com.ichi2.anki.AnkiFont:[Z $jacocoInit()
com.ichi2.anki.AnkiFont:com.ichi2.anki.AnkiFont createAnkiFont(android.app.ContextImpl,java.lang.String,java.lang.Boolean)->com.ichi2.libanki.Utils:[Ljava.lang.String; splitFilename(java.lang.String)
com.ichi2.libanki.Utils:[Ljava.lang.String; splitFilename(java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.anki.AnkiFont:com.ichi2.anki.AnkiFont createAnkiFont(android.app.ContextImpl,java.lang.String,java.lang.Boolean)->com.ichi2.anki.AnkiFont:android.graphics.Typeface getTypeface(android.app.ContextImpl,java.lang.String)
com.ichi2.anki.AnkiFont:android.graphics.Typeface getTypeface(android.app.ContextImpl,java.lang.String)->com.ichi2.anki.AnkiFont:[Z $jacocoInit()
com.ichi2.anki.AnkiFont:com.ichi2.anki.AnkiFont createAnkiFont(android.app.ContextImpl,java.lang.String,java.lang.Boolean)->com.ichi2.anki.AnkiFont:[Z $jacocoInit()
com.ichi2.anki.AnkiFont:com.ichi2.anki.AnkiFont createAnkiFont(android.app.ContextImpl,java.lang.String,java.lang.Boolean)->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(android.app.ContextImpl)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(android.app.ContextImpl)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.util.ArrayList getCustomFonts(android.app.ContextImpl)->com.ichi2.anki.AnkiFont:com.ichi2.anki.AnkiFont createAnkiFont(android.app.ContextImpl,java.lang.String,java.lang.Boolean)
com.ichi2.anki.AnkiFont:com.ichi2.anki.AnkiFont createAnkiFont(android.app.ContextImpl,java.lang.String,java.lang.Boolean)->com.ichi2.anki.AnkiFont:[Z $jacocoInit()
com.ichi2.anki.AnkiFont:com.ichi2.anki.AnkiFont createAnkiFont(android.app.ContextImpl,java.lang.String,java.lang.Boolean)->com.ichi2.libanki.Utils:[Ljava.lang.String; splitFilename(java.lang.String)
com.ichi2.libanki.Utils:[Ljava.lang.String; splitFilename(java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.anki.AnkiFont:com.ichi2.anki.AnkiFont createAnkiFont(android.app.ContextImpl,java.lang.String,java.lang.Boolean)->com.ichi2.anki.AnkiFont:android.graphics.Typeface getTypeface(android.app.ContextImpl,java.lang.String)
com.ichi2.anki.AnkiFont:android.graphics.Typeface getTypeface(android.app.ContextImpl,java.lang.String)->com.ichi2.anki.AnkiFont:[Z $jacocoInit()
com.ichi2.anki.AnkiFont:com.ichi2.anki.AnkiFont createAnkiFont(android.app.ContextImpl,java.lang.String,java.lang.Boolean)->com.ichi2.anki.AnkiFont:[Z $jacocoInit()
com.ichi2.anki.AnkiFont:com.ichi2.anki.AnkiFont createAnkiFont(android.app.ContextImpl,java.lang.String,java.lang.Boolean)->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(android.app.ContextImpl)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(android.app.ContextImpl)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.util.ArrayList getCustomFonts(android.app.ContextImpl)->com.ichi2.anki.AnkiFont:com.ichi2.anki.AnkiFont createAnkiFont(android.app.ContextImpl,java.lang.String,java.lang.Boolean)
com.ichi2.anki.AnkiFont:com.ichi2.anki.AnkiFont createAnkiFont(android.app.ContextImpl,java.lang.String,java.lang.Boolean)->com.ichi2.anki.AnkiFont:[Z $jacocoInit()
com.ichi2.anki.AnkiFont:com.ichi2.anki.AnkiFont createAnkiFont(android.app.ContextImpl,java.lang.String,java.lang.Boolean)->com.ichi2.libanki.Utils:[Ljava.lang.String; splitFilename(java.lang.String)
com.ichi2.libanki.Utils:[Ljava.lang.String; splitFilename(java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.anki.AnkiFont:com.ichi2.anki.AnkiFont createAnkiFont(android.app.ContextImpl,java.lang.String,java.lang.Boolean)->com.ichi2.anki.AnkiFont:android.graphics.Typeface getTypeface(android.app.ContextImpl,java.lang.String)
com.ichi2.anki.AnkiFont:android.graphics.Typeface getTypeface(android.app.ContextImpl,java.lang.String)->com.ichi2.anki.AnkiFont:[Z $jacocoInit()
com.ichi2.anki.AnkiFont:com.ichi2.anki.AnkiFont createAnkiFont(android.app.ContextImpl,java.lang.String,java.lang.Boolean)->com.ichi2.anki.AnkiFont:[Z $jacocoInit()
com.ichi2.anki.AnkiFont:com.ichi2.anki.AnkiFont createAnkiFont(android.app.ContextImpl,java.lang.String,java.lang.Boolean)->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(android.app.ContextImpl)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(android.app.ContextImpl)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.util.ArrayList getCustomFonts(android.app.ContextImpl)->com.ichi2.anki.AnkiFont:com.ichi2.anki.AnkiFont createAnkiFont(android.app.ContextImpl,java.lang.String,java.lang.Boolean)
com.ichi2.anki.AnkiFont:com.ichi2.anki.AnkiFont createAnkiFont(android.app.ContextImpl,java.lang.String,java.lang.Boolean)->com.ichi2.anki.AnkiFont:[Z $jacocoInit()
com.ichi2.anki.AnkiFont:com.ichi2.anki.AnkiFont createAnkiFont(android.app.ContextImpl,java.lang.String,java.lang.Boolean)->com.ichi2.libanki.Utils:[Ljava.lang.String; splitFilename(java.lang.String)
com.ichi2.libanki.Utils:[Ljava.lang.String; splitFilename(java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.anki.AnkiFont:com.ichi2.anki.AnkiFont createAnkiFont(android.app.ContextImpl,java.lang.String,java.lang.Boolean)->com.ichi2.anki.AnkiFont:android.graphics.Typeface getTypeface(android.app.ContextImpl,java.lang.String)
com.ichi2.anki.AnkiFont:android.graphics.Typeface getTypeface(android.app.ContextImpl,java.lang.String)->com.ichi2.anki.AnkiFont:[Z $jacocoInit()
com.ichi2.anki.AnkiFont:com.ichi2.anki.AnkiFont createAnkiFont(android.app.ContextImpl,java.lang.String,java.lang.Boolean)->com.ichi2.anki.AnkiFont:[Z $jacocoInit()
com.ichi2.anki.AnkiFont:com.ichi2.anki.AnkiFont createAnkiFont(android.app.ContextImpl,java.lang.String,java.lang.Boolean)->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(android.app.ContextImpl)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(android.app.ContextImpl)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.reviewer.CustomFontsReviewerExt:java.util.HashMap getCustomFontsMap(android.app.ContextImpl)->com.ichi2.anki.AnkiFont:java.lang.String getName()
com.ichi2.anki.AnkiFont:java.lang.String getName()->com.ichi2.anki.AnkiFont:[Z $jacocoInit()
com.ichi2.anki.reviewer.CustomFontsReviewerExt:java.util.HashMap getCustomFontsMap(android.app.ContextImpl)->com.ichi2.anki.AnkiFont:java.lang.String getName()
com.ichi2.anki.AnkiFont:java.lang.String getName()->com.ichi2.anki.AnkiFont:[Z $jacocoInit()
com.ichi2.anki.reviewer.CustomFontsReviewerExt:java.util.HashMap getCustomFontsMap(android.app.ContextImpl)->com.ichi2.anki.AnkiFont:java.lang.String getName()
com.ichi2.anki.AnkiFont:java.lang.String getName()->com.ichi2.anki.AnkiFont:[Z $jacocoInit()
com.ichi2.anki.reviewer.CustomFontsReviewerExt:java.util.HashMap getCustomFontsMap(android.app.ContextImpl)->com.ichi2.anki.AnkiFont:java.lang.String getName()
com.ichi2.anki.AnkiFont:java.lang.String getName()->com.ichi2.anki.AnkiFont:[Z $jacocoInit()
com.ichi2.anki.reviewer.CustomFontsReviewerExt:java.util.HashMap getCustomFontsMap(android.app.ContextImpl)->com.ichi2.anki.AnkiFont:java.lang.String getName()
com.ichi2.anki.AnkiFont:java.lang.String getName()->com.ichi2.anki.AnkiFont:[Z $jacocoInit()
com.ichi2.anki.reviewer.CustomFontsReviewerExt:java.util.HashMap getCustomFontsMap(android.app.ContextImpl)->com.ichi2.anki.AnkiFont:java.lang.String getName()
com.ichi2.anki.AnkiFont:java.lang.String getName()->com.ichi2.anki.AnkiFont:[Z $jacocoInit()
com.ichi2.anki.reviewer.CustomFontsReviewerExt:java.util.HashMap getCustomFontsMap(android.app.ContextImpl)->com.ichi2.anki.AnkiFont:java.lang.String getName()
com.ichi2.anki.AnkiFont:java.lang.String getName()->com.ichi2.anki.AnkiFont:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void onCreate(android.os.Bundle)->com.ichi2.anki.reviewer.CustomFontsReviewerExt:java.lang.String getCustomFontsStyle(java.util.HashMap)
com.ichi2.anki.reviewer.CustomFontsReviewerExt:java.lang.String getCustomFontsStyle(java.util.HashMap)->com.ichi2.anki.reviewer.CustomFontsReviewerExt:[Z $jacocoInit()
com.ichi2.anki.reviewer.CustomFontsReviewerExt:java.lang.String getCustomFontsStyle(java.util.HashMap)->com.ichi2.anki.AnkiFont:java.lang.String getDeclaration()
com.ichi2.anki.AnkiFont:java.lang.String getDeclaration()->com.ichi2.anki.AnkiFont:[Z $jacocoInit()
com.ichi2.anki.AnkiFont:java.lang.String getDeclaration()->com.ichi2.anki.AnkiFont:java.lang.String getCSS(java.lang.Boolean)
com.ichi2.anki.AnkiFont:java.lang.String getCSS(java.lang.Boolean)->com.ichi2.anki.AnkiFont:[Z $jacocoInit()
com.ichi2.anki.reviewer.CustomFontsReviewerExt:java.lang.String getCustomFontsStyle(java.util.HashMap)->com.ichi2.anki.AnkiFont:java.lang.String getDeclaration()
com.ichi2.anki.AnkiFont:java.lang.String getDeclaration()->com.ichi2.anki.AnkiFont:[Z $jacocoInit()
com.ichi2.anki.AnkiFont:java.lang.String getDeclaration()->com.ichi2.anki.AnkiFont:java.lang.String getCSS(java.lang.Boolean)
com.ichi2.anki.AnkiFont:java.lang.String getCSS(java.lang.Boolean)->com.ichi2.anki.AnkiFont:[Z $jacocoInit()
com.ichi2.anki.reviewer.CustomFontsReviewerExt:java.lang.String getCustomFontsStyle(java.util.HashMap)->com.ichi2.anki.AnkiFont:java.lang.String getDeclaration()
com.ichi2.anki.AnkiFont:java.lang.String getDeclaration()->com.ichi2.anki.AnkiFont:[Z $jacocoInit()
com.ichi2.anki.AnkiFont:java.lang.String getDeclaration()->com.ichi2.anki.AnkiFont:java.lang.String getCSS(java.lang.Boolean)
com.ichi2.anki.AnkiFont:java.lang.String getCSS(java.lang.Boolean)->com.ichi2.anki.AnkiFont:[Z $jacocoInit()
com.ichi2.anki.reviewer.CustomFontsReviewerExt:java.lang.String getCustomFontsStyle(java.util.HashMap)->com.ichi2.anki.AnkiFont:java.lang.String getDeclaration()
com.ichi2.anki.AnkiFont:java.lang.String getDeclaration()->com.ichi2.anki.AnkiFont:[Z $jacocoInit()
com.ichi2.anki.AnkiFont:java.lang.String getDeclaration()->com.ichi2.anki.AnkiFont:java.lang.String getCSS(java.lang.Boolean)
com.ichi2.anki.AnkiFont:java.lang.String getCSS(java.lang.Boolean)->com.ichi2.anki.AnkiFont:[Z $jacocoInit()
com.ichi2.anki.reviewer.CustomFontsReviewerExt:java.lang.String getCustomFontsStyle(java.util.HashMap)->com.ichi2.anki.AnkiFont:java.lang.String getDeclaration()
com.ichi2.anki.AnkiFont:java.lang.String getDeclaration()->com.ichi2.anki.AnkiFont:[Z $jacocoInit()
com.ichi2.anki.AnkiFont:java.lang.String getDeclaration()->com.ichi2.anki.AnkiFont:java.lang.String getCSS(java.lang.Boolean)
com.ichi2.anki.AnkiFont:java.lang.String getCSS(java.lang.Boolean)->com.ichi2.anki.AnkiFont:[Z $jacocoInit()
com.ichi2.anki.reviewer.CustomFontsReviewerExt:java.lang.String getCustomFontsStyle(java.util.HashMap)->com.ichi2.anki.AnkiFont:java.lang.String getDeclaration()
com.ichi2.anki.AnkiFont:java.lang.String getDeclaration()->com.ichi2.anki.AnkiFont:[Z $jacocoInit()
com.ichi2.anki.AnkiFont:java.lang.String getDeclaration()->com.ichi2.anki.AnkiFont:java.lang.String getCSS(java.lang.Boolean)
com.ichi2.anki.AnkiFont:java.lang.String getCSS(java.lang.Boolean)->com.ichi2.anki.AnkiFont:[Z $jacocoInit()
com.ichi2.anki.reviewer.CustomFontsReviewerExt:java.lang.String getCustomFontsStyle(java.util.HashMap)->com.ichi2.anki.AnkiFont:java.lang.String getDeclaration()
com.ichi2.anki.AnkiFont:java.lang.String getDeclaration()->com.ichi2.anki.AnkiFont:[Z $jacocoInit()
com.ichi2.anki.AnkiFont:java.lang.String getDeclaration()->com.ichi2.anki.AnkiFont:java.lang.String getCSS(java.lang.Boolean)
com.ichi2.anki.AnkiFont:java.lang.String getCSS(java.lang.Boolean)->com.ichi2.anki.AnkiFont:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void onCreate(android.os.Bundle)->com.ichi2.anki.reviewer.CustomFontsReviewerExt:java.lang.String getDominantFontStyle(android.app.ContextImpl,java.util.HashMap)
com.ichi2.anki.reviewer.CustomFontsReviewerExt:java.lang.String getDominantFontStyle(android.app.ContextImpl,java.util.HashMap)->com.ichi2.anki.reviewer.CustomFontsReviewerExt:[Z $jacocoInit()
com.ichi2.anki.reviewer.CustomFontsReviewerExt:java.lang.String getDominantFontStyle(android.app.ContextImpl,java.util.HashMap)->com.ichi2.anki.reviewer.CustomFontsReviewerExt:java.lang.String getOverrideFontStyle(android.app.ContextImpl,java.util.HashMap)
com.ichi2.anki.reviewer.CustomFontsReviewerExt:java.lang.String getOverrideFontStyle(android.app.ContextImpl,java.util.HashMap)->com.ichi2.anki.reviewer.CustomFontsReviewerExt:[Z $jacocoInit()
com.ichi2.anki.reviewer.CustomFontsReviewerExt:java.lang.String getOverrideFontStyle(android.app.ContextImpl,java.util.HashMap)->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(android.app.ContextImpl)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(android.app.ContextImpl)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.reviewer.CustomFontsReviewerExt:java.lang.String getDominantFontStyle(android.app.ContextImpl,java.util.HashMap)->com.ichi2.anki.reviewer.CustomFontsReviewerExt:java.lang.String getDefaultFontStyle(android.app.ContextImpl,java.util.HashMap)
com.ichi2.anki.reviewer.CustomFontsReviewerExt:java.lang.String getDefaultFontStyle(android.app.ContextImpl,java.util.HashMap)->com.ichi2.anki.reviewer.CustomFontsReviewerExt:[Z $jacocoInit()
com.ichi2.anki.reviewer.CustomFontsReviewerExt:java.lang.String getDefaultFontStyle(android.app.ContextImpl,java.util.HashMap)->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(android.app.ContextImpl)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(android.app.ContextImpl)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.reviewer.CustomFontsReviewerExt:java.lang.String getDominantFontStyle(android.app.ContextImpl,java.util.HashMap)->com.ichi2.anki.reviewer.CustomFontsReviewerExt:java.lang.String getThemeFontStyle()
com.ichi2.anki.reviewer.CustomFontsReviewerExt:java.lang.String getThemeFontStyle()->com.ichi2.anki.reviewer.CustomFontsReviewerExt:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void onCreate(android.os.Bundle)->com.ichi2.anki.Reviewer:android.app.SharedPreferencesImpl restorePreferences()
com.ichi2.anki.Reviewer:android.app.SharedPreferencesImpl restorePreferences()->com.ichi2.anki.Reviewer:[Z $jacocoInit()
com.ichi2.anki.Reviewer:android.app.SharedPreferencesImpl restorePreferences()->com.ichi2.anki.AbstractFlashcardViewer:android.app.SharedPreferencesImpl restorePreferences()
com.ichi2.anki.AbstractFlashcardViewer:android.app.SharedPreferencesImpl restorePreferences()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:android.app.SharedPreferencesImpl restorePreferences()->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(android.app.ContextImpl)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(android.app.ContextImpl)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:android.app.SharedPreferencesImpl restorePreferences()->com.ichi2.anki.AnkiDroidApp:java.lang.Boolean initiateGestures(android.app.SharedPreferencesImpl)
com.ichi2.anki.AnkiDroidApp:java.lang.Boolean initiateGestures(android.app.SharedPreferencesImpl)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.Reviewer:android.app.SharedPreferencesImpl restorePreferences()->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(android.app.ContextImpl)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(android.app.ContextImpl)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void onCreate(android.os.Bundle)->com.ichi2.anki.AnkiActivity:void onCreate(android.os.Bundle)
com.ichi2.anki.AnkiActivity:void onCreate(android.os.Bundle)->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void onCreate(android.os.Bundle)->com.ichi2.themes.Themes:void setTheme(com.ichi2.anki.Reviewer)
com.ichi2.themes.Themes:void setTheme(com.ichi2.anki.Reviewer)->com.ichi2.themes.Themes:[Z $jacocoInit()
com.ichi2.themes.Themes:void setTheme(com.ichi2.anki.Reviewer)->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.AnkiDroidApp)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.AnkiDroidApp)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void onCreate(android.os.Bundle)->com.ichi2.compat.customtabs.CustomTabActivityHelper:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void onCreate(android.os.Bundle)->com.ichi2.anki.Reviewer:java.lang.Integer getContentViewAttr(java.lang.Integer)
com.ichi2.anki.Reviewer:java.lang.Integer getContentViewAttr(java.lang.Integer)->com.ichi2.anki.Reviewer:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Integer getContentViewAttr(java.lang.Integer)->com.ichi2.compat.CompatHelper:java.lang.Integer getSdkVersion()
com.ichi2.compat.CompatHelper:java.lang.Integer getSdkVersion()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void onCreate(android.os.Bundle)->com.ichi2.anki.NavigationDrawerActivity:void initNavigationDrawer(androidx.appcompat.widget.ContentFrameLayout)
com.ichi2.anki.NavigationDrawerActivity:void initNavigationDrawer(androidx.appcompat.widget.ContentFrameLayout)->com.ichi2.anki.NavigationDrawerActivity:[Z $jacocoInit()
com.ichi2.anki.NavigationDrawerActivity:void initNavigationDrawer(androidx.appcompat.widget.ContentFrameLayout)->com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()->com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatHelper getInstance()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatHelper getInstance()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.anki.NavigationDrawerActivity:void initNavigationDrawer(androidx.appcompat.widget.ContentFrameLayout)->com.ichi2.compat.CompatV21:void setStatusBarColor(com.android.internal.policy.PhoneWindow,java.lang.Integer)
com.ichi2.compat.CompatV21:void setStatusBarColor(com.android.internal.policy.PhoneWindow,java.lang.Integer)->com.ichi2.compat.CompatV21:[Z $jacocoInit()
com.ichi2.anki.NavigationDrawerActivity:void initNavigationDrawer(androidx.appcompat.widget.ContentFrameLayout)->com.ichi2.themes.Themes:java.lang.Integer getColorFromAttr(com.ichi2.anki.Reviewer,java.lang.Integer)
com.ichi2.themes.Themes:java.lang.Integer getColorFromAttr(com.ichi2.anki.Reviewer,java.lang.Integer)->com.ichi2.themes.Themes:[Z $jacocoInit()
com.ichi2.themes.Themes:java.lang.Integer getColorFromAttr(com.ichi2.anki.Reviewer,java.lang.Integer)->com.ichi2.themes.Themes:[I getColorFromAttr(com.ichi2.anki.Reviewer,[I)
com.ichi2.themes.Themes:[I getColorFromAttr(com.ichi2.anki.Reviewer,[I)->com.ichi2.themes.Themes:[Z $jacocoInit()
com.ichi2.anki.NavigationDrawerActivity:void initNavigationDrawer(androidx.appcompat.widget.ContentFrameLayout)->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.Reviewer:void onCreate(android.os.Bundle)->com.ichi2.anki.AnkiActivity:void startLoadingCollection()
com.ichi2.anki.AnkiActivity:void startLoadingCollection()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void startLoadingCollection()->com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.AnkiActivity:void startLoadingCollection()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.AnkiActivity:void startLoadingCollection()->com.ichi2.anki.Reviewer:void onCollectionLoaded(com.ichi2.libanki.Collection)
com.ichi2.anki.Reviewer:void onCollectionLoaded(com.ichi2.libanki.Collection)->com.ichi2.anki.Reviewer:[Z $jacocoInit()
com.ichi2.anki.Reviewer:void onCollectionLoaded(com.ichi2.libanki.Collection)->com.ichi2.anki.AbstractFlashcardViewer:void onCollectionLoaded(com.ichi2.libanki.Collection)
com.ichi2.anki.AbstractFlashcardViewer:void onCollectionLoaded(com.ichi2.libanki.Collection)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void onCollectionLoaded(com.ichi2.libanki.Collection)->com.ichi2.anki.AnkiActivity:void onCollectionLoaded(com.ichi2.libanki.Collection)
com.ichi2.anki.AnkiActivity:void onCollectionLoaded(com.ichi2.libanki.Collection)->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void onCollectionLoaded(com.ichi2.libanki.Collection)->com.ichi2.anki.AnkiActivity:void hideProgressBar()
com.ichi2.anki.AnkiActivity:void hideProgressBar()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void onCollectionLoaded(com.ichi2.libanki.Collection)->com.ichi2.libanki.Collection:com.ichi2.libanki.Sched getSched()
com.ichi2.libanki.Collection:com.ichi2.libanki.Sched getSched()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void onCollectionLoaded(com.ichi2.libanki.Collection)->com.ichi2.libanki.Collection:com.ichi2.libanki.Media getMedia()
com.ichi2.libanki.Collection:com.ichi2.libanki.Media getMedia()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void onCollectionLoaded(com.ichi2.libanki.Collection)->com.ichi2.libanki.Media:java.lang.String dir()
com.ichi2.libanki.Media:java.lang.String dir()->com.ichi2.libanki.Media:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void onCollectionLoaded(com.ichi2.libanki.Collection)->com.ichi2.libanki.Utils:java.lang.String getBaseUrl(java.lang.String)
com.ichi2.libanki.Utils:java.lang.String getBaseUrl(java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void onCollectionLoaded(com.ichi2.libanki.Collection)->com.ichi2.anki.AbstractFlashcardViewer:void registerExternalStorageListener()
com.ichi2.anki.AbstractFlashcardViewer:void registerExternalStorageListener()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void onCollectionLoaded(com.ichi2.libanki.Collection)->com.ichi2.anki.AbstractFlashcardViewer:void restoreCollectionPreferences()
com.ichi2.anki.AbstractFlashcardViewer:void restoreCollectionPreferences()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void restoreCollectionPreferences()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.AbstractFlashcardViewer:void restoreCollectionPreferences()->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void restoreCollectionPreferences()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.AbstractFlashcardViewer:void restoreCollectionPreferences()->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void onCollectionLoaded(com.ichi2.libanki.Collection)->com.ichi2.anki.AbstractFlashcardViewer:void initLayout()
com.ichi2.anki.AbstractFlashcardViewer:void initLayout()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void initLayout()->com.afollestad.materialdialogs.util.TypefaceHelper:void get(com.ichi2.anki.Reviewer,java.lang.String)
com.ichi2.anki.AbstractFlashcardViewer:void initLayout()->com.afollestad.materialdialogs.util.TypefaceHelper:void get(com.ichi2.anki.Reviewer,java.lang.String)
com.ichi2.anki.AbstractFlashcardViewer:void initLayout()->com.afollestad.materialdialogs.util.TypefaceHelper:void get(com.ichi2.anki.Reviewer,java.lang.String)
com.ichi2.anki.AbstractFlashcardViewer:void initLayout()->com.afollestad.materialdialogs.util.TypefaceHelper:void get(com.ichi2.anki.Reviewer,java.lang.String)
com.ichi2.anki.AbstractFlashcardViewer:void initLayout()->com.afollestad.materialdialogs.util.TypefaceHelper:void get(com.ichi2.anki.Reviewer,java.lang.String)
com.ichi2.anki.AbstractFlashcardViewer:void initLayout()->com.afollestad.materialdialogs.util.TypefaceHelper:void get(com.ichi2.anki.Reviewer,java.lang.String)
com.ichi2.anki.AbstractFlashcardViewer:void initLayout()->com.afollestad.materialdialogs.util.TypefaceHelper:void get(com.ichi2.anki.Reviewer,java.lang.String)
com.ichi2.anki.AbstractFlashcardViewer:void initLayout()->com.afollestad.materialdialogs.util.TypefaceHelper:void get(com.ichi2.anki.Reviewer,java.lang.String)
com.ichi2.anki.AbstractFlashcardViewer:void initLayout()->com.afollestad.materialdialogs.util.TypefaceHelper:void get(com.ichi2.anki.Reviewer,java.lang.String)
com.ichi2.anki.AbstractFlashcardViewer:void initLayout()->com.ichi2.anki.Reviewer:void initControls()
com.ichi2.anki.Reviewer:void initControls()->com.ichi2.anki.Reviewer:[Z $jacocoInit()
com.ichi2.anki.Reviewer:void initControls()->com.ichi2.anki.AbstractFlashcardViewer:void initControls()
com.ichi2.anki.AbstractFlashcardViewer:void initControls()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void initControls()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void initLayout()->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void onCollectionLoaded(com.ichi2.libanki.Collection)->com.ichi2.anki.Reviewer:void setTitle()
com.ichi2.anki.Reviewer:void setTitle()->com.ichi2.anki.Reviewer:[Z $jacocoInit()
com.ichi2.anki.Reviewer:void setTitle()->com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.Reviewer:void setTitle()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.Reviewer:void setTitle()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.Reviewer:void setTitle()->com.ichi2.libanki.Decks:org.json.JSONObject current()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:java.lang.Long selected()
com.ichi2.libanki.Decks:java.lang.Long selected()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.lang.Long selected()->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.Reviewer:void setTitle()->com.ichi2.anki.NavigationDrawerActivity:void setTitle(java.lang.String)
com.ichi2.anki.NavigationDrawerActivity:void setTitle(java.lang.String)->com.ichi2.anki.NavigationDrawerActivity:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void onCollectionLoaded(com.ichi2.libanki.Collection)->com.ichi2.libanki.Utils:java.lang.String convertStreamToString(android.content.res.AssetManager$AssetInputStream)
com.ichi2.libanki.Utils:java.lang.String convertStreamToString(android.content.res.AssetManager$AssetInputStream)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void onCollectionLoaded(com.ichi2.libanki.Collection)->com.ichi2.anki.Lookup:java.lang.Boolean initialize(com.ichi2.anki.Reviewer)
com.ichi2.anki.Lookup:java.lang.Boolean initialize(com.ichi2.anki.Reviewer)->com.ichi2.anki.Lookup:[Z $jacocoInit()
com.ichi2.anki.Lookup:java.lang.Boolean initialize(com.ichi2.anki.Reviewer)->com.ichi2.anki.AnkiDroidApp:com.ichi2.anki.AnkiDroidApp getInstance()
com.ichi2.anki.AnkiDroidApp:com.ichi2.anki.AnkiDroidApp getInstance()->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.Lookup:java.lang.Boolean initialize(com.ichi2.anki.Reviewer)->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(android.app.ContextImpl)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(android.app.ContextImpl)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void onCollectionLoaded(com.ichi2.libanki.Collection)->com.ichi2.anki.AbstractFlashcardViewer:void updateScreenCounts()
com.ichi2.anki.AbstractFlashcardViewer:void updateScreenCounts()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.Reviewer:void onCollectionLoaded(com.ichi2.libanki.Collection)->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getParentDid()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getParentDid()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getParentDid()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getParentDid()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getParentDid()->com.ichi2.libanki.Decks:org.json.JSONObject current()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:java.lang.Long selected()
com.ichi2.libanki.Decks:java.lang.Long selected()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.lang.Long selected()->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.Reviewer:void onCollectionLoaded(com.ichi2.libanki.Collection)->com.ichi2.anki.MetaDB:[Z $jacocoInit()
com.ichi2.anki.Reviewer:void onCollectionLoaded(com.ichi2.libanki.Collection)->com.ichi2.anki.MetaDB:java.lang.Boolean getWhiteboardState(com.ichi2.anki.Reviewer,java.lang.Long)
com.ichi2.anki.MetaDB:java.lang.Boolean getWhiteboardState(com.ichi2.anki.Reviewer,java.lang.Long)->com.ichi2.anki.MetaDB:[Z $jacocoInit()
com.ichi2.anki.MetaDB:java.lang.Boolean getWhiteboardState(com.ichi2.anki.Reviewer,java.lang.Long)->com.ichi2.anki.MetaDB:void openDBIfClosed(com.ichi2.anki.Reviewer)
com.ichi2.anki.MetaDB:void openDBIfClosed(com.ichi2.anki.Reviewer)->com.ichi2.anki.MetaDB:[Z $jacocoInit()
com.ichi2.anki.MetaDB:void openDBIfClosed(com.ichi2.anki.Reviewer)->com.ichi2.anki.MetaDB:void openDB(com.ichi2.anki.Reviewer)
com.ichi2.anki.MetaDB:void openDB(com.ichi2.anki.Reviewer)->com.ichi2.anki.MetaDB:[Z $jacocoInit()
com.ichi2.anki.Reviewer:void onCollectionLoaded(com.ichi2.libanki.Collection)->com.ichi2.libanki.Collection:com.ichi2.libanki.Sched getSched()
com.ichi2.libanki.Collection:com.ichi2.libanki.Sched getSched()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.Reviewer:void onCollectionLoaded(com.ichi2.libanki.Collection)->com.ichi2.libanki.Sched:void reset()
com.ichi2.libanki.Sched:void reset()->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:void reset()->com.ichi2.libanki.Sched:void _updateCutoff()
com.ichi2.libanki.Sched:void _updateCutoff()->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _updateCutoff()->com.ichi2.libanki.Utils:java.lang.Double now()
com.ichi2.libanki.Utils:java.lang.Double now()->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _updateCutoff()->com.ichi2.libanki.Collection:java.lang.Long getCrt()
com.ichi2.libanki.Collection:java.lang.Long getCrt()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _updateCutoff()->com.ichi2.libanki.Collection:java.lang.Long getCrt()
com.ichi2.libanki.Collection:java.lang.Long getCrt()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _updateCutoff()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _updateCutoff()->com.ichi2.libanki.Decks:java.util.ArrayList all()
com.ichi2.libanki.Decks:java.util.ArrayList all()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _updateCutoff()->com.ichi2.libanki.Sched:void update(org.json.JSONObject)
com.ichi2.libanki.Sched:void update(org.json.JSONObject)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _updateCutoff()->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:void reset()->com.ichi2.libanki.Sched:void _resetLrn()
com.ichi2.libanki.Sched:void _resetLrn()->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _resetLrn()->com.ichi2.libanki.Sched:void _resetLrnCount()
com.ichi2.libanki.Sched:void _resetLrnCount()->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _resetLrnCount()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _resetLrnCount()->com.ichi2.libanki.Sched:java.lang.String _deckLimit()
com.ichi2.libanki.Sched:java.lang.String _deckLimit()->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.String _deckLimit()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.String _deckLimit()->com.ichi2.libanki.Decks:java.util.LinkedList active()
com.ichi2.libanki.Decks:java.util.LinkedList active()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.util.LinkedList active()->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.String _deckLimit()->com.ichi2.libanki.Utils:java.lang.String ids2str(java.util.LinkedList)
com.ichi2.libanki.Utils:java.lang.String ids2str(java.util.LinkedList)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _resetLrnCount()->com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String)
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String)->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String)->com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteProgram:[Ljava.lang.String; getColumnNames()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()->io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.String getPath()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void clearOrCreateWindow(java.lang.String)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer cursorPickFillWindowStartPosition(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()
io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.String getSql()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:void getBindArgs()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()
io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:void setStartPosition(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteCursor:void close()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.AbstractCursor:void close()
io.requery.android.database.AbstractCursor:void close()->io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractWindowedCursor:void closeWindow()
io.requery.android.database.AbstractWindowedCursor:void closeWindow()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.CursorWindow:void onAllReferencesReleased()
io.requery.android.database.CursorWindow:void onAllReferencesReleased()->io.requery.android.database.CursorWindow:void dispose()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()
io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()->io.requery.android.database.sqlite.SQLiteProgram:void clearBindings()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:void cursorClosed()
com.ichi2.libanki.Sched:void _resetLrnCount()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _resetLrnCount()->com.ichi2.libanki.Sched:java.lang.String _deckLimit()
com.ichi2.libanki.Sched:java.lang.String _deckLimit()->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.String _deckLimit()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.String _deckLimit()->com.ichi2.libanki.Decks:java.util.LinkedList active()
com.ichi2.libanki.Decks:java.util.LinkedList active()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.util.LinkedList active()->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.String _deckLimit()->com.ichi2.libanki.Utils:java.lang.String ids2str(java.util.LinkedList)
com.ichi2.libanki.Utils:java.lang.String ids2str(java.util.LinkedList)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _resetLrnCount()->com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String)
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String)->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String)->com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteProgram:[Ljava.lang.String; getColumnNames()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()->io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.String getPath()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void clearOrCreateWindow(java.lang.String)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer cursorPickFillWindowStartPosition(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()
io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.String getSql()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:void getBindArgs()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()
io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:void setStartPosition(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteCursor:void close()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.AbstractCursor:void close()
io.requery.android.database.AbstractCursor:void close()->io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractWindowedCursor:void closeWindow()
io.requery.android.database.AbstractWindowedCursor:void closeWindow()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.CursorWindow:void onAllReferencesReleased()
io.requery.android.database.CursorWindow:void onAllReferencesReleased()->io.requery.android.database.CursorWindow:void dispose()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()
io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()->io.requery.android.database.sqlite.SQLiteProgram:void clearBindings()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:void cursorClosed()
com.ichi2.libanki.Sched:void _resetLrn()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _resetLrn()->com.ichi2.libanki.Decks:java.util.LinkedList active()
com.ichi2.libanki.Decks:java.util.LinkedList active()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.util.LinkedList active()->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:void reset()->com.ichi2.libanki.Sched:void _resetRev()
com.ichi2.libanki.Sched:void _resetRev()->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _resetRev()->com.ichi2.libanki.Sched:void _resetRevCount()
com.ichi2.libanki.Sched:void _resetRevCount()->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _resetRevCount()->com.ichi2.libanki.Sched:java.lang.Integer _walkingCount(java.lang.reflect.Method,java.lang.reflect.Method)
com.ichi2.libanki.Sched:java.lang.Integer _walkingCount(java.lang.reflect.Method,java.lang.reflect.Method)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _walkingCount(java.lang.reflect.Method,java.lang.reflect.Method)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _walkingCount(java.lang.reflect.Method,java.lang.reflect.Method)->com.ichi2.libanki.Decks:java.util.LinkedList active()
com.ichi2.libanki.Decks:java.util.LinkedList active()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.util.LinkedList active()->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _walkingCount(java.lang.reflect.Method,java.lang.reflect.Method)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _walkingCount(java.lang.reflect.Method,java.lang.reflect.Method)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _walkingCount(java.lang.reflect.Method,java.lang.reflect.Method)->com.ichi2.libanki.Sched:java.lang.Integer _deckRevLimitSingle(org.json.JSONObject)
com.ichi2.libanki.Sched:java.lang.Integer _deckRevLimitSingle(org.json.JSONObject)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _deckRevLimitSingle(org.json.JSONObject)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _deckRevLimitSingle(org.json.JSONObject)->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _walkingCount(java.lang.reflect.Method,java.lang.reflect.Method)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _walkingCount(java.lang.reflect.Method,java.lang.reflect.Method)->com.ichi2.libanki.Decks:java.util.ArrayList parents(java.lang.Long)
com.ichi2.libanki.Decks:java.util.ArrayList parents(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.util.ArrayList parents(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _walkingCount(java.lang.reflect.Method,java.lang.reflect.Method)->com.ichi2.libanki.Sched:java.lang.Integer _cntFnRev(java.lang.Long,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.Integer _cntFnRev(java.lang.Long,java.lang.Integer)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _cntFnRev(java.lang.Long,java.lang.Integer)->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _cntFnRev(java.lang.Long,java.lang.Integer)->com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String)
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String)->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String)->com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteProgram:[Ljava.lang.String; getColumnNames()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()->io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.String getPath()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void clearOrCreateWindow(java.lang.String)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer cursorPickFillWindowStartPosition(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()
io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.String getSql()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:void getBindArgs()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()
io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:void setStartPosition(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteCursor:void close()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.AbstractCursor:void close()
io.requery.android.database.AbstractCursor:void close()->io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractWindowedCursor:void closeWindow()
io.requery.android.database.AbstractWindowedCursor:void closeWindow()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.CursorWindow:void onAllReferencesReleased()
io.requery.android.database.CursorWindow:void onAllReferencesReleased()->io.requery.android.database.CursorWindow:void dispose()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()
io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()->io.requery.android.database.sqlite.SQLiteProgram:void clearBindings()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:void cursorClosed()
com.ichi2.libanki.Sched:void _resetRev()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _resetRev()->com.ichi2.libanki.Decks:java.util.LinkedList active()
com.ichi2.libanki.Decks:java.util.LinkedList active()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.util.LinkedList active()->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:void reset()->com.ichi2.libanki.Sched:void _resetNew()
com.ichi2.libanki.Sched:void _resetNew()->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _resetNew()->com.ichi2.libanki.Sched:void _resetNewCount()
com.ichi2.libanki.Sched:void _resetNewCount()->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _resetNewCount()->com.ichi2.libanki.Sched:java.lang.Integer _walkingCount(java.lang.reflect.Method,java.lang.reflect.Method)
com.ichi2.libanki.Sched:java.lang.Integer _walkingCount(java.lang.reflect.Method,java.lang.reflect.Method)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _walkingCount(java.lang.reflect.Method,java.lang.reflect.Method)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _walkingCount(java.lang.reflect.Method,java.lang.reflect.Method)->com.ichi2.libanki.Decks:java.util.LinkedList active()
com.ichi2.libanki.Decks:java.util.LinkedList active()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.util.LinkedList active()->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _walkingCount(java.lang.reflect.Method,java.lang.reflect.Method)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _walkingCount(java.lang.reflect.Method,java.lang.reflect.Method)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _walkingCount(java.lang.reflect.Method,java.lang.reflect.Method)->com.ichi2.libanki.Sched:java.lang.Integer _deckNewLimitSingle(org.json.JSONObject)
com.ichi2.libanki.Sched:java.lang.Integer _deckNewLimitSingle(org.json.JSONObject)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _deckNewLimitSingle(org.json.JSONObject)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _deckNewLimitSingle(org.json.JSONObject)->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _walkingCount(java.lang.reflect.Method,java.lang.reflect.Method)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _walkingCount(java.lang.reflect.Method,java.lang.reflect.Method)->com.ichi2.libanki.Decks:java.util.ArrayList parents(java.lang.Long)
com.ichi2.libanki.Decks:java.util.ArrayList parents(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.util.ArrayList parents(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _walkingCount(java.lang.reflect.Method,java.lang.reflect.Method)->com.ichi2.libanki.Sched:java.lang.Integer _cntFnNew(java.lang.Long,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.Integer _cntFnNew(java.lang.Long,java.lang.Integer)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _cntFnNew(java.lang.Long,java.lang.Integer)->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _cntFnNew(java.lang.Long,java.lang.Integer)->com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String)
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String)->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String)->com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteProgram:[Ljava.lang.String; getColumnNames()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()->io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.String getPath()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void clearOrCreateWindow(java.lang.String)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer cursorPickFillWindowStartPosition(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()
io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.String getSql()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:void getBindArgs()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()
io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:void setStartPosition(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.DB:java.lang.Integer queryScalar(java.lang.String,[Ljava.lang.String;)->io.requery.android.database.sqlite.SQLiteCursor:void close()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.AbstractCursor:void close()
io.requery.android.database.AbstractCursor:void close()->io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractWindowedCursor:void closeWindow()
io.requery.android.database.AbstractWindowedCursor:void closeWindow()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.CursorWindow:void onAllReferencesReleased()
io.requery.android.database.CursorWindow:void onAllReferencesReleased()->io.requery.android.database.CursorWindow:void dispose()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()
io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()->io.requery.android.database.sqlite.SQLiteProgram:void clearBindings()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:void cursorClosed()
com.ichi2.libanki.Sched:void _resetNew()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _resetNew()->com.ichi2.libanki.Decks:java.util.LinkedList active()
com.ichi2.libanki.Decks:java.util.LinkedList active()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.util.LinkedList active()->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _resetNew()->com.ichi2.libanki.Sched:void _updateNewCardRatio()
com.ichi2.libanki.Sched:void _updateNewCardRatio()->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:void _updateNewCardRatio()->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.Reviewer:void onCollectionLoaded(com.ichi2.libanki.Collection)->com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.AbstractFlashcardViewer$9,[Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.AbstractFlashcardViewer$9,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.AbstractFlashcardViewer$9,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.AbstractFlashcardViewer$9,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.AbstractFlashcardViewer$9,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.AbstractFlashcardViewer$9,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onPreExecute()
com.ichi2.async.DeckTask:void onPreExecute()->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPreExecute()->com.ichi2.async.BaseAsyncTask:void onPreExecute()
com.ichi2.async.BaseAsyncTask:void onPreExecute()->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onPreExecute()->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPreExecute()->com.ichi2.anki.AbstractFlashcardViewer:void access$1300(com.ichi2.anki.Reviewer)
com.ichi2.anki.AbstractFlashcardViewer:void access$1300(com.ichi2.anki.Reviewer)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void access$1300(com.ichi2.anki.Reviewer)->com.ichi2.anki.AbstractFlashcardViewer:void blockControls()
com.ichi2.anki.AbstractFlashcardViewer:void blockControls()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void blockControls()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.Reviewer:void onCollectionLoaded(com.ichi2.libanki.Collection)->com.ichi2.anki.Reviewer:void disableDrawerSwipeOnConflicts()
com.ichi2.anki.Reviewer:void disableDrawerSwipeOnConflicts()->com.ichi2.anki.Reviewer:[Z $jacocoInit()
com.ichi2.anki.Reviewer:void disableDrawerSwipeOnConflicts()->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(android.app.ContextImpl)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(android.app.ContextImpl)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.Reviewer:void disableDrawerSwipeOnConflicts()->com.ichi2.anki.AnkiDroidApp:java.lang.Boolean initiateGestures(android.app.SharedPreferencesImpl)
com.ichi2.anki.AnkiDroidApp:java.lang.Boolean initiateGestures(android.app.SharedPreferencesImpl)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.Reviewer:void onCollectionLoaded(com.ichi2.libanki.Collection)->com.ichi2.libanki.Sched:void setContext(java.lang.ref.WeakReference)
com.ichi2.libanki.Sched:void setContext(java.lang.ref.WeakReference)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void onStart()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void onStart()->com.ichi2.compat.customtabs.CustomTabActivityHelper:void bindCustomTabsService(com.ichi2.anki.Reviewer)
com.ichi2.compat.customtabs.CustomTabActivityHelper:void bindCustomTabsService(com.ichi2.anki.Reviewer)->com.ichi2.compat.customtabs.CustomTabActivityHelper:[Z $jacocoInit()
com.ichi2.compat.customtabs.CustomTabActivityHelper:void bindCustomTabsService(com.ichi2.anki.Reviewer)->com.ichi2.compat.customtabs.CustomTabsHelper:void getPackageNameToUse(com.ichi2.anki.Reviewer)
com.ichi2.compat.customtabs.CustomTabsHelper:void getPackageNameToUse(com.ichi2.anki.Reviewer)->com.ichi2.compat.customtabs.CustomTabsHelper:[Z $jacocoInit()
com.ichi2.compat.customtabs.CustomTabsHelper:void getPackageNameToUse(com.ichi2.anki.Reviewer)->com.ichi2.compat.CompatHelper:java.lang.Integer getSdkVersion()
com.ichi2.compat.CompatHelper:java.lang.Integer getSdkVersion()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.anki.NavigationDrawerActivity:void onPostCreate(android.os.Bundle)->com.ichi2.anki.NavigationDrawerActivity:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void onResume()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void onResume()->com.ichi2.anki.AnkiActivity:void onResume()
com.ichi2.anki.AnkiActivity:void onResume()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void onResume()->com.ichi2.anki.dialogs.DialogHandler:void readMessage()
com.ichi2.anki.dialogs.DialogHandler:void readMessage()->com.ichi2.anki.dialogs.DialogHandler:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void onResume()->com.ichi2.anki.AbstractFlashcardViewer:void resumeTimer()
com.ichi2.anki.AbstractFlashcardViewer:void resumeTimer()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void onResume()->com.ichi2.libanki.Sound:void setContext(java.lang.ref.WeakReference)
com.ichi2.libanki.Sound:void setContext(java.lang.ref.WeakReference)->com.ichi2.libanki.Sound:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void onResume()->com.ichi2.anki.Reviewer:void setTitle()
com.ichi2.anki.Reviewer:void setTitle()->com.ichi2.anki.Reviewer:[Z $jacocoInit()
com.ichi2.anki.Reviewer:void setTitle()->com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.Reviewer:void setTitle()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.Reviewer:void setTitle()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.Reviewer:void setTitle()->com.ichi2.libanki.Decks:org.json.JSONObject current()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:java.lang.Long selected()
com.ichi2.libanki.Decks:java.lang.Long selected()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.lang.Long selected()->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.Reviewer:void setTitle()->com.ichi2.anki.NavigationDrawerActivity:void setTitle(java.lang.String)
com.ichi2.anki.NavigationDrawerActivity:void setTitle(java.lang.String)->com.ichi2.anki.NavigationDrawerActivity:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void onResume()->com.ichi2.anki.AbstractFlashcardViewer:void updateScreenCounts()
com.ichi2.anki.AbstractFlashcardViewer:void updateScreenCounts()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void onResume()->com.ichi2.anki.NavigationDrawerActivity:void selectNavigationItem(java.lang.Integer)
com.ichi2.anki.NavigationDrawerActivity:void selectNavigationItem(java.lang.Integer)->com.ichi2.anki.NavigationDrawerActivity:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.AbstractFlashcardViewer:void access$1100(com.ichi2.anki.Reviewer)
com.ichi2.anki.AbstractFlashcardViewer:void access$1100(com.ichi2.anki.Reviewer)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void access$1100(com.ichi2.anki.Reviewer)->com.ichi2.anki.AbstractFlashcardViewer:void updateTypeAnswerInfo()
com.ichi2.anki.AbstractFlashcardViewer:void updateTypeAnswerInfo()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateTypeAnswerInfo()->com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean)
com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean)->com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean,java.lang.Boolean)
com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Card:java.lang.String css()
com.ichi2.libanki.Card:java.lang.String css()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.String css()->com.ichi2.libanki.Card:org.json.JSONObject model()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()
com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)
com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Note:java.lang.Long getMid()
com.ichi2.libanki.Note:java.lang.Long getMid()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Card:java.util.HashMap _getQA(java.lang.Boolean,java.lang.Boolean)
com.ichi2.libanki.Card:java.util.HashMap _getQA(java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.AnkiActivity:void hideProgressBar()
com.ichi2.anki.AnkiActivity:void hideProgressBar()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.AbstractFlashcardViewer:void access$1200(com.ichi2.anki.Reviewer)
com.ichi2.anki.AbstractFlashcardViewer:void access$1200(com.ichi2.anki.Reviewer)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void access$1200(com.ichi2.anki.Reviewer)->com.ichi2.anki.AbstractFlashcardViewer:void unblockControls()
com.ichi2.anki.AbstractFlashcardViewer:void unblockControls()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void unblockControls()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.Reviewer:void displayCardQuestion()
com.ichi2.anki.Reviewer:void displayCardQuestion()->com.ichi2.anki.Reviewer:[Z $jacocoInit()
com.ichi2.anki.Reviewer:void displayCardQuestion()->com.ichi2.anki.AbstractFlashcardViewer:void initTimer()
com.ichi2.anki.AbstractFlashcardViewer:void initTimer()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void initTimer()->com.ichi2.libanki.Card:java.lang.Boolean showTimer()
com.ichi2.libanki.Card:java.lang.Boolean showTimer()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.Boolean showTimer()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.Boolean showTimer()->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void initTimer()->com.ichi2.libanki.Card:java.lang.Integer timeLimit()
com.ichi2.libanki.Card:java.lang.Integer timeLimit()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.Integer timeLimit()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.Integer timeLimit()->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.Reviewer:void displayCardQuestion()->com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.anki.AbstractFlashcardViewer:void setInterface()
com.ichi2.anki.AbstractFlashcardViewer:void setInterface()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void setInterface()->com.ichi2.anki.AbstractFlashcardViewer:com.ichi2.anki.AbstractFlashcardViewer$MyWebView createWebView()
com.ichi2.anki.AbstractFlashcardViewer:com.ichi2.anki.AbstractFlashcardViewer$MyWebView createWebView()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void setInterface()->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.libanki.Card:java.lang.Boolean isEmpty()
com.ichi2.libanki.Card:java.lang.Boolean isEmpty()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.Boolean isEmpty()->com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()
com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.Boolean isEmpty()->com.ichi2.libanki.Card:org.json.JSONObject model()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()
com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)
com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Note:java.lang.Long getMid()
com.ichi2.libanki.Note:java.lang.Long getMid()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.Boolean isEmpty()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)
com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.Boolean isEmpty()->com.ichi2.libanki.Note:[Ljava.lang.String; getFields()
com.ichi2.libanki.Note:[Ljava.lang.String; getFields()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.Boolean isEmpty()->com.ichi2.libanki.Utils:java.lang.String joinFields([Ljava.lang.String;)
com.ichi2.libanki.Utils:java.lang.String joinFields([Ljava.lang.String;)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.Boolean isEmpty()->com.ichi2.libanki.Models:java.util.ArrayList availOrds(org.json.JSONObject,java.lang.String)
com.ichi2.libanki.Models:java.util.ArrayList availOrds(org.json.JSONObject,java.lang.String)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.libanki.Models:java.util.ArrayList availOrds(org.json.JSONObject,java.lang.String)->com.ichi2.libanki.Utils:[Ljava.lang.String; splitFields(java.lang.String)
com.ichi2.libanki.Utils:[Ljava.lang.String; splitFields(java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.libanki.Card:java.lang.String q()
com.ichi2.libanki.Card:java.lang.String q()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.String q()->com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean)
com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean)->com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean,java.lang.Boolean)
com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Card:java.lang.String css()
com.ichi2.libanki.Card:java.lang.String css()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.String css()->com.ichi2.libanki.Card:org.json.JSONObject model()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()
com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)
com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Note:java.lang.Long getMid()
com.ichi2.libanki.Note:java.lang.Long getMid()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Card:java.util.HashMap _getQA(java.lang.Boolean,java.lang.Boolean)
com.ichi2.libanki.Card:java.util.HashMap _getQA(java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.libanki.Collection:com.ichi2.libanki.Media getMedia()
com.ichi2.libanki.Collection:com.ichi2.libanki.Media getMedia()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.libanki.Media:java.lang.String escapeImages(java.lang.String)
com.ichi2.libanki.Media:java.lang.String escapeImages(java.lang.String)->com.ichi2.libanki.Media:[Z $jacocoInit()
com.ichi2.libanki.Media:java.lang.String escapeImages(java.lang.String)->com.ichi2.libanki.Media:java.lang.String escapeImages(java.lang.String,java.lang.Boolean)
com.ichi2.libanki.Media:java.lang.String escapeImages(java.lang.String,java.lang.Boolean)->com.ichi2.libanki.Media:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.String typeAnsQuestionFilter(java.lang.String)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String typeAnsQuestionFilter(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.String enrichWithQADiv(java.lang.String,java.lang.Boolean)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String enrichWithQADiv(java.lang.String,java.lang.Boolean)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.libanki.Sound:void resetSounds()
com.ichi2.libanki.Sound:void resetSounds()->com.ichi2.libanki.Sound:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.libanki.Sound:void addSounds(java.lang.String,java.lang.String,java.lang.Integer)
com.ichi2.libanki.Sound:void addSounds(java.lang.String,java.lang.String,java.lang.Integer)->com.ichi2.libanki.Sound:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.libanki.Sound:java.lang.String expandSounds(java.lang.String,java.lang.String)
com.ichi2.libanki.Sound:java.lang.String expandSounds(java.lang.String,java.lang.String)->com.ichi2.libanki.Sound:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.libanki.Card:java.lang.Integer getOrd()
com.ichi2.libanki.Card:java.lang.Integer getOrd()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.libanki.template.Template:java.lang.Boolean textContainsMathjax(java.lang.String)
com.ichi2.libanki.template.Template:java.lang.Boolean textContainsMathjax(java.lang.String)->com.ichi2.libanki.template.Template:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.anki.reviewer.ReviewerExtRegistry:void updateCssStyle(java.lang.StringBuilder)
com.ichi2.anki.reviewer.ReviewerExtRegistry:void updateCssStyle(java.lang.StringBuilder)->com.ichi2.anki.reviewer.ReviewerExtRegistry:[Z $jacocoInit()
com.ichi2.anki.reviewer.ReviewerExtRegistry:void updateCssStyle(java.lang.StringBuilder)->com.ichi2.anki.reviewer.CustomFontsReviewerExt:void updateCssStyle(java.lang.StringBuilder)
com.ichi2.anki.reviewer.CustomFontsReviewerExt:void updateCssStyle(java.lang.StringBuilder)->com.ichi2.anki.reviewer.CustomFontsReviewerExt:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.themes.Themes:java.lang.Integer getCurrentTheme(com.ichi2.anki.Reviewer)
com.ichi2.themes.Themes:java.lang.Integer getCurrentTheme(com.ichi2.anki.Reviewer)->com.ichi2.themes.Themes:[Z $jacocoInit()
com.ichi2.themes.Themes:java.lang.Integer getCurrentTheme(com.ichi2.anki.Reviewer)->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:java.lang.String smpToHtmlEntity(java.lang.String)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String smpToHtmlEntity(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.anki.Reviewer:void fillFlashcard()
com.ichi2.anki.Reviewer:void fillFlashcard()->com.ichi2.anki.Reviewer:[Z $jacocoInit()
com.ichi2.anki.Reviewer:void fillFlashcard()->com.ichi2.anki.AbstractFlashcardViewer:void fillFlashcard()
com.ichi2.anki.AbstractFlashcardViewer:void fillFlashcard()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void fillFlashcard()->com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()->com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatHelper getInstance()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatHelper getInstance()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void fillFlashcard()->com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getODid()
com.ichi2.libanki.Card:java.lang.Long getODid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getDid()
com.ichi2.libanki.Card:java.lang.Long getDid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void fillFlashcard()->com.ichi2.compat.CompatV17:void setHTML5MediaAutoPlay(com.android.webview.chromium.ContentSettingsAdapter,java.lang.Boolean)
com.ichi2.compat.CompatV17:void setHTML5MediaAutoPlay(com.android.webview.chromium.ContentSettingsAdapter,java.lang.Boolean)->com.ichi2.compat.CompatV17:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void fillFlashcard()->com.ichi2.anki.AbstractFlashcardViewer:void updateForNewCard()
com.ichi2.anki.AbstractFlashcardViewer:void updateForNewCard()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateForNewCard()->com.ichi2.anki.AbstractFlashcardViewer:void updateScreenCounts()
com.ichi2.anki.AbstractFlashcardViewer:void updateScreenCounts()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateScreenCounts()->com.ichi2.libanki.Sched:[I counts(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:[I counts(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:[I counts(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:java.lang.Integer countIdx(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:java.lang.Integer countIdx(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer countIdx(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getQueue()
com.ichi2.libanki.Card:java.lang.Integer getQueue()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer countIdx(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getQueue()
com.ichi2.libanki.Card:java.lang.Integer getQueue()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateScreenCounts()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.AbstractFlashcardViewer:void updateScreenCounts()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateScreenCounts()->com.ichi2.libanki.Card:java.lang.Long getDid()
com.ichi2.libanki.Card:java.lang.Long getDid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateScreenCounts()->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateScreenCounts()->com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)
com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateScreenCounts()->com.ichi2.libanki.Sched:java.lang.Integer countIdx(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:java.lang.Integer countIdx(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer countIdx(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getQueue()
com.ichi2.libanki.Card:java.lang.Integer getQueue()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer countIdx(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getQueue()
com.ichi2.libanki.Card:java.lang.Integer getQueue()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateForNewCard()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:void playSounds(java.lang.Boolean)
com.ichi2.anki.AbstractFlashcardViewer:void playSounds(java.lang.Boolean)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void playSounds(java.lang.Boolean)->com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getODid()
com.ichi2.libanki.Card:java.lang.Long getODid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getDid()
com.ichi2.libanki.Card:java.lang.Long getDid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void playSounds(java.lang.Boolean)->com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getODid()
com.ichi2.libanki.Card:java.lang.Long getODid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getDid()
com.ichi2.libanki.Card:java.lang.Long getDid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void playSounds(java.lang.Boolean)->com.ichi2.libanki.Sound:void playSounds(java.lang.Integer)
com.ichi2.libanki.Sound:void playSounds(java.lang.Integer)->com.ichi2.libanki.Sound:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.anki.AbstractFlashcardViewer:void hideEaseButtons()
com.ichi2.anki.AbstractFlashcardViewer:void hideEaseButtons()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void hideEaseButtons()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.libanki.Card:java.lang.Long getId()
com.ichi2.libanki.Card:java.lang.Long getId()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.libanki.Collection:void timeboxReached()
com.ichi2.libanki.Collection:void timeboxReached()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.BaseAsyncTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)
com.ichi2.async.BaseAsyncTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.AbstractFlashcardViewer:void refreshActionBar()
com.ichi2.anki.AbstractFlashcardViewer:void refreshActionBar()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.Reviewer:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.Reviewer:void setCustomButtons(androidx.appcompat.view.menu.MenuBuilder)
com.ichi2.anki.Reviewer:void setCustomButtons(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.Reviewer:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.libanki.Card:com.ichi2.libanki.Note note()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)
com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.libanki.Note:java.lang.Boolean hasTag(java.lang.String)
com.ichi2.libanki.Note:java.lang.Boolean hasTag(java.lang.String)->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.libanki.Note:java.lang.Boolean hasTag(java.lang.String)->com.ichi2.libanki.Collection:com.ichi2.libanki.Tags getTags()
com.ichi2.libanki.Collection:com.ichi2.libanki.Tags getTags()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Note:java.lang.Boolean hasTag(java.lang.String)->com.ichi2.libanki.Tags:java.lang.Boolean inList(java.lang.String,java.util.ArrayList)
com.ichi2.libanki.Tags:java.lang.Boolean inList(java.lang.String,java.util.ArrayList)->com.ichi2.libanki.Tags:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.libanki.Collection:java.lang.Boolean undoAvailable()
com.ichi2.libanki.Collection:java.lang.Boolean undoAvailable()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getParentDid()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getParentDid()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getParentDid()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getParentDid()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getParentDid()->com.ichi2.libanki.Decks:org.json.JSONObject current()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:java.lang.Long selected()
com.ichi2.libanki.Decks:java.lang.Long selected()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.lang.Long selected()->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.libanki.Decks:java.lang.Boolean isDyn(java.lang.Long)
com.ichi2.libanki.Decks:java.lang.Boolean isDyn(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.lang.Boolean isDyn(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.Reviewer:java.lang.Boolean dismissNoteAvailable(com.ichi2.libanki.Collection$DismissType)
com.ichi2.anki.Reviewer:java.lang.Boolean dismissNoteAvailable(com.ichi2.libanki.Collection$DismissType)->com.ichi2.anki.Reviewer:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean dismissNoteAvailable(com.ichi2.libanki.Collection$DismissType)->com.ichi2.libanki.Card:com.ichi2.libanki.Note note()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)
com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean dismissNoteAvailable(com.ichi2.libanki.Collection$DismissType)->com.ichi2.libanki.Card:com.ichi2.libanki.Note note()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)
com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean dismissNoteAvailable(com.ichi2.libanki.Collection$DismissType)->com.ichi2.libanki.Note:java.util.ArrayList cards()
com.ichi2.libanki.Note:java.util.ArrayList cards()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.libanki.Note:java.util.ArrayList cards()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Note:java.util.ArrayList cards()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.Note:java.util.ArrayList cards()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteProgram:[Ljava.lang.String; getColumnNames()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
com.ichi2.libanki.Note:java.util.ArrayList cards()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()->io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.String getPath()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void clearOrCreateWindow(java.lang.String)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer cursorPickFillWindowStartPosition(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()
io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.String getSql()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:void getBindArgs()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()
io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:void setStartPosition(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
com.ichi2.libanki.Note:java.util.ArrayList cards()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Note:java.util.ArrayList cards()->com.ichi2.libanki.Collection:com.ichi2.libanki.Card getCard(java.lang.Long)
com.ichi2.libanki.Collection:com.ichi2.libanki.Card getCard(java.lang.Long)->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Collection:com.ichi2.libanki.Card getCard(java.lang.Long)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Collection:com.ichi2.libanki.Card getCard(java.lang.Long)->com.ichi2.libanki.Card:void load()
com.ichi2.libanki.Card:void load()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:void load()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Card:void load()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.Card:void load()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteProgram:[Ljava.lang.String; getColumnNames()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToFirst()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToFirst()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()->io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.String getPath()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void clearOrCreateWindow(java.lang.String)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer cursorPickFillWindowStartPosition(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()
io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.String getSql()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:void getBindArgs()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()
io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:void setStartPosition(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.String getString(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.String getString(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.String getString(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.String getString(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.sqlite.SQLiteCursor:void close()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.AbstractCursor:void close()
io.requery.android.database.AbstractCursor:void close()->io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractWindowedCursor:void closeWindow()
io.requery.android.database.AbstractWindowedCursor:void closeWindow()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.CursorWindow:void onAllReferencesReleased()
io.requery.android.database.CursorWindow:void onAllReferencesReleased()->io.requery.android.database.CursorWindow:void dispose()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()
io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()->io.requery.android.database.sqlite.SQLiteProgram:void clearBindings()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:void cursorClosed()
com.ichi2.libanki.Note:java.util.ArrayList cards()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
com.ichi2.libanki.Note:java.util.ArrayList cards()->io.requery.android.database.sqlite.SQLiteCursor:void close()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.AbstractCursor:void close()
io.requery.android.database.AbstractCursor:void close()->io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractWindowedCursor:void closeWindow()
io.requery.android.database.AbstractWindowedCursor:void closeWindow()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.CursorWindow:void onAllReferencesReleased()
io.requery.android.database.CursorWindow:void onAllReferencesReleased()->io.requery.android.database.CursorWindow:void dispose()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()
io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()->io.requery.android.database.sqlite.SQLiteProgram:void clearBindings()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:void cursorClosed()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.Reviewer:java.lang.Boolean dismissNoteAvailable(com.ichi2.libanki.Collection$DismissType)
com.ichi2.anki.Reviewer:java.lang.Boolean dismissNoteAvailable(com.ichi2.libanki.Collection$DismissType)->com.ichi2.anki.Reviewer:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean dismissNoteAvailable(com.ichi2.libanki.Collection$DismissType)->com.ichi2.libanki.Card:com.ichi2.libanki.Note note()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)
com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean dismissNoteAvailable(com.ichi2.libanki.Collection$DismissType)->com.ichi2.libanki.Card:com.ichi2.libanki.Note note()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)
com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean dismissNoteAvailable(com.ichi2.libanki.Collection$DismissType)->com.ichi2.libanki.Note:java.util.ArrayList cards()
com.ichi2.libanki.Note:java.util.ArrayList cards()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.libanki.Note:java.util.ArrayList cards()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Note:java.util.ArrayList cards()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.Note:java.util.ArrayList cards()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteProgram:[Ljava.lang.String; getColumnNames()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
com.ichi2.libanki.Note:java.util.ArrayList cards()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()->io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.String getPath()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void clearOrCreateWindow(java.lang.String)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer cursorPickFillWindowStartPosition(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()
io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.String getSql()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:void getBindArgs()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()
io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:void setStartPosition(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
com.ichi2.libanki.Note:java.util.ArrayList cards()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Note:java.util.ArrayList cards()->com.ichi2.libanki.Collection:com.ichi2.libanki.Card getCard(java.lang.Long)
com.ichi2.libanki.Collection:com.ichi2.libanki.Card getCard(java.lang.Long)->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Collection:com.ichi2.libanki.Card getCard(java.lang.Long)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Collection:com.ichi2.libanki.Card getCard(java.lang.Long)->com.ichi2.libanki.Card:void load()
com.ichi2.libanki.Card:void load()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:void load()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Card:void load()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.Card:void load()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteProgram:[Ljava.lang.String; getColumnNames()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToFirst()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToFirst()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()->io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.String getPath()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void clearOrCreateWindow(java.lang.String)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer cursorPickFillWindowStartPosition(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()
io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.String getSql()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:void getBindArgs()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()
io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:void setStartPosition(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.String getString(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.String getString(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.String getString(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.String getString(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.sqlite.SQLiteCursor:void close()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.AbstractCursor:void close()
io.requery.android.database.AbstractCursor:void close()->io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractWindowedCursor:void closeWindow()
io.requery.android.database.AbstractWindowedCursor:void closeWindow()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.CursorWindow:void onAllReferencesReleased()
io.requery.android.database.CursorWindow:void onAllReferencesReleased()->io.requery.android.database.CursorWindow:void dispose()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()
io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()->io.requery.android.database.sqlite.SQLiteProgram:void clearBindings()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:void cursorClosed()
com.ichi2.libanki.Note:java.util.ArrayList cards()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
com.ichi2.libanki.Note:java.util.ArrayList cards()->io.requery.android.database.sqlite.SQLiteCursor:void close()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.AbstractCursor:void close()
io.requery.android.database.AbstractCursor:void close()->io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractWindowedCursor:void closeWindow()
io.requery.android.database.AbstractWindowedCursor:void closeWindow()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.CursorWindow:void onAllReferencesReleased()
io.requery.android.database.CursorWindow:void onAllReferencesReleased()->io.requery.android.database.CursorWindow:void dispose()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()
io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()->io.requery.android.database.sqlite.SQLiteProgram:void clearBindings()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:void cursorClosed()
com.ichi2.anki.Reviewer:void onWindowFocusChanged(java.lang.Boolean)->com.ichi2.anki.Reviewer:[Z $jacocoInit()
com.ichi2.anki.Reviewer:void onWindowFocusChanged(java.lang.Boolean)->com.ichi2.anki.AbstractFlashcardViewer:void delayedHide(java.lang.Integer)
com.ichi2.anki.AbstractFlashcardViewer:void delayedHide(java.lang.Integer)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Integer access$2000(com.ichi2.anki.Reviewer)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onSaveInstanceState(android.os.Bundle)->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onSaveInstanceState(android.os.Bundle)->com.getbase.floatingactionbutton.FloatingActionsMenu:com.getbase.floatingactionbutton.FloatingActionsMenu$SavedState onSaveInstanceState()
com.ichi2.anki.DeckPicker:void onStop()->com.ichi2.anki.DeckPicker:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onStop()->com.ichi2.anki.AnkiActivity:void onStop()
com.ichi2.anki.AnkiActivity:void onStop()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:void onStop()->com.ichi2.compat.customtabs.CustomTabActivityHelper:void unbindCustomTabsService(com.ichi2.anki.DeckPicker)
com.ichi2.compat.customtabs.CustomTabActivityHelper:void unbindCustomTabsService(com.ichi2.anki.DeckPicker)->com.ichi2.compat.customtabs.CustomTabActivityHelper:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onStop()->com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.DeckPicker:void onStop()->com.ichi2.widget.WidgetStatus:void update(com.ichi2.anki.DeckPicker)
com.ichi2.widget.WidgetStatus:void update(com.ichi2.anki.DeckPicker)->com.ichi2.widget.WidgetStatus:[Z $jacocoInit()
com.ichi2.widget.WidgetStatus:void update(com.ichi2.anki.DeckPicker)->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.DeckPicker)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.DeckPicker)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.DeckPicker:void onStop()->com.ichi2.anki.UIUtils:void saveCollectionInBackground(com.ichi2.anki.DeckPicker)
com.ichi2.anki.UIUtils:void saveCollectionInBackground(com.ichi2.anki.DeckPicker)->com.ichi2.anki.UIUtils:[Z $jacocoInit()
com.ichi2.anki.UIUtils:void saveCollectionInBackground(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.UIUtils:void saveCollectionInBackground(com.ichi2.anki.DeckPicker)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.UIUtils:void saveCollectionInBackground(com.ichi2.anki.DeckPicker)->com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.UIUtils$1,[Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.UIUtils$1,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.UIUtils$1,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.UIUtils$1,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.UIUtils$1,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.UIUtils$1,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onPreExecute()
com.ichi2.async.DeckTask:void onPreExecute()->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPreExecute()->com.ichi2.async.BaseAsyncTask:void onPreExecute()
com.ichi2.async.BaseAsyncTask:void onPreExecute()->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onPreExecute()->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(java.lang.Object)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(java.lang.Object)->com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.BaseAsyncTask:void onPostExecute(java.lang.Object)
com.ichi2.async.BaseAsyncTask:void onPostExecute(java.lang.Object)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onPostExecute(java.lang.Object)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->androidx.appcompat.widget.AppCompatButton:boolean dispatchTouchEvent(android.view.MotionEvent)
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->android.widget.LinearLayout:boolean dispatchTouchEvent(android.view.MotionEvent)
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->android.widget.LinearLayout:boolean dispatchTouchEvent(android.view.MotionEvent)
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->android.widget.LinearLayout:boolean dispatchTouchEvent(android.view.MotionEvent)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long access$400(com.ichi2.anki.Reviewer)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long access$402(com.ichi2.anki.Reviewer,java.lang.Long)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardAnswer()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardAnswer()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardAnswer()->com.ichi2.libanki.Card:java.lang.String a()
com.ichi2.libanki.Card:java.lang.String a()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.String a()->com.ichi2.libanki.Card:java.lang.String css()
com.ichi2.libanki.Card:java.lang.String css()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.String css()->com.ichi2.libanki.Card:org.json.JSONObject model()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()
com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)
com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Note:java.lang.Long getMid()
com.ichi2.libanki.Note:java.lang.Long getMid()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.String a()->com.ichi2.libanki.Card:java.util.HashMap _getQA()
com.ichi2.libanki.Card:java.util.HashMap _getQA()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.util.HashMap _getQA()->com.ichi2.libanki.Card:java.util.HashMap _getQA(java.lang.Boolean)
com.ichi2.libanki.Card:java.util.HashMap _getQA(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.util.HashMap _getQA(java.lang.Boolean)->com.ichi2.libanki.Card:java.util.HashMap _getQA(java.lang.Boolean,java.lang.Boolean)
com.ichi2.libanki.Card:java.util.HashMap _getQA(java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardAnswer()->com.ichi2.libanki.Sound:void stopSounds()
com.ichi2.libanki.Sound:void stopSounds()->com.ichi2.libanki.Sound:[Z $jacocoInit()
com.ichi2.libanki.Sound:void stopSounds()->com.ichi2.anki.ReadText:[Z $jacocoInit()
com.ichi2.libanki.Sound:void stopSounds()->com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()->com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatHelper getInstance()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatHelper getInstance()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.libanki.Sound:void stopSounds()->com.ichi2.compat.CompatV21:android.os.Bundle initTtsParams()
com.ichi2.compat.CompatV21:android.os.Bundle initTtsParams()->com.ichi2.compat.CompatV21:[Z $jacocoInit()
com.ichi2.libanki.Sound:void stopSounds()->com.ichi2.anki.ReadText:void stopTts()
com.ichi2.anki.ReadText:void stopTts()->com.ichi2.anki.ReadText:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardAnswer()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardAnswer()->com.ichi2.libanki.Collection:com.ichi2.libanki.Media getMedia()
com.ichi2.libanki.Collection:com.ichi2.libanki.Media getMedia()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardAnswer()->com.ichi2.libanki.Media:java.lang.String escapeImages(java.lang.String)
com.ichi2.libanki.Media:java.lang.String escapeImages(java.lang.String)->com.ichi2.libanki.Media:[Z $jacocoInit()
com.ichi2.libanki.Media:java.lang.String escapeImages(java.lang.String)->com.ichi2.libanki.Media:java.lang.String escapeImages(java.lang.String,java.lang.Boolean)
com.ichi2.libanki.Media:java.lang.String escapeImages(java.lang.String,java.lang.Boolean)->com.ichi2.libanki.Media:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardAnswer()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.String cleanTypedAnswer(java.lang.String)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String cleanTypedAnswer(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardAnswer()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.String cleanCorrectAnswer(java.lang.String)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String cleanCorrectAnswer(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardAnswer()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.String typeAnsAnswerFilter_LZHChange(java.lang.String,java.lang.String,java.lang.String)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String typeAnsAnswerFilter_LZHChange(java.lang.String,java.lang.String,java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String typeAnsAnswerFilter_LZHChange(java.lang.String,java.lang.String,java.lang.String)->com.ichi2.utils.DiffEngine:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String typeAnsAnswerFilter_LZHChange(java.lang.String,java.lang.String,java.lang.String)->com.ichi2.utils.DiffEngine:java.lang.String wrapMissing(java.lang.String)
com.ichi2.utils.DiffEngine:java.lang.String wrapMissing(java.lang.String)->com.ichi2.utils.DiffEngine:[Z $jacocoInit()
com.ichi2.utils.DiffEngine:java.lang.String wrapMissing(java.lang.String)->com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()->com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatHelper getInstance()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatHelper getInstance()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.utils.DiffEngine:java.lang.String wrapMissing(java.lang.String)->com.ichi2.compat.CompatV16:java.lang.String detagged(java.lang.String)
com.ichi2.compat.CompatV16:java.lang.String detagged(java.lang.String)->com.ichi2.compat.CompatV16:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardAnswer()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.String enrichWithQADiv(java.lang.String,java.lang.Boolean)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String enrichWithQADiv(java.lang.String,java.lang.Boolean)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardAnswer()->com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:void addAnswerSounds(java.lang.String)
com.ichi2.anki.AbstractFlashcardViewer:void addAnswerSounds(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void addAnswerSounds(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:java.lang.String removeFrontSideAudio(java.lang.String)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String removeFrontSideAudio(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String removeFrontSideAudio(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:java.lang.String getAnswerFormat()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String getAnswerFormat()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String getAnswerFormat()->com.ichi2.libanki.Card:org.json.JSONObject model()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()
com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)
com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Note:java.lang.Long getMid()
com.ichi2.libanki.Note:java.lang.Long getMid()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String getAnswerFormat()->com.ichi2.libanki.Card:java.lang.Integer getOrd()
com.ichi2.libanki.Card:java.lang.Integer getOrd()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String removeFrontSideAudio(java.lang.String)->com.ichi2.libanki.Card:java.util.HashMap _getQA(java.lang.Boolean)
com.ichi2.libanki.Card:java.util.HashMap _getQA(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.util.HashMap _getQA(java.lang.Boolean)->com.ichi2.libanki.Card:java.util.HashMap _getQA(java.lang.Boolean,java.lang.Boolean)
com.ichi2.libanki.Card:java.util.HashMap _getQA(java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void addAnswerSounds(java.lang.String)->com.ichi2.libanki.Sound:void addSounds(java.lang.String,java.lang.String,java.lang.Integer)
com.ichi2.libanki.Sound:void addSounds(java.lang.String,java.lang.String,java.lang.Integer)->com.ichi2.libanki.Sound:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.libanki.Sound:java.lang.String expandSounds(java.lang.String,java.lang.String)
com.ichi2.libanki.Sound:java.lang.String expandSounds(java.lang.String,java.lang.String)->com.ichi2.libanki.Sound:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.libanki.Card:java.lang.Integer getOrd()
com.ichi2.libanki.Card:java.lang.Integer getOrd()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.libanki.template.Template:java.lang.Boolean textContainsMathjax(java.lang.String)
com.ichi2.libanki.template.Template:java.lang.Boolean textContainsMathjax(java.lang.String)->com.ichi2.libanki.template.Template:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.anki.reviewer.ReviewerExtRegistry:void updateCssStyle(java.lang.StringBuilder)
com.ichi2.anki.reviewer.ReviewerExtRegistry:void updateCssStyle(java.lang.StringBuilder)->com.ichi2.anki.reviewer.ReviewerExtRegistry:[Z $jacocoInit()
com.ichi2.anki.reviewer.ReviewerExtRegistry:void updateCssStyle(java.lang.StringBuilder)->com.ichi2.anki.reviewer.CustomFontsReviewerExt:void updateCssStyle(java.lang.StringBuilder)
com.ichi2.anki.reviewer.CustomFontsReviewerExt:void updateCssStyle(java.lang.StringBuilder)->com.ichi2.anki.reviewer.CustomFontsReviewerExt:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.themes.Themes:java.lang.Integer getCurrentTheme(com.ichi2.anki.Reviewer)
com.ichi2.themes.Themes:java.lang.Integer getCurrentTheme(com.ichi2.anki.Reviewer)->com.ichi2.themes.Themes:[Z $jacocoInit()
com.ichi2.themes.Themes:java.lang.Integer getCurrentTheme(com.ichi2.anki.Reviewer)->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:java.lang.String smpToHtmlEntity(java.lang.String)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String smpToHtmlEntity(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.anki.Reviewer:void fillFlashcard()
com.ichi2.anki.Reviewer:void fillFlashcard()->com.ichi2.anki.Reviewer:[Z $jacocoInit()
com.ichi2.anki.Reviewer:void fillFlashcard()->com.ichi2.anki.AbstractFlashcardViewer:void fillFlashcard()
com.ichi2.anki.AbstractFlashcardViewer:void fillFlashcard()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void fillFlashcard()->com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()->com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatHelper getInstance()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatHelper getInstance()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void fillFlashcard()->com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getODid()
com.ichi2.libanki.Card:java.lang.Long getODid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getDid()
com.ichi2.libanki.Card:java.lang.Long getDid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void fillFlashcard()->com.ichi2.compat.CompatV17:void setHTML5MediaAutoPlay(com.android.webview.chromium.ContentSettingsAdapter,java.lang.Boolean)
com.ichi2.compat.CompatV17:void setHTML5MediaAutoPlay(com.android.webview.chromium.ContentSettingsAdapter,java.lang.Boolean)->com.ichi2.compat.CompatV17:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:void playSounds(java.lang.Boolean)
com.ichi2.anki.AbstractFlashcardViewer:void playSounds(java.lang.Boolean)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void playSounds(java.lang.Boolean)->com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getODid()
com.ichi2.libanki.Card:java.lang.Long getODid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getDid()
com.ichi2.libanki.Card:java.lang.Long getDid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void playSounds(java.lang.Boolean)->com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getODid()
com.ichi2.libanki.Card:java.lang.Long getODid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getDid()
com.ichi2.libanki.Card:java.lang.Long getDid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void playSounds(java.lang.Boolean)->com.ichi2.libanki.Sound:void playSounds(java.lang.Integer)
com.ichi2.libanki.Sound:void playSounds(java.lang.Integer)->com.ichi2.libanki.Sound:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardAnswer()->com.ichi2.anki.AbstractFlashcardViewer:void showEaseButtons()
com.ichi2.anki.AbstractFlashcardViewer:void showEaseButtons()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void showEaseButtons()->com.ichi2.libanki.Sched:java.lang.Integer answerButtons(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:java.lang.Integer answerButtons(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer answerButtons(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getODue()
com.ichi2.libanki.Card:java.lang.Long getODue()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer answerButtons(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getQueue()
com.ichi2.libanki.Card:java.lang.Integer getQueue()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void showEaseButtons()->com.ichi2.themes.Themes:[I getResFromAttr(com.ichi2.anki.Reviewer,[I)
com.ichi2.themes.Themes:[I getResFromAttr(com.ichi2.anki.Reviewer,[I)->com.ichi2.themes.Themes:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void showEaseButtons()->com.ichi2.themes.Themes:[I getColorFromAttr(com.ichi2.anki.Reviewer,[I)
com.ichi2.themes.Themes:[I getColorFromAttr(com.ichi2.anki.Reviewer,[I)->com.ichi2.themes.Themes:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void showEaseButtons()->com.ichi2.libanki.Sched:java.lang.String nextIvlStr(com.ichi2.anki.Reviewer,com.ichi2.libanki.Card,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.String nextIvlStr(com.ichi2.anki.Reviewer,com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.String nextIvlStr(com.ichi2.anki.Reviewer,com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Long nextIvl(com.ichi2.libanki.Card,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.Long nextIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long nextIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Card:java.lang.Integer getQueue()
com.ichi2.libanki.Card:java.lang.Integer getQueue()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long nextIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Card:java.lang.Integer getQueue()
com.ichi2.libanki.Card:java.lang.Integer getQueue()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Integer _startingLeft(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:java.lang.Integer _startingLeft(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _startingLeft(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getType()
com.ichi2.libanki.Card:java.lang.Integer getType()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _startingLeft(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getType()
com.ichi2.libanki.Card:java.lang.Integer getType()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getDid()
com.ichi2.libanki.Card:java.lang.Long getDid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getODid()
com.ichi2.libanki.Card:java.lang.Long getODid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _startingLeft(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer,java.lang.Long)
com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer,java.lang.Long)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer,java.lang.Long)->com.ichi2.libanki.Utils:java.lang.Long intNow()
com.ichi2.libanki.Utils:java.lang.Long intNow()->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.Long intNow()->com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)
com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)->com.ichi2.libanki.Utils:java.lang.Double now()
com.ichi2.libanki.Utils:java.lang.Double now()->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Card:void setLeft(java.lang.Integer)
com.ichi2.libanki.Card:void setLeft(java.lang.Integer)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getType()
com.ichi2.libanki.Card:java.lang.Integer getType()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getDid()
com.ichi2.libanki.Card:java.lang.Long getDid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getODid()
com.ichi2.libanki.Card:java.lang.Long getODid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Integer _delayForGrade(org.json.JSONObject,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.Integer _delayForGrade(org.json.JSONObject,java.lang.Integer)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.String nextIvlStr(com.ichi2.anki.Reviewer,com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Utils:java.lang.String timeQuantity(com.ichi2.anki.Reviewer,java.lang.Long)
com.ichi2.libanki.Utils:java.lang.String timeQuantity(com.ichi2.anki.Reviewer,java.lang.Long)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.String nextIvlStr(com.ichi2.anki.Reviewer,com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void showEaseButtons()->com.ichi2.libanki.Sched:java.lang.String nextIvlStr(com.ichi2.anki.Reviewer,com.ichi2.libanki.Card,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.String nextIvlStr(com.ichi2.anki.Reviewer,com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.String nextIvlStr(com.ichi2.anki.Reviewer,com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Long nextIvl(com.ichi2.libanki.Card,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.Long nextIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long nextIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Card:java.lang.Integer getQueue()
com.ichi2.libanki.Card:java.lang.Integer getQueue()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long nextIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Card:java.lang.Integer getQueue()
com.ichi2.libanki.Card:java.lang.Integer getQueue()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Integer _startingLeft(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:java.lang.Integer _startingLeft(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _startingLeft(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getType()
com.ichi2.libanki.Card:java.lang.Integer getType()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _startingLeft(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getType()
com.ichi2.libanki.Card:java.lang.Integer getType()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getDid()
com.ichi2.libanki.Card:java.lang.Long getDid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getODid()
com.ichi2.libanki.Card:java.lang.Long getODid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _startingLeft(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer,java.lang.Long)
com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer,java.lang.Long)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer,java.lang.Long)->com.ichi2.libanki.Utils:java.lang.Long intNow()
com.ichi2.libanki.Utils:java.lang.Long intNow()->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.Long intNow()->com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)
com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)->com.ichi2.libanki.Utils:java.lang.Double now()
com.ichi2.libanki.Utils:java.lang.Double now()->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Card:void setLeft(java.lang.Integer)
com.ichi2.libanki.Card:void setLeft(java.lang.Integer)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getType()
com.ichi2.libanki.Card:java.lang.Integer getType()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getDid()
com.ichi2.libanki.Card:java.lang.Long getDid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getODid()
com.ichi2.libanki.Card:java.lang.Long getODid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Card:java.lang.Integer getLeft()
com.ichi2.libanki.Card:java.lang.Integer getLeft()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Integer _delayForGrade(org.json.JSONObject,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.Integer _delayForGrade(org.json.JSONObject,java.lang.Integer)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.String nextIvlStr(com.ichi2.anki.Reviewer,com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Utils:java.lang.String timeQuantity(com.ichi2.anki.Reviewer,java.lang.Long)
com.ichi2.libanki.Utils:java.lang.String timeQuantity(com.ichi2.anki.Reviewer,java.lang.Long)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.String nextIvlStr(com.ichi2.anki.Reviewer,com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void showEaseButtons()->com.ichi2.libanki.Sched:java.lang.String nextIvlStr(com.ichi2.anki.Reviewer,com.ichi2.libanki.Card,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.String nextIvlStr(com.ichi2.anki.Reviewer,com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.String nextIvlStr(com.ichi2.anki.Reviewer,com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Long nextIvl(com.ichi2.libanki.Card,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.Long nextIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long nextIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Card:java.lang.Integer getQueue()
com.ichi2.libanki.Card:java.lang.Integer getQueue()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long nextIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Card:java.lang.Integer getQueue()
com.ichi2.libanki.Card:java.lang.Integer getQueue()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Integer _startingLeft(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:java.lang.Integer _startingLeft(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _startingLeft(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getType()
com.ichi2.libanki.Card:java.lang.Integer getType()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _startingLeft(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getType()
com.ichi2.libanki.Card:java.lang.Integer getType()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getDid()
com.ichi2.libanki.Card:java.lang.Long getDid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getODid()
com.ichi2.libanki.Card:java.lang.Long getODid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _startingLeft(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer,java.lang.Long)
com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer,java.lang.Long)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer,java.lang.Long)->com.ichi2.libanki.Utils:java.lang.Long intNow()
com.ichi2.libanki.Utils:java.lang.Long intNow()->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.Long intNow()->com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)
com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)->com.ichi2.libanki.Utils:java.lang.Double now()
com.ichi2.libanki.Utils:java.lang.Double now()->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Card:void setLeft(java.lang.Integer)
com.ichi2.libanki.Card:void setLeft(java.lang.Integer)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getType()
com.ichi2.libanki.Card:java.lang.Integer getType()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getDid()
com.ichi2.libanki.Card:java.lang.Long getDid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getODid()
com.ichi2.libanki.Card:java.lang.Long getODid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Boolean _resched(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:java.lang.Boolean _resched(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Boolean _resched(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getDid()
com.ichi2.libanki.Card:java.lang.Long getDid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Integer _graduatingIvl(com.ichi2.libanki.Card,org.json.JSONObject,java.lang.Boolean,java.lang.Boolean)
com.ichi2.libanki.Sched:java.lang.Integer _graduatingIvl(com.ichi2.libanki.Card,org.json.JSONObject,java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _graduatingIvl(com.ichi2.libanki.Card,org.json.JSONObject,java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Card:java.lang.Integer getType()
com.ichi2.libanki.Card:java.lang.Integer getType()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.String nextIvlStr(com.ichi2.anki.Reviewer,com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Utils:java.lang.String timeQuantity(com.ichi2.anki.Reviewer,java.lang.Long)
com.ichi2.libanki.Utils:java.lang.String timeQuantity(com.ichi2.anki.Reviewer,java.lang.Long)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.String nextIvlStr(com.ichi2.anki.Reviewer,com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->androidx.appcompat.widget.AppCompatTextView:boolean dispatchTouchEvent(android.view.MotionEvent)
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->android.widget.LinearLayout:boolean dispatchTouchEvent(android.view.MotionEvent)
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->android.widget.LinearLayout:boolean dispatchTouchEvent(android.view.MotionEvent)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long access$400(com.ichi2.anki.Reviewer)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long access$402(com.ichi2.anki.Reviewer,java.lang.Long)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void answerCard(java.lang.Integer)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void answerCard(java.lang.Integer)->com.ichi2.anki.AbstractFlashcardViewer:void hideLookupButton()
com.ichi2.anki.AbstractFlashcardViewer:void hideLookupButton()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void answerCard(java.lang.Integer)->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.AbstractFlashcardViewer:void answerCard(java.lang.Integer)->com.ichi2.libanki.Collection:com.ichi2.libanki.Sched getSched()
com.ichi2.libanki.Collection:com.ichi2.libanki.Sched getSched()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void answerCard(java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Integer answerButtons(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:java.lang.Integer answerButtons(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer answerButtons(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getODue()
com.ichi2.libanki.Card:java.lang.Long getODue()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer answerButtons(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getQueue()
com.ichi2.libanki.Card:java.lang.Integer getQueue()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void answerCard(java.lang.Integer)->com.ichi2.libanki.Sound:void stopSounds()
com.ichi2.libanki.Sound:void stopSounds()->com.ichi2.libanki.Sound:[Z $jacocoInit()
com.ichi2.libanki.Sound:void stopSounds()->com.ichi2.anki.ReadText:void stopTts()
com.ichi2.anki.ReadText:void stopTts()->com.ichi2.anki.ReadText:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void answerCard(java.lang.Integer)->com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.AbstractFlashcardViewer$9,[Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.AbstractFlashcardViewer$9,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.AbstractFlashcardViewer$9,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.AbstractFlashcardViewer$9,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.AbstractFlashcardViewer$9,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.AbstractFlashcardViewer$9,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onPreExecute()
com.ichi2.async.DeckTask:void onPreExecute()->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPreExecute()->com.ichi2.async.BaseAsyncTask:void onPreExecute()
com.ichi2.async.BaseAsyncTask:void onPreExecute()->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onPreExecute()->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPreExecute()->com.ichi2.anki.AbstractFlashcardViewer:void access$1300(com.ichi2.anki.Reviewer)
com.ichi2.anki.AbstractFlashcardViewer:void access$1300(com.ichi2.anki.Reviewer)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void access$1300(com.ichi2.anki.Reviewer)->com.ichi2.anki.AbstractFlashcardViewer:void blockControls()
com.ichi2.anki.AbstractFlashcardViewer:void blockControls()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void blockControls()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.AbstractFlashcardViewer:void access$1100(com.ichi2.anki.Reviewer)
com.ichi2.anki.AbstractFlashcardViewer:void access$1100(com.ichi2.anki.Reviewer)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void access$1100(com.ichi2.anki.Reviewer)->com.ichi2.anki.AbstractFlashcardViewer:void updateTypeAnswerInfo()
com.ichi2.anki.AbstractFlashcardViewer:void updateTypeAnswerInfo()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateTypeAnswerInfo()->com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean)
com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean)->com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean,java.lang.Boolean)
com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Card:java.lang.String css()
com.ichi2.libanki.Card:java.lang.String css()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.String css()->com.ichi2.libanki.Card:org.json.JSONObject model()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()
com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)
com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Note:java.lang.Long getMid()
com.ichi2.libanki.Note:java.lang.Long getMid()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Card:java.util.HashMap _getQA(java.lang.Boolean,java.lang.Boolean)
com.ichi2.libanki.Card:java.util.HashMap _getQA(java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.AnkiActivity:void hideProgressBar()
com.ichi2.anki.AnkiActivity:void hideProgressBar()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.AbstractFlashcardViewer:void access$1200(com.ichi2.anki.Reviewer)
com.ichi2.anki.AbstractFlashcardViewer:void access$1200(com.ichi2.anki.Reviewer)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void access$1200(com.ichi2.anki.Reviewer)->com.ichi2.anki.AbstractFlashcardViewer:void unblockControls()
com.ichi2.anki.AbstractFlashcardViewer:void unblockControls()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void unblockControls()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.Reviewer:void displayCardQuestion()
com.ichi2.anki.Reviewer:void displayCardQuestion()->com.ichi2.anki.Reviewer:[Z $jacocoInit()
com.ichi2.anki.Reviewer:void displayCardQuestion()->com.ichi2.anki.AbstractFlashcardViewer:void initTimer()
com.ichi2.anki.AbstractFlashcardViewer:void initTimer()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void initTimer()->com.ichi2.libanki.Card:java.lang.Boolean showTimer()
com.ichi2.libanki.Card:java.lang.Boolean showTimer()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.Boolean showTimer()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.Boolean showTimer()->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void initTimer()->com.ichi2.libanki.Card:java.lang.Integer timeLimit()
com.ichi2.libanki.Card:java.lang.Integer timeLimit()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.Integer timeLimit()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.Integer timeLimit()->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.Reviewer:void displayCardQuestion()->com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.anki.AbstractFlashcardViewer:void setInterface()
com.ichi2.anki.AbstractFlashcardViewer:void setInterface()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.libanki.Card:java.lang.Boolean isEmpty()
com.ichi2.libanki.Card:java.lang.Boolean isEmpty()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.Boolean isEmpty()->com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()
com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.Boolean isEmpty()->com.ichi2.libanki.Card:org.json.JSONObject model()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()
com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)
com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Note:java.lang.Long getMid()
com.ichi2.libanki.Note:java.lang.Long getMid()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.Boolean isEmpty()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)
com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.Boolean isEmpty()->com.ichi2.libanki.Note:[Ljava.lang.String; getFields()
com.ichi2.libanki.Note:[Ljava.lang.String; getFields()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.Boolean isEmpty()->com.ichi2.libanki.Utils:java.lang.String joinFields([Ljava.lang.String;)
com.ichi2.libanki.Utils:java.lang.String joinFields([Ljava.lang.String;)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.Boolean isEmpty()->com.ichi2.libanki.Models:java.util.ArrayList availOrds(org.json.JSONObject,java.lang.String)
com.ichi2.libanki.Models:java.util.ArrayList availOrds(org.json.JSONObject,java.lang.String)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.libanki.Models:java.util.ArrayList availOrds(org.json.JSONObject,java.lang.String)->com.ichi2.libanki.Utils:[Ljava.lang.String; splitFields(java.lang.String)
com.ichi2.libanki.Utils:[Ljava.lang.String; splitFields(java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.libanki.Card:java.lang.String q()
com.ichi2.libanki.Card:java.lang.String q()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.String q()->com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean)
com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean)->com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean,java.lang.Boolean)
com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Card:java.lang.String css()
com.ichi2.libanki.Card:java.lang.String css()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.String css()->com.ichi2.libanki.Card:org.json.JSONObject model()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()
com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)
com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Note:java.lang.Long getMid()
com.ichi2.libanki.Note:java.lang.Long getMid()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Card:java.util.HashMap _getQA(java.lang.Boolean,java.lang.Boolean)
com.ichi2.libanki.Card:java.util.HashMap _getQA(java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.libanki.Collection:com.ichi2.libanki.Media getMedia()
com.ichi2.libanki.Collection:com.ichi2.libanki.Media getMedia()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.libanki.Media:java.lang.String escapeImages(java.lang.String)
com.ichi2.libanki.Media:java.lang.String escapeImages(java.lang.String)->com.ichi2.libanki.Media:[Z $jacocoInit()
com.ichi2.libanki.Media:java.lang.String escapeImages(java.lang.String)->com.ichi2.libanki.Media:java.lang.String escapeImages(java.lang.String,java.lang.Boolean)
com.ichi2.libanki.Media:java.lang.String escapeImages(java.lang.String,java.lang.Boolean)->com.ichi2.libanki.Media:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.String typeAnsQuestionFilter(java.lang.String)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String typeAnsQuestionFilter(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.String enrichWithQADiv(java.lang.String,java.lang.Boolean)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String enrichWithQADiv(java.lang.String,java.lang.Boolean)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.libanki.Sound:void resetSounds()
com.ichi2.libanki.Sound:void resetSounds()->com.ichi2.libanki.Sound:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.libanki.Sound:void addSounds(java.lang.String,java.lang.String,java.lang.Integer)
com.ichi2.libanki.Sound:void addSounds(java.lang.String,java.lang.String,java.lang.Integer)->com.ichi2.libanki.Sound:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.libanki.Sound:java.lang.String expandSounds(java.lang.String,java.lang.String)
com.ichi2.libanki.Sound:java.lang.String expandSounds(java.lang.String,java.lang.String)->com.ichi2.libanki.Sound:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.libanki.Card:java.lang.Integer getOrd()
com.ichi2.libanki.Card:java.lang.Integer getOrd()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.libanki.template.Template:java.lang.Boolean textContainsMathjax(java.lang.String)
com.ichi2.libanki.template.Template:java.lang.Boolean textContainsMathjax(java.lang.String)->com.ichi2.libanki.template.Template:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.anki.reviewer.ReviewerExtRegistry:void updateCssStyle(java.lang.StringBuilder)
com.ichi2.anki.reviewer.ReviewerExtRegistry:void updateCssStyle(java.lang.StringBuilder)->com.ichi2.anki.reviewer.ReviewerExtRegistry:[Z $jacocoInit()
com.ichi2.anki.reviewer.ReviewerExtRegistry:void updateCssStyle(java.lang.StringBuilder)->com.ichi2.anki.reviewer.CustomFontsReviewerExt:void updateCssStyle(java.lang.StringBuilder)
com.ichi2.anki.reviewer.CustomFontsReviewerExt:void updateCssStyle(java.lang.StringBuilder)->com.ichi2.anki.reviewer.CustomFontsReviewerExt:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.themes.Themes:java.lang.Integer getCurrentTheme(com.ichi2.anki.Reviewer)
com.ichi2.themes.Themes:java.lang.Integer getCurrentTheme(com.ichi2.anki.Reviewer)->com.ichi2.themes.Themes:[Z $jacocoInit()
com.ichi2.themes.Themes:java.lang.Integer getCurrentTheme(com.ichi2.anki.Reviewer)->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:java.lang.String smpToHtmlEntity(java.lang.String)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String smpToHtmlEntity(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.anki.Reviewer:void fillFlashcard()
com.ichi2.anki.Reviewer:void fillFlashcard()->com.ichi2.anki.Reviewer:[Z $jacocoInit()
com.ichi2.anki.Reviewer:void fillFlashcard()->com.ichi2.anki.AbstractFlashcardViewer:void fillFlashcard()
com.ichi2.anki.AbstractFlashcardViewer:void fillFlashcard()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void fillFlashcard()->com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()->com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatHelper getInstance()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatHelper getInstance()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void fillFlashcard()->com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getODid()
com.ichi2.libanki.Card:java.lang.Long getODid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getDid()
com.ichi2.libanki.Card:java.lang.Long getDid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void fillFlashcard()->com.ichi2.compat.CompatV17:void setHTML5MediaAutoPlay(com.android.webview.chromium.ContentSettingsAdapter,java.lang.Boolean)
com.ichi2.compat.CompatV17:void setHTML5MediaAutoPlay(com.android.webview.chromium.ContentSettingsAdapter,java.lang.Boolean)->com.ichi2.compat.CompatV17:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void fillFlashcard()->com.ichi2.anki.AbstractFlashcardViewer:void updateForNewCard()
com.ichi2.anki.AbstractFlashcardViewer:void updateForNewCard()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateForNewCard()->com.ichi2.anki.AbstractFlashcardViewer:void updateScreenCounts()
com.ichi2.anki.AbstractFlashcardViewer:void updateScreenCounts()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateScreenCounts()->com.ichi2.libanki.Sched:[I counts(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:[I counts(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:[I counts(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:java.lang.Integer countIdx(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:java.lang.Integer countIdx(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer countIdx(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getQueue()
com.ichi2.libanki.Card:java.lang.Integer getQueue()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer countIdx(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getQueue()
com.ichi2.libanki.Card:java.lang.Integer getQueue()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateScreenCounts()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.AbstractFlashcardViewer:void updateScreenCounts()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateScreenCounts()->com.ichi2.libanki.Card:java.lang.Long getDid()
com.ichi2.libanki.Card:java.lang.Long getDid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateScreenCounts()->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateScreenCounts()->com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)
com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateScreenCounts()->com.ichi2.libanki.Sched:java.lang.Integer countIdx(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:java.lang.Integer countIdx(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer countIdx(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getQueue()
com.ichi2.libanki.Card:java.lang.Integer getQueue()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer countIdx(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getQueue()
com.ichi2.libanki.Card:java.lang.Integer getQueue()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateForNewCard()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:void playSounds(java.lang.Boolean)
com.ichi2.anki.AbstractFlashcardViewer:void playSounds(java.lang.Boolean)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void playSounds(java.lang.Boolean)->com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getODid()
com.ichi2.libanki.Card:java.lang.Long getODid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getDid()
com.ichi2.libanki.Card:java.lang.Long getDid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void playSounds(java.lang.Boolean)->com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getODid()
com.ichi2.libanki.Card:java.lang.Long getODid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getDid()
com.ichi2.libanki.Card:java.lang.Long getDid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void playSounds(java.lang.Boolean)->com.ichi2.libanki.Sound:void playSounds(java.lang.Integer)
com.ichi2.libanki.Sound:void playSounds(java.lang.Integer)->com.ichi2.libanki.Sound:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.anki.AbstractFlashcardViewer:void hideEaseButtons()
com.ichi2.anki.AbstractFlashcardViewer:void hideEaseButtons()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void hideEaseButtons()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.libanki.Card:java.lang.Long getId()
com.ichi2.libanki.Card:java.lang.Long getId()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.libanki.Collection:void timeboxReached()
com.ichi2.libanki.Collection:void timeboxReached()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.BaseAsyncTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)
com.ichi2.async.BaseAsyncTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.AbstractFlashcardViewer:void refreshActionBar()
com.ichi2.anki.AbstractFlashcardViewer:void refreshActionBar()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.Reviewer:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.Reviewer:void setCustomButtons(androidx.appcompat.view.menu.MenuBuilder)
com.ichi2.anki.Reviewer:void setCustomButtons(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.Reviewer:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.libanki.Card:com.ichi2.libanki.Note note()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)
com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.libanki.Note:java.lang.Boolean hasTag(java.lang.String)
com.ichi2.libanki.Note:java.lang.Boolean hasTag(java.lang.String)->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.libanki.Note:java.lang.Boolean hasTag(java.lang.String)->com.ichi2.libanki.Collection:com.ichi2.libanki.Tags getTags()
com.ichi2.libanki.Collection:com.ichi2.libanki.Tags getTags()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Note:java.lang.Boolean hasTag(java.lang.String)->com.ichi2.libanki.Tags:java.lang.Boolean inList(java.lang.String,java.util.ArrayList)
com.ichi2.libanki.Tags:java.lang.Boolean inList(java.lang.String,java.util.ArrayList)->com.ichi2.libanki.Tags:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.libanki.Collection:java.lang.Boolean undoAvailable()
com.ichi2.libanki.Collection:java.lang.Boolean undoAvailable()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getParentDid()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getParentDid()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getParentDid()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getParentDid()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getParentDid()->com.ichi2.libanki.Decks:org.json.JSONObject current()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:java.lang.Long selected()
com.ichi2.libanki.Decks:java.lang.Long selected()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.lang.Long selected()->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.libanki.Decks:java.lang.Boolean isDyn(java.lang.Long)
com.ichi2.libanki.Decks:java.lang.Boolean isDyn(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.lang.Boolean isDyn(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.Reviewer:java.lang.Boolean dismissNoteAvailable(com.ichi2.libanki.Collection$DismissType)
com.ichi2.anki.Reviewer:java.lang.Boolean dismissNoteAvailable(com.ichi2.libanki.Collection$DismissType)->com.ichi2.anki.Reviewer:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean dismissNoteAvailable(com.ichi2.libanki.Collection$DismissType)->com.ichi2.libanki.Card:com.ichi2.libanki.Note note()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)
com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean dismissNoteAvailable(com.ichi2.libanki.Collection$DismissType)->com.ichi2.libanki.Card:com.ichi2.libanki.Note note()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)
com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean dismissNoteAvailable(com.ichi2.libanki.Collection$DismissType)->com.ichi2.libanki.Note:java.util.ArrayList cards()
com.ichi2.libanki.Note:java.util.ArrayList cards()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.libanki.Note:java.util.ArrayList cards()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Note:java.util.ArrayList cards()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.Note:java.util.ArrayList cards()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:void access$200(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void access$200(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void recyclePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteProgram:[Ljava.lang.String; getColumnNames()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
com.ichi2.libanki.Note:java.util.ArrayList cards()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()->io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.String getPath()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void clearOrCreateWindow(java.lang.String)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer cursorPickFillWindowStartPosition(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()
io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.String getSql()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:void getBindArgs()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()
io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:void setStartPosition(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
com.ichi2.libanki.Note:java.util.ArrayList cards()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Note:java.util.ArrayList cards()->com.ichi2.libanki.Collection:com.ichi2.libanki.Card getCard(java.lang.Long)
com.ichi2.libanki.Collection:com.ichi2.libanki.Card getCard(java.lang.Long)->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Collection:com.ichi2.libanki.Card getCard(java.lang.Long)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Collection:com.ichi2.libanki.Card getCard(java.lang.Long)->com.ichi2.libanki.Card:void load()
com.ichi2.libanki.Card:void load()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:void load()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Card:void load()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.Card:void load()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteProgram:[Ljava.lang.String; getColumnNames()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToFirst()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToFirst()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()->io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.String getPath()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void clearOrCreateWindow(java.lang.String)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer cursorPickFillWindowStartPosition(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()
io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.String getSql()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:void getBindArgs()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()
io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:void setStartPosition(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.String getString(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.String getString(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.String getString(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.String getString(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.sqlite.SQLiteCursor:void close()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.AbstractCursor:void close()
io.requery.android.database.AbstractCursor:void close()->io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractWindowedCursor:void closeWindow()
io.requery.android.database.AbstractWindowedCursor:void closeWindow()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.CursorWindow:void onAllReferencesReleased()
io.requery.android.database.CursorWindow:void onAllReferencesReleased()->io.requery.android.database.CursorWindow:void dispose()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()
io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()->io.requery.android.database.sqlite.SQLiteProgram:void clearBindings()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:void cursorClosed()
com.ichi2.libanki.Note:java.util.ArrayList cards()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
com.ichi2.libanki.Note:java.util.ArrayList cards()->io.requery.android.database.sqlite.SQLiteCursor:void close()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.AbstractCursor:void close()
io.requery.android.database.AbstractCursor:void close()->io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractWindowedCursor:void closeWindow()
io.requery.android.database.AbstractWindowedCursor:void closeWindow()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.CursorWindow:void onAllReferencesReleased()
io.requery.android.database.CursorWindow:void onAllReferencesReleased()->io.requery.android.database.CursorWindow:void dispose()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()
io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()->io.requery.android.database.sqlite.SQLiteProgram:void clearBindings()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:void cursorClosed()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.Reviewer:java.lang.Boolean dismissNoteAvailable(com.ichi2.libanki.Collection$DismissType)
com.ichi2.anki.Reviewer:java.lang.Boolean dismissNoteAvailable(com.ichi2.libanki.Collection$DismissType)->com.ichi2.anki.Reviewer:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean dismissNoteAvailable(com.ichi2.libanki.Collection$DismissType)->com.ichi2.libanki.Card:com.ichi2.libanki.Note note()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)
com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean dismissNoteAvailable(com.ichi2.libanki.Collection$DismissType)->com.ichi2.libanki.Card:com.ichi2.libanki.Note note()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)
com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean dismissNoteAvailable(com.ichi2.libanki.Collection$DismissType)->com.ichi2.libanki.Note:java.util.ArrayList cards()
com.ichi2.libanki.Note:java.util.ArrayList cards()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.libanki.Note:java.util.ArrayList cards()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Note:java.util.ArrayList cards()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.Note:java.util.ArrayList cards()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteProgram:[Ljava.lang.String; getColumnNames()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
com.ichi2.libanki.Note:java.util.ArrayList cards()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()->io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.String getPath()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void clearOrCreateWindow(java.lang.String)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer cursorPickFillWindowStartPosition(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()
io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.String getSql()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:void getBindArgs()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()
io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:void setStartPosition(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
com.ichi2.libanki.Note:java.util.ArrayList cards()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Note:java.util.ArrayList cards()->com.ichi2.libanki.Collection:com.ichi2.libanki.Card getCard(java.lang.Long)
com.ichi2.libanki.Collection:com.ichi2.libanki.Card getCard(java.lang.Long)->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Collection:com.ichi2.libanki.Card getCard(java.lang.Long)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Collection:com.ichi2.libanki.Card getCard(java.lang.Long)->com.ichi2.libanki.Card:void load()
com.ichi2.libanki.Card:void load()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:void load()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Card:void load()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.Card:void load()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteProgram:[Ljava.lang.String; getColumnNames()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToFirst()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToFirst()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()->io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.String getPath()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void clearOrCreateWindow(java.lang.String)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer cursorPickFillWindowStartPosition(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()
io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.String getSql()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:void getBindArgs()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()
io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:void setStartPosition(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.String getString(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.String getString(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.String getString(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.String getString(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.sqlite.SQLiteCursor:void close()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.AbstractCursor:void close()
io.requery.android.database.AbstractCursor:void close()->io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractWindowedCursor:void closeWindow()
io.requery.android.database.AbstractWindowedCursor:void closeWindow()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.CursorWindow:void onAllReferencesReleased()
io.requery.android.database.CursorWindow:void onAllReferencesReleased()->io.requery.android.database.CursorWindow:void dispose()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()
io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()->io.requery.android.database.sqlite.SQLiteProgram:void clearBindings()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:void cursorClosed()
com.ichi2.libanki.Note:java.util.ArrayList cards()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
com.ichi2.libanki.Note:java.util.ArrayList cards()->io.requery.android.database.sqlite.SQLiteCursor:void close()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.AbstractCursor:void close()
io.requery.android.database.AbstractCursor:void close()->io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractWindowedCursor:void closeWindow()
io.requery.android.database.AbstractWindowedCursor:void closeWindow()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.CursorWindow:void onAllReferencesReleased()
io.requery.android.database.CursorWindow:void onAllReferencesReleased()->io.requery.android.database.CursorWindow:void dispose()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()
io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()->io.requery.android.database.sqlite.SQLiteProgram:void clearBindings()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:void cursorClosed()
com.ichi2.anki.AbstractFlashcardViewer:androidx.appcompat.widget.AppCompatTextView access$1400(com.ichi2.anki.Reviewer)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->androidx.appcompat.widget.AppCompatButton:boolean dispatchTouchEvent(android.view.MotionEvent)
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->android.widget.LinearLayout:boolean dispatchTouchEvent(android.view.MotionEvent)
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->android.widget.LinearLayout:boolean dispatchTouchEvent(android.view.MotionEvent)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long access$400(com.ichi2.anki.Reviewer)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long access$402(com.ichi2.anki.Reviewer,java.lang.Long)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardAnswer()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardAnswer()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardAnswer()->com.ichi2.libanki.Card:java.lang.String a()
com.ichi2.libanki.Card:java.lang.String a()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.String a()->com.ichi2.libanki.Card:java.lang.String css()
com.ichi2.libanki.Card:java.lang.String css()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.String css()->com.ichi2.libanki.Card:org.json.JSONObject model()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()
com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)
com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Note:java.lang.Long getMid()
com.ichi2.libanki.Note:java.lang.Long getMid()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.String a()->com.ichi2.libanki.Card:java.util.HashMap _getQA()
com.ichi2.libanki.Card:java.util.HashMap _getQA()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.util.HashMap _getQA()->com.ichi2.libanki.Card:java.util.HashMap _getQA(java.lang.Boolean)
com.ichi2.libanki.Card:java.util.HashMap _getQA(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.util.HashMap _getQA(java.lang.Boolean)->com.ichi2.libanki.Card:java.util.HashMap _getQA(java.lang.Boolean,java.lang.Boolean)
com.ichi2.libanki.Card:java.util.HashMap _getQA(java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardAnswer()->com.ichi2.libanki.Sound:void stopSounds()
com.ichi2.libanki.Sound:void stopSounds()->com.ichi2.libanki.Sound:[Z $jacocoInit()
com.ichi2.libanki.Sound:void stopSounds()->com.ichi2.anki.ReadText:void stopTts()
com.ichi2.anki.ReadText:void stopTts()->com.ichi2.anki.ReadText:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardAnswer()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardAnswer()->com.ichi2.libanki.Collection:com.ichi2.libanki.Media getMedia()
com.ichi2.libanki.Collection:com.ichi2.libanki.Media getMedia()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardAnswer()->com.ichi2.libanki.Media:java.lang.String escapeImages(java.lang.String)
com.ichi2.libanki.Media:java.lang.String escapeImages(java.lang.String)->com.ichi2.libanki.Media:[Z $jacocoInit()
com.ichi2.libanki.Media:java.lang.String escapeImages(java.lang.String)->com.ichi2.libanki.Media:java.lang.String escapeImages(java.lang.String,java.lang.Boolean)
com.ichi2.libanki.Media:java.lang.String escapeImages(java.lang.String,java.lang.Boolean)->com.ichi2.libanki.Media:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardAnswer()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.String cleanTypedAnswer(java.lang.String)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String cleanTypedAnswer(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardAnswer()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.String cleanCorrectAnswer(java.lang.String)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String cleanCorrectAnswer(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardAnswer()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.String typeAnsAnswerFilter_LZHChange(java.lang.String,java.lang.String,java.lang.String)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String typeAnsAnswerFilter_LZHChange(java.lang.String,java.lang.String,java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String typeAnsAnswerFilter_LZHChange(java.lang.String,java.lang.String,java.lang.String)->com.ichi2.utils.DiffEngine:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String typeAnsAnswerFilter_LZHChange(java.lang.String,java.lang.String,java.lang.String)->com.ichi2.utils.DiffEngine:java.lang.String wrapMissing(java.lang.String)
com.ichi2.utils.DiffEngine:java.lang.String wrapMissing(java.lang.String)->com.ichi2.utils.DiffEngine:[Z $jacocoInit()
com.ichi2.utils.DiffEngine:java.lang.String wrapMissing(java.lang.String)->com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()->com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatHelper getInstance()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatHelper getInstance()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.utils.DiffEngine:java.lang.String wrapMissing(java.lang.String)->com.ichi2.compat.CompatV16:java.lang.String detagged(java.lang.String)
com.ichi2.compat.CompatV16:java.lang.String detagged(java.lang.String)->com.ichi2.compat.CompatV16:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardAnswer()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.String enrichWithQADiv(java.lang.String,java.lang.Boolean)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String enrichWithQADiv(java.lang.String,java.lang.Boolean)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardAnswer()->com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:void addAnswerSounds(java.lang.String)
com.ichi2.anki.AbstractFlashcardViewer:void addAnswerSounds(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void addAnswerSounds(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:java.lang.String removeFrontSideAudio(java.lang.String)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String removeFrontSideAudio(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String removeFrontSideAudio(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:java.lang.String getAnswerFormat()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String getAnswerFormat()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String getAnswerFormat()->com.ichi2.libanki.Card:org.json.JSONObject model()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()
com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)
com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Note:java.lang.Long getMid()
com.ichi2.libanki.Note:java.lang.Long getMid()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String getAnswerFormat()->com.ichi2.libanki.Card:java.lang.Integer getOrd()
com.ichi2.libanki.Card:java.lang.Integer getOrd()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String removeFrontSideAudio(java.lang.String)->com.ichi2.libanki.Card:java.util.HashMap _getQA(java.lang.Boolean)
com.ichi2.libanki.Card:java.util.HashMap _getQA(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.util.HashMap _getQA(java.lang.Boolean)->com.ichi2.libanki.Card:java.util.HashMap _getQA(java.lang.Boolean,java.lang.Boolean)
com.ichi2.libanki.Card:java.util.HashMap _getQA(java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void addAnswerSounds(java.lang.String)->com.ichi2.libanki.Sound:void addSounds(java.lang.String,java.lang.String,java.lang.Integer)
com.ichi2.libanki.Sound:void addSounds(java.lang.String,java.lang.String,java.lang.Integer)->com.ichi2.libanki.Sound:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.libanki.Sound:java.lang.String expandSounds(java.lang.String,java.lang.String)
com.ichi2.libanki.Sound:java.lang.String expandSounds(java.lang.String,java.lang.String)->com.ichi2.libanki.Sound:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.libanki.Card:java.lang.Integer getOrd()
com.ichi2.libanki.Card:java.lang.Integer getOrd()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.libanki.template.Template:java.lang.Boolean textContainsMathjax(java.lang.String)
com.ichi2.libanki.template.Template:java.lang.Boolean textContainsMathjax(java.lang.String)->com.ichi2.libanki.template.Template:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.anki.reviewer.ReviewerExtRegistry:void updateCssStyle(java.lang.StringBuilder)
com.ichi2.anki.reviewer.ReviewerExtRegistry:void updateCssStyle(java.lang.StringBuilder)->com.ichi2.anki.reviewer.ReviewerExtRegistry:[Z $jacocoInit()
com.ichi2.anki.reviewer.ReviewerExtRegistry:void updateCssStyle(java.lang.StringBuilder)->com.ichi2.anki.reviewer.CustomFontsReviewerExt:void updateCssStyle(java.lang.StringBuilder)
com.ichi2.anki.reviewer.CustomFontsReviewerExt:void updateCssStyle(java.lang.StringBuilder)->com.ichi2.anki.reviewer.CustomFontsReviewerExt:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.themes.Themes:java.lang.Integer getCurrentTheme(com.ichi2.anki.Reviewer)
com.ichi2.themes.Themes:java.lang.Integer getCurrentTheme(com.ichi2.anki.Reviewer)->com.ichi2.themes.Themes:[Z $jacocoInit()
com.ichi2.themes.Themes:java.lang.Integer getCurrentTheme(com.ichi2.anki.Reviewer)->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:java.lang.String smpToHtmlEntity(java.lang.String)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String smpToHtmlEntity(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.anki.Reviewer:void fillFlashcard()
com.ichi2.anki.Reviewer:void fillFlashcard()->com.ichi2.anki.Reviewer:[Z $jacocoInit()
com.ichi2.anki.Reviewer:void fillFlashcard()->com.ichi2.anki.AbstractFlashcardViewer:void fillFlashcard()
com.ichi2.anki.AbstractFlashcardViewer:void fillFlashcard()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void fillFlashcard()->com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()->com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatHelper getInstance()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatHelper getInstance()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void fillFlashcard()->com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getODid()
com.ichi2.libanki.Card:java.lang.Long getODid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getDid()
com.ichi2.libanki.Card:java.lang.Long getDid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void fillFlashcard()->com.ichi2.compat.CompatV17:void setHTML5MediaAutoPlay(com.android.webview.chromium.ContentSettingsAdapter,java.lang.Boolean)
com.ichi2.compat.CompatV17:void setHTML5MediaAutoPlay(com.android.webview.chromium.ContentSettingsAdapter,java.lang.Boolean)->com.ichi2.compat.CompatV17:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:void playSounds(java.lang.Boolean)
com.ichi2.anki.AbstractFlashcardViewer:void playSounds(java.lang.Boolean)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void playSounds(java.lang.Boolean)->com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getODid()
com.ichi2.libanki.Card:java.lang.Long getODid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getDid()
com.ichi2.libanki.Card:java.lang.Long getDid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void playSounds(java.lang.Boolean)->com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getODid()
com.ichi2.libanki.Card:java.lang.Long getODid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getDid()
com.ichi2.libanki.Card:java.lang.Long getDid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void playSounds(java.lang.Boolean)->com.ichi2.libanki.Sound:void playSounds(java.lang.Integer)
com.ichi2.libanki.Sound:void playSounds(java.lang.Integer)->com.ichi2.libanki.Sound:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardAnswer()->com.ichi2.anki.AbstractFlashcardViewer:void showEaseButtons()
com.ichi2.anki.AbstractFlashcardViewer:void showEaseButtons()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void showEaseButtons()->com.ichi2.libanki.Sched:java.lang.Integer answerButtons(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:java.lang.Integer answerButtons(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer answerButtons(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getODue()
com.ichi2.libanki.Card:java.lang.Long getODue()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer answerButtons(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getQueue()
com.ichi2.libanki.Card:java.lang.Integer getQueue()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void showEaseButtons()->com.ichi2.themes.Themes:[I getResFromAttr(com.ichi2.anki.Reviewer,[I)
com.ichi2.themes.Themes:[I getResFromAttr(com.ichi2.anki.Reviewer,[I)->com.ichi2.themes.Themes:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void showEaseButtons()->com.ichi2.themes.Themes:[I getColorFromAttr(com.ichi2.anki.Reviewer,[I)
com.ichi2.themes.Themes:[I getColorFromAttr(com.ichi2.anki.Reviewer,[I)->com.ichi2.themes.Themes:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void showEaseButtons()->com.ichi2.libanki.Sched:java.lang.String nextIvlStr(com.ichi2.anki.Reviewer,com.ichi2.libanki.Card,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.String nextIvlStr(com.ichi2.anki.Reviewer,com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.String nextIvlStr(com.ichi2.anki.Reviewer,com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Long nextIvl(com.ichi2.libanki.Card,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.Long nextIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long nextIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Card:java.lang.Integer getQueue()
com.ichi2.libanki.Card:java.lang.Integer getQueue()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long nextIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Card:java.lang.Integer getQueue()
com.ichi2.libanki.Card:java.lang.Integer getQueue()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Integer _startingLeft(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:java.lang.Integer _startingLeft(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _startingLeft(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getType()
com.ichi2.libanki.Card:java.lang.Integer getType()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _startingLeft(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getType()
com.ichi2.libanki.Card:java.lang.Integer getType()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getDid()
com.ichi2.libanki.Card:java.lang.Long getDid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getODid()
com.ichi2.libanki.Card:java.lang.Long getODid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _startingLeft(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer,java.lang.Long)
com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer,java.lang.Long)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer,java.lang.Long)->com.ichi2.libanki.Utils:java.lang.Long intNow()
com.ichi2.libanki.Utils:java.lang.Long intNow()->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.Long intNow()->com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)
com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)->com.ichi2.libanki.Utils:java.lang.Double now()
com.ichi2.libanki.Utils:java.lang.Double now()->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Card:void setLeft(java.lang.Integer)
com.ichi2.libanki.Card:void setLeft(java.lang.Integer)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getType()
com.ichi2.libanki.Card:java.lang.Integer getType()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getDid()
com.ichi2.libanki.Card:java.lang.Long getDid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getODid()
com.ichi2.libanki.Card:java.lang.Long getODid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Integer _delayForGrade(org.json.JSONObject,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.Integer _delayForGrade(org.json.JSONObject,java.lang.Integer)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.String nextIvlStr(com.ichi2.anki.Reviewer,com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Utils:java.lang.String timeQuantity(com.ichi2.anki.Reviewer,java.lang.Long)
com.ichi2.libanki.Utils:java.lang.String timeQuantity(com.ichi2.anki.Reviewer,java.lang.Long)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.String nextIvlStr(com.ichi2.anki.Reviewer,com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void showEaseButtons()->com.ichi2.libanki.Sched:java.lang.String nextIvlStr(com.ichi2.anki.Reviewer,com.ichi2.libanki.Card,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.String nextIvlStr(com.ichi2.anki.Reviewer,com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.String nextIvlStr(com.ichi2.anki.Reviewer,com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Long nextIvl(com.ichi2.libanki.Card,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.Long nextIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long nextIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Card:java.lang.Integer getQueue()
com.ichi2.libanki.Card:java.lang.Integer getQueue()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long nextIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Card:java.lang.Integer getQueue()
com.ichi2.libanki.Card:java.lang.Integer getQueue()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Integer _startingLeft(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:java.lang.Integer _startingLeft(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _startingLeft(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getType()
com.ichi2.libanki.Card:java.lang.Integer getType()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _startingLeft(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getType()
com.ichi2.libanki.Card:java.lang.Integer getType()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getDid()
com.ichi2.libanki.Card:java.lang.Long getDid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getODid()
com.ichi2.libanki.Card:java.lang.Long getODid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _startingLeft(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer,java.lang.Long)
com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer,java.lang.Long)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer,java.lang.Long)->com.ichi2.libanki.Utils:java.lang.Long intNow()
com.ichi2.libanki.Utils:java.lang.Long intNow()->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.Long intNow()->com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)
com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)->com.ichi2.libanki.Utils:java.lang.Double now()
com.ichi2.libanki.Utils:java.lang.Double now()->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Card:void setLeft(java.lang.Integer)
com.ichi2.libanki.Card:void setLeft(java.lang.Integer)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getType()
com.ichi2.libanki.Card:java.lang.Integer getType()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getDid()
com.ichi2.libanki.Card:java.lang.Long getDid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getODid()
com.ichi2.libanki.Card:java.lang.Long getODid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Card:java.lang.Integer getLeft()
com.ichi2.libanki.Card:java.lang.Integer getLeft()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Integer _delayForGrade(org.json.JSONObject,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.Integer _delayForGrade(org.json.JSONObject,java.lang.Integer)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.String nextIvlStr(com.ichi2.anki.Reviewer,com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Utils:java.lang.String timeQuantity(com.ichi2.anki.Reviewer,java.lang.Long)
com.ichi2.libanki.Utils:java.lang.String timeQuantity(com.ichi2.anki.Reviewer,java.lang.Long)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.String nextIvlStr(com.ichi2.anki.Reviewer,com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void showEaseButtons()->com.ichi2.libanki.Sched:java.lang.String nextIvlStr(com.ichi2.anki.Reviewer,com.ichi2.libanki.Card,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.String nextIvlStr(com.ichi2.anki.Reviewer,com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.String nextIvlStr(com.ichi2.anki.Reviewer,com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Long nextIvl(com.ichi2.libanki.Card,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.Long nextIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long nextIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Card:java.lang.Integer getQueue()
com.ichi2.libanki.Card:java.lang.Integer getQueue()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long nextIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Card:java.lang.Integer getQueue()
com.ichi2.libanki.Card:java.lang.Integer getQueue()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Integer _startingLeft(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:java.lang.Integer _startingLeft(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _startingLeft(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getType()
com.ichi2.libanki.Card:java.lang.Integer getType()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _startingLeft(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getType()
com.ichi2.libanki.Card:java.lang.Integer getType()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getDid()
com.ichi2.libanki.Card:java.lang.Long getDid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getODid()
com.ichi2.libanki.Card:java.lang.Long getODid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _startingLeft(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer,java.lang.Long)
com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer,java.lang.Long)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer,java.lang.Long)->com.ichi2.libanki.Utils:java.lang.Long intNow()
com.ichi2.libanki.Utils:java.lang.Long intNow()->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.Long intNow()->com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)
com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)->com.ichi2.libanki.Utils:java.lang.Double now()
com.ichi2.libanki.Utils:java.lang.Double now()->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Card:void setLeft(java.lang.Integer)
com.ichi2.libanki.Card:void setLeft(java.lang.Integer)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getType()
com.ichi2.libanki.Card:java.lang.Integer getType()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getDid()
com.ichi2.libanki.Card:java.lang.Long getDid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getODid()
com.ichi2.libanki.Card:java.lang.Long getODid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Boolean _resched(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:java.lang.Boolean _resched(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Boolean _resched(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getDid()
com.ichi2.libanki.Card:java.lang.Long getDid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Integer _graduatingIvl(com.ichi2.libanki.Card,org.json.JSONObject,java.lang.Boolean,java.lang.Boolean)
com.ichi2.libanki.Sched:java.lang.Integer _graduatingIvl(com.ichi2.libanki.Card,org.json.JSONObject,java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _graduatingIvl(com.ichi2.libanki.Card,org.json.JSONObject,java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Card:java.lang.Integer getType()
com.ichi2.libanki.Card:java.lang.Integer getType()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.String nextIvlStr(com.ichi2.anki.Reviewer,com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Utils:java.lang.String timeQuantity(com.ichi2.anki.Reviewer,java.lang.Long)
com.ichi2.libanki.Utils:java.lang.String timeQuantity(com.ichi2.anki.Reviewer,java.lang.Long)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.String nextIvlStr(com.ichi2.anki.Reviewer,com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->androidx.appcompat.widget.AppCompatTextView:boolean dispatchTouchEvent(android.view.MotionEvent)
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->android.widget.LinearLayout:boolean dispatchTouchEvent(android.view.MotionEvent)
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->android.widget.LinearLayout:boolean dispatchTouchEvent(android.view.MotionEvent)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long access$400(com.ichi2.anki.Reviewer)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long access$402(com.ichi2.anki.Reviewer,java.lang.Long)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void answerCard(java.lang.Integer)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void answerCard(java.lang.Integer)->com.ichi2.anki.AbstractFlashcardViewer:void hideLookupButton()
com.ichi2.anki.AbstractFlashcardViewer:void hideLookupButton()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void answerCard(java.lang.Integer)->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.AbstractFlashcardViewer:void answerCard(java.lang.Integer)->com.ichi2.libanki.Collection:com.ichi2.libanki.Sched getSched()
com.ichi2.libanki.Collection:com.ichi2.libanki.Sched getSched()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void answerCard(java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Integer answerButtons(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:java.lang.Integer answerButtons(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer answerButtons(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getODue()
com.ichi2.libanki.Card:java.lang.Long getODue()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer answerButtons(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getQueue()
com.ichi2.libanki.Card:java.lang.Integer getQueue()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void answerCard(java.lang.Integer)->com.ichi2.libanki.Sound:void stopSounds()
com.ichi2.libanki.Sound:void stopSounds()->com.ichi2.libanki.Sound:[Z $jacocoInit()
com.ichi2.libanki.Sound:void stopSounds()->com.ichi2.anki.ReadText:void stopTts()
com.ichi2.anki.ReadText:void stopTts()->com.ichi2.anki.ReadText:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void answerCard(java.lang.Integer)->com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.AbstractFlashcardViewer$9,[Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.AbstractFlashcardViewer$9,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.AbstractFlashcardViewer$9,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.AbstractFlashcardViewer$9,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.AbstractFlashcardViewer$9,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.AbstractFlashcardViewer$9,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onPreExecute()
com.ichi2.async.DeckTask:void onPreExecute()->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPreExecute()->com.ichi2.async.BaseAsyncTask:void onPreExecute()
com.ichi2.async.BaseAsyncTask:void onPreExecute()->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onPreExecute()->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPreExecute()->com.ichi2.anki.AbstractFlashcardViewer:void access$1300(com.ichi2.anki.Reviewer)
com.ichi2.anki.AbstractFlashcardViewer:void access$1300(com.ichi2.anki.Reviewer)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void access$1300(com.ichi2.anki.Reviewer)->com.ichi2.anki.AbstractFlashcardViewer:void blockControls()
com.ichi2.anki.AbstractFlashcardViewer:void blockControls()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void blockControls()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.AbstractFlashcardViewer:void access$1100(com.ichi2.anki.Reviewer)
com.ichi2.anki.AbstractFlashcardViewer:void access$1100(com.ichi2.anki.Reviewer)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void access$1100(com.ichi2.anki.Reviewer)->com.ichi2.anki.AbstractFlashcardViewer:void updateTypeAnswerInfo()
com.ichi2.anki.AbstractFlashcardViewer:void updateTypeAnswerInfo()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateTypeAnswerInfo()->com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean)
com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean)->com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean,java.lang.Boolean)
com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Card:java.lang.String css()
com.ichi2.libanki.Card:java.lang.String css()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.String css()->com.ichi2.libanki.Card:org.json.JSONObject model()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()
com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)
com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Note:java.lang.Long getMid()
com.ichi2.libanki.Note:java.lang.Long getMid()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Card:java.util.HashMap _getQA(java.lang.Boolean,java.lang.Boolean)
com.ichi2.libanki.Card:java.util.HashMap _getQA(java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.AnkiActivity:void hideProgressBar()
com.ichi2.anki.AnkiActivity:void hideProgressBar()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.AbstractFlashcardViewer:void access$1200(com.ichi2.anki.Reviewer)
com.ichi2.anki.AbstractFlashcardViewer:void access$1200(com.ichi2.anki.Reviewer)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void access$1200(com.ichi2.anki.Reviewer)->com.ichi2.anki.AbstractFlashcardViewer:void unblockControls()
com.ichi2.anki.AbstractFlashcardViewer:void unblockControls()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void unblockControls()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.Reviewer:void displayCardQuestion()
com.ichi2.anki.Reviewer:void displayCardQuestion()->com.ichi2.anki.Reviewer:[Z $jacocoInit()
com.ichi2.anki.Reviewer:void displayCardQuestion()->com.ichi2.anki.AbstractFlashcardViewer:void initTimer()
com.ichi2.anki.AbstractFlashcardViewer:void initTimer()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void initTimer()->com.ichi2.libanki.Card:java.lang.Boolean showTimer()
com.ichi2.libanki.Card:java.lang.Boolean showTimer()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.Boolean showTimer()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.Boolean showTimer()->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void initTimer()->com.ichi2.libanki.Card:java.lang.Integer timeLimit()
com.ichi2.libanki.Card:java.lang.Integer timeLimit()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.Integer timeLimit()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.Integer timeLimit()->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.Reviewer:void displayCardQuestion()->com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.anki.AbstractFlashcardViewer:void setInterface()
com.ichi2.anki.AbstractFlashcardViewer:void setInterface()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.libanki.Card:java.lang.Boolean isEmpty()
com.ichi2.libanki.Card:java.lang.Boolean isEmpty()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.Boolean isEmpty()->com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()
com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.Boolean isEmpty()->com.ichi2.libanki.Card:org.json.JSONObject model()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()
com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)
com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Note:java.lang.Long getMid()
com.ichi2.libanki.Note:java.lang.Long getMid()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.Boolean isEmpty()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)
com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.Boolean isEmpty()->com.ichi2.libanki.Note:[Ljava.lang.String; getFields()
com.ichi2.libanki.Note:[Ljava.lang.String; getFields()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.Boolean isEmpty()->com.ichi2.libanki.Utils:java.lang.String joinFields([Ljava.lang.String;)
com.ichi2.libanki.Utils:java.lang.String joinFields([Ljava.lang.String;)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.Boolean isEmpty()->com.ichi2.libanki.Models:java.util.ArrayList availOrds(org.json.JSONObject,java.lang.String)
com.ichi2.libanki.Models:java.util.ArrayList availOrds(org.json.JSONObject,java.lang.String)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.libanki.Models:java.util.ArrayList availOrds(org.json.JSONObject,java.lang.String)->com.ichi2.libanki.Utils:[Ljava.lang.String; splitFields(java.lang.String)
com.ichi2.libanki.Utils:[Ljava.lang.String; splitFields(java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.libanki.Card:java.lang.String q()
com.ichi2.libanki.Card:java.lang.String q()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.String q()->com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean)
com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean)->com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean,java.lang.Boolean)
com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Card:java.lang.String css()
com.ichi2.libanki.Card:java.lang.String css()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.String css()->com.ichi2.libanki.Card:org.json.JSONObject model()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()
com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)
com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Note:java.lang.Long getMid()
com.ichi2.libanki.Note:java.lang.Long getMid()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Card:java.util.HashMap _getQA(java.lang.Boolean,java.lang.Boolean)
com.ichi2.libanki.Card:java.util.HashMap _getQA(java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.libanki.Collection:com.ichi2.libanki.Media getMedia()
com.ichi2.libanki.Collection:com.ichi2.libanki.Media getMedia()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.libanki.Media:java.lang.String escapeImages(java.lang.String)
com.ichi2.libanki.Media:java.lang.String escapeImages(java.lang.String)->com.ichi2.libanki.Media:[Z $jacocoInit()
com.ichi2.libanki.Media:java.lang.String escapeImages(java.lang.String)->com.ichi2.libanki.Media:java.lang.String escapeImages(java.lang.String,java.lang.Boolean)
com.ichi2.libanki.Media:java.lang.String escapeImages(java.lang.String,java.lang.Boolean)->com.ichi2.libanki.Media:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.String typeAnsQuestionFilter(java.lang.String)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String typeAnsQuestionFilter(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.String enrichWithQADiv(java.lang.String,java.lang.Boolean)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String enrichWithQADiv(java.lang.String,java.lang.Boolean)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.libanki.Sound:void resetSounds()
com.ichi2.libanki.Sound:void resetSounds()->com.ichi2.libanki.Sound:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.libanki.Sound:void addSounds(java.lang.String,java.lang.String,java.lang.Integer)
com.ichi2.libanki.Sound:void addSounds(java.lang.String,java.lang.String,java.lang.Integer)->com.ichi2.libanki.Sound:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.libanki.Sound:java.lang.String expandSounds(java.lang.String,java.lang.String)
com.ichi2.libanki.Sound:java.lang.String expandSounds(java.lang.String,java.lang.String)->com.ichi2.libanki.Sound:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.libanki.Card:java.lang.Integer getOrd()
com.ichi2.libanki.Card:java.lang.Integer getOrd()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.libanki.template.Template:java.lang.Boolean textContainsMathjax(java.lang.String)
com.ichi2.libanki.template.Template:java.lang.Boolean textContainsMathjax(java.lang.String)->com.ichi2.libanki.template.Template:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.anki.reviewer.ReviewerExtRegistry:void updateCssStyle(java.lang.StringBuilder)
com.ichi2.anki.reviewer.ReviewerExtRegistry:void updateCssStyle(java.lang.StringBuilder)->com.ichi2.anki.reviewer.ReviewerExtRegistry:[Z $jacocoInit()
com.ichi2.anki.reviewer.ReviewerExtRegistry:void updateCssStyle(java.lang.StringBuilder)->com.ichi2.anki.reviewer.CustomFontsReviewerExt:void updateCssStyle(java.lang.StringBuilder)
com.ichi2.anki.reviewer.CustomFontsReviewerExt:void updateCssStyle(java.lang.StringBuilder)->com.ichi2.anki.reviewer.CustomFontsReviewerExt:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.themes.Themes:java.lang.Integer getCurrentTheme(com.ichi2.anki.Reviewer)
com.ichi2.themes.Themes:java.lang.Integer getCurrentTheme(com.ichi2.anki.Reviewer)->com.ichi2.themes.Themes:[Z $jacocoInit()
com.ichi2.themes.Themes:java.lang.Integer getCurrentTheme(com.ichi2.anki.Reviewer)->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:java.lang.String smpToHtmlEntity(java.lang.String)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String smpToHtmlEntity(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.anki.Reviewer:void fillFlashcard()
com.ichi2.anki.Reviewer:void fillFlashcard()->com.ichi2.anki.Reviewer:[Z $jacocoInit()
com.ichi2.anki.Reviewer:void fillFlashcard()->com.ichi2.anki.AbstractFlashcardViewer:void fillFlashcard()
com.ichi2.anki.AbstractFlashcardViewer:void fillFlashcard()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void fillFlashcard()->com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()->com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatHelper getInstance()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatHelper getInstance()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void fillFlashcard()->com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getODid()
com.ichi2.libanki.Card:java.lang.Long getODid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getDid()
com.ichi2.libanki.Card:java.lang.Long getDid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void fillFlashcard()->com.ichi2.compat.CompatV17:void setHTML5MediaAutoPlay(com.android.webview.chromium.ContentSettingsAdapter,java.lang.Boolean)
com.ichi2.compat.CompatV17:void setHTML5MediaAutoPlay(com.android.webview.chromium.ContentSettingsAdapter,java.lang.Boolean)->com.ichi2.compat.CompatV17:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void fillFlashcard()->com.ichi2.anki.AbstractFlashcardViewer:void updateForNewCard()
com.ichi2.anki.AbstractFlashcardViewer:void updateForNewCard()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateForNewCard()->com.ichi2.anki.AbstractFlashcardViewer:void updateScreenCounts()
com.ichi2.anki.AbstractFlashcardViewer:void updateScreenCounts()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateScreenCounts()->com.ichi2.libanki.Sched:[I counts(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:[I counts(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:[I counts(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:java.lang.Integer countIdx(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:java.lang.Integer countIdx(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer countIdx(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getQueue()
com.ichi2.libanki.Card:java.lang.Integer getQueue()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer countIdx(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getQueue()
com.ichi2.libanki.Card:java.lang.Integer getQueue()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateScreenCounts()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.AbstractFlashcardViewer:void updateScreenCounts()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateScreenCounts()->com.ichi2.libanki.Card:java.lang.Long getDid()
com.ichi2.libanki.Card:java.lang.Long getDid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateScreenCounts()->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateScreenCounts()->com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)
com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateScreenCounts()->com.ichi2.libanki.Sched:java.lang.Integer countIdx(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:java.lang.Integer countIdx(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer countIdx(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getQueue()
com.ichi2.libanki.Card:java.lang.Integer getQueue()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer countIdx(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getQueue()
com.ichi2.libanki.Card:java.lang.Integer getQueue()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateForNewCard()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:void playSounds(java.lang.Boolean)
com.ichi2.anki.AbstractFlashcardViewer:void playSounds(java.lang.Boolean)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void playSounds(java.lang.Boolean)->com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getODid()
com.ichi2.libanki.Card:java.lang.Long getODid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getDid()
com.ichi2.libanki.Card:java.lang.Long getDid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void playSounds(java.lang.Boolean)->com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getODid()
com.ichi2.libanki.Card:java.lang.Long getODid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getDid()
com.ichi2.libanki.Card:java.lang.Long getDid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void playSounds(java.lang.Boolean)->com.ichi2.libanki.Sound:void playSounds(java.lang.Integer)
com.ichi2.libanki.Sound:void playSounds(java.lang.Integer)->com.ichi2.libanki.Sound:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.anki.AbstractFlashcardViewer:void hideEaseButtons()
com.ichi2.anki.AbstractFlashcardViewer:void hideEaseButtons()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void hideEaseButtons()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.libanki.Card:java.lang.Long getId()
com.ichi2.libanki.Card:java.lang.Long getId()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.libanki.Collection:void timeboxReached()
com.ichi2.libanki.Collection:void timeboxReached()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.BaseAsyncTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)
com.ichi2.async.BaseAsyncTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.AbstractFlashcardViewer:void refreshActionBar()
com.ichi2.anki.AbstractFlashcardViewer:void refreshActionBar()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.Reviewer:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.Reviewer:void setCustomButtons(androidx.appcompat.view.menu.MenuBuilder)
com.ichi2.anki.Reviewer:void setCustomButtons(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.Reviewer:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.libanki.Card:com.ichi2.libanki.Note note()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)
com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.libanki.Note:java.lang.Boolean hasTag(java.lang.String)
com.ichi2.libanki.Note:java.lang.Boolean hasTag(java.lang.String)->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.libanki.Note:java.lang.Boolean hasTag(java.lang.String)->com.ichi2.libanki.Collection:com.ichi2.libanki.Tags getTags()
com.ichi2.libanki.Collection:com.ichi2.libanki.Tags getTags()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Note:java.lang.Boolean hasTag(java.lang.String)->com.ichi2.libanki.Tags:java.lang.Boolean inList(java.lang.String,java.util.ArrayList)
com.ichi2.libanki.Tags:java.lang.Boolean inList(java.lang.String,java.util.ArrayList)->com.ichi2.libanki.Tags:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.libanki.Collection:java.lang.Boolean undoAvailable()
com.ichi2.libanki.Collection:java.lang.Boolean undoAvailable()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getParentDid()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getParentDid()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getParentDid()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getParentDid()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getParentDid()->com.ichi2.libanki.Decks:org.json.JSONObject current()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:java.lang.Long selected()
com.ichi2.libanki.Decks:java.lang.Long selected()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.lang.Long selected()->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.libanki.Decks:java.lang.Boolean isDyn(java.lang.Long)
com.ichi2.libanki.Decks:java.lang.Boolean isDyn(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.lang.Boolean isDyn(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.Reviewer:java.lang.Boolean dismissNoteAvailable(com.ichi2.libanki.Collection$DismissType)
com.ichi2.anki.Reviewer:java.lang.Boolean dismissNoteAvailable(com.ichi2.libanki.Collection$DismissType)->com.ichi2.anki.Reviewer:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean dismissNoteAvailable(com.ichi2.libanki.Collection$DismissType)->com.ichi2.libanki.Card:com.ichi2.libanki.Note note()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)
com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean dismissNoteAvailable(com.ichi2.libanki.Collection$DismissType)->com.ichi2.libanki.Card:com.ichi2.libanki.Note note()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)
com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean dismissNoteAvailable(com.ichi2.libanki.Collection$DismissType)->com.ichi2.libanki.Note:java.util.ArrayList cards()
com.ichi2.libanki.Note:java.util.ArrayList cards()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.libanki.Note:java.util.ArrayList cards()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Note:java.util.ArrayList cards()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.Note:java.util.ArrayList cards()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isCacheable(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)->io.requery.android.database.sqlite.SQLiteConnection:void access$200(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void access$200(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteConnection:void recyclePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteProgram:[Ljava.lang.String; getColumnNames()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
com.ichi2.libanki.Note:java.util.ArrayList cards()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()->io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.String getPath()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void clearOrCreateWindow(java.lang.String)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer cursorPickFillWindowStartPosition(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()
io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.String getSql()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:void getBindArgs()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()
io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:void setStartPosition(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
com.ichi2.libanki.Note:java.util.ArrayList cards()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Note:java.util.ArrayList cards()->com.ichi2.libanki.Collection:com.ichi2.libanki.Card getCard(java.lang.Long)
com.ichi2.libanki.Collection:com.ichi2.libanki.Card getCard(java.lang.Long)->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Collection:com.ichi2.libanki.Card getCard(java.lang.Long)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Collection:com.ichi2.libanki.Card getCard(java.lang.Long)->com.ichi2.libanki.Card:void load()
com.ichi2.libanki.Card:void load()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:void load()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Card:void load()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.Card:void load()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteProgram:[Ljava.lang.String; getColumnNames()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToFirst()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToFirst()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()->io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.String getPath()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void clearOrCreateWindow(java.lang.String)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer cursorPickFillWindowStartPosition(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()
io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.String getSql()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:void getBindArgs()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()
io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:void setStartPosition(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.String getString(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.String getString(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.String getString(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.String getString(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.sqlite.SQLiteCursor:void close()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.AbstractCursor:void close()
io.requery.android.database.AbstractCursor:void close()->io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractWindowedCursor:void closeWindow()
io.requery.android.database.AbstractWindowedCursor:void closeWindow()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.CursorWindow:void onAllReferencesReleased()
io.requery.android.database.CursorWindow:void onAllReferencesReleased()->io.requery.android.database.CursorWindow:void dispose()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()
io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()->io.requery.android.database.sqlite.SQLiteProgram:void clearBindings()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:void cursorClosed()
com.ichi2.libanki.Note:java.util.ArrayList cards()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
com.ichi2.libanki.Note:java.util.ArrayList cards()->io.requery.android.database.sqlite.SQLiteCursor:void close()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.AbstractCursor:void close()
io.requery.android.database.AbstractCursor:void close()->io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractWindowedCursor:void closeWindow()
io.requery.android.database.AbstractWindowedCursor:void closeWindow()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.CursorWindow:void onAllReferencesReleased()
io.requery.android.database.CursorWindow:void onAllReferencesReleased()->io.requery.android.database.CursorWindow:void dispose()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()
io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()->io.requery.android.database.sqlite.SQLiteProgram:void clearBindings()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:void cursorClosed()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.Reviewer:java.lang.Boolean dismissNoteAvailable(com.ichi2.libanki.Collection$DismissType)
com.ichi2.anki.Reviewer:java.lang.Boolean dismissNoteAvailable(com.ichi2.libanki.Collection$DismissType)->com.ichi2.anki.Reviewer:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean dismissNoteAvailable(com.ichi2.libanki.Collection$DismissType)->com.ichi2.libanki.Card:com.ichi2.libanki.Note note()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)
com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean dismissNoteAvailable(com.ichi2.libanki.Collection$DismissType)->com.ichi2.libanki.Card:com.ichi2.libanki.Note note()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)
com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean dismissNoteAvailable(com.ichi2.libanki.Collection$DismissType)->com.ichi2.libanki.Note:java.util.ArrayList cards()
com.ichi2.libanki.Note:java.util.ArrayList cards()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.libanki.Note:java.util.ArrayList cards()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Note:java.util.ArrayList cards()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.Note:java.util.ArrayList cards()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteProgram:[Ljava.lang.String; getColumnNames()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
com.ichi2.libanki.Note:java.util.ArrayList cards()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()->io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.String getPath()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void clearOrCreateWindow(java.lang.String)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer cursorPickFillWindowStartPosition(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()
io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.String getSql()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:void getBindArgs()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()
io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:void setStartPosition(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
com.ichi2.libanki.Note:java.util.ArrayList cards()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Note:java.util.ArrayList cards()->com.ichi2.libanki.Collection:com.ichi2.libanki.Card getCard(java.lang.Long)
com.ichi2.libanki.Collection:com.ichi2.libanki.Card getCard(java.lang.Long)->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Collection:com.ichi2.libanki.Card getCard(java.lang.Long)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Collection:com.ichi2.libanki.Card getCard(java.lang.Long)->com.ichi2.libanki.Card:void load()
com.ichi2.libanki.Card:void load()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:void load()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Card:void load()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.Card:void load()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteProgram:[Ljava.lang.String; getColumnNames()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToFirst()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToFirst()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()->io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.String getPath()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void clearOrCreateWindow(java.lang.String)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer cursorPickFillWindowStartPosition(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()
io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.String getSql()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:void getBindArgs()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()
io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:void setStartPosition(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.String getString(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.String getString(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.String getString(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.String getString(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.sqlite.SQLiteCursor:void close()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.AbstractCursor:void close()
io.requery.android.database.AbstractCursor:void close()->io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractWindowedCursor:void closeWindow()
io.requery.android.database.AbstractWindowedCursor:void closeWindow()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.CursorWindow:void onAllReferencesReleased()
io.requery.android.database.CursorWindow:void onAllReferencesReleased()->io.requery.android.database.CursorWindow:void dispose()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()
io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()->io.requery.android.database.sqlite.SQLiteProgram:void clearBindings()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:void cursorClosed()
com.ichi2.libanki.Note:java.util.ArrayList cards()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
com.ichi2.libanki.Note:java.util.ArrayList cards()->io.requery.android.database.sqlite.SQLiteCursor:void close()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.AbstractCursor:void close()
io.requery.android.database.AbstractCursor:void close()->io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractWindowedCursor:void closeWindow()
io.requery.android.database.AbstractWindowedCursor:void closeWindow()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.CursorWindow:void onAllReferencesReleased()
io.requery.android.database.CursorWindow:void onAllReferencesReleased()->io.requery.android.database.CursorWindow:void dispose()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()
io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()->io.requery.android.database.sqlite.SQLiteProgram:void clearBindings()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:void cursorClosed()
com.ichi2.anki.AbstractFlashcardViewer:androidx.appcompat.widget.AppCompatTextView access$1400(com.ichi2.anki.Reviewer)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->androidx.appcompat.widget.AppCompatButton:boolean dispatchTouchEvent(android.view.MotionEvent)
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->android.widget.LinearLayout:boolean dispatchTouchEvent(android.view.MotionEvent)
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->android.widget.LinearLayout:boolean dispatchTouchEvent(android.view.MotionEvent)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long access$400(com.ichi2.anki.Reviewer)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long access$402(com.ichi2.anki.Reviewer,java.lang.Long)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardAnswer()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardAnswer()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardAnswer()->com.ichi2.libanki.Card:java.lang.String a()
com.ichi2.libanki.Card:java.lang.String a()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.String a()->com.ichi2.libanki.Card:java.lang.String css()
com.ichi2.libanki.Card:java.lang.String css()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.String css()->com.ichi2.libanki.Card:org.json.JSONObject model()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()
com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)
com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Note:java.lang.Long getMid()
com.ichi2.libanki.Note:java.lang.Long getMid()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.String a()->com.ichi2.libanki.Card:java.util.HashMap _getQA()
com.ichi2.libanki.Card:java.util.HashMap _getQA()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.util.HashMap _getQA()->com.ichi2.libanki.Card:java.util.HashMap _getQA(java.lang.Boolean)
com.ichi2.libanki.Card:java.util.HashMap _getQA(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.util.HashMap _getQA(java.lang.Boolean)->com.ichi2.libanki.Card:java.util.HashMap _getQA(java.lang.Boolean,java.lang.Boolean)
com.ichi2.libanki.Card:java.util.HashMap _getQA(java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardAnswer()->com.ichi2.libanki.Sound:void stopSounds()
com.ichi2.libanki.Sound:void stopSounds()->com.ichi2.libanki.Sound:[Z $jacocoInit()
com.ichi2.libanki.Sound:void stopSounds()->com.ichi2.anki.ReadText:void stopTts()
com.ichi2.anki.ReadText:void stopTts()->com.ichi2.anki.ReadText:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardAnswer()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardAnswer()->com.ichi2.libanki.Collection:com.ichi2.libanki.Media getMedia()
com.ichi2.libanki.Collection:com.ichi2.libanki.Media getMedia()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardAnswer()->com.ichi2.libanki.Media:java.lang.String escapeImages(java.lang.String)
com.ichi2.libanki.Media:java.lang.String escapeImages(java.lang.String)->com.ichi2.libanki.Media:[Z $jacocoInit()
com.ichi2.libanki.Media:java.lang.String escapeImages(java.lang.String)->com.ichi2.libanki.Media:java.lang.String escapeImages(java.lang.String,java.lang.Boolean)
com.ichi2.libanki.Media:java.lang.String escapeImages(java.lang.String,java.lang.Boolean)->com.ichi2.libanki.Media:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardAnswer()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.String cleanTypedAnswer(java.lang.String)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String cleanTypedAnswer(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardAnswer()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.String cleanCorrectAnswer(java.lang.String)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String cleanCorrectAnswer(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardAnswer()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.String typeAnsAnswerFilter_LZHChange(java.lang.String,java.lang.String,java.lang.String)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String typeAnsAnswerFilter_LZHChange(java.lang.String,java.lang.String,java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String typeAnsAnswerFilter_LZHChange(java.lang.String,java.lang.String,java.lang.String)->com.ichi2.utils.DiffEngine:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String typeAnsAnswerFilter_LZHChange(java.lang.String,java.lang.String,java.lang.String)->com.ichi2.utils.DiffEngine:java.lang.String wrapMissing(java.lang.String)
com.ichi2.utils.DiffEngine:java.lang.String wrapMissing(java.lang.String)->com.ichi2.utils.DiffEngine:[Z $jacocoInit()
com.ichi2.utils.DiffEngine:java.lang.String wrapMissing(java.lang.String)->com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()->com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatHelper getInstance()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatHelper getInstance()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.utils.DiffEngine:java.lang.String wrapMissing(java.lang.String)->com.ichi2.compat.CompatV16:java.lang.String detagged(java.lang.String)
com.ichi2.compat.CompatV16:java.lang.String detagged(java.lang.String)->com.ichi2.compat.CompatV16:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardAnswer()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.String enrichWithQADiv(java.lang.String,java.lang.Boolean)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String enrichWithQADiv(java.lang.String,java.lang.Boolean)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardAnswer()->com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:void addAnswerSounds(java.lang.String)
com.ichi2.anki.AbstractFlashcardViewer:void addAnswerSounds(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void addAnswerSounds(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:java.lang.String removeFrontSideAudio(java.lang.String)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String removeFrontSideAudio(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String removeFrontSideAudio(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:java.lang.String getAnswerFormat()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String getAnswerFormat()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String getAnswerFormat()->com.ichi2.libanki.Card:org.json.JSONObject model()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()
com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)
com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Note:java.lang.Long getMid()
com.ichi2.libanki.Note:java.lang.Long getMid()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String getAnswerFormat()->com.ichi2.libanki.Card:java.lang.Integer getOrd()
com.ichi2.libanki.Card:java.lang.Integer getOrd()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String removeFrontSideAudio(java.lang.String)->com.ichi2.libanki.Card:java.util.HashMap _getQA(java.lang.Boolean)
com.ichi2.libanki.Card:java.util.HashMap _getQA(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.util.HashMap _getQA(java.lang.Boolean)->com.ichi2.libanki.Card:java.util.HashMap _getQA(java.lang.Boolean,java.lang.Boolean)
com.ichi2.libanki.Card:java.util.HashMap _getQA(java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void addAnswerSounds(java.lang.String)->com.ichi2.libanki.Sound:void addSounds(java.lang.String,java.lang.String,java.lang.Integer)
com.ichi2.libanki.Sound:void addSounds(java.lang.String,java.lang.String,java.lang.Integer)->com.ichi2.libanki.Sound:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.libanki.Sound:java.lang.String expandSounds(java.lang.String,java.lang.String)
com.ichi2.libanki.Sound:java.lang.String expandSounds(java.lang.String,java.lang.String)->com.ichi2.libanki.Sound:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.libanki.Card:java.lang.Integer getOrd()
com.ichi2.libanki.Card:java.lang.Integer getOrd()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.libanki.template.Template:java.lang.Boolean textContainsMathjax(java.lang.String)
com.ichi2.libanki.template.Template:java.lang.Boolean textContainsMathjax(java.lang.String)->com.ichi2.libanki.template.Template:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.anki.reviewer.ReviewerExtRegistry:void updateCssStyle(java.lang.StringBuilder)
com.ichi2.anki.reviewer.ReviewerExtRegistry:void updateCssStyle(java.lang.StringBuilder)->com.ichi2.anki.reviewer.ReviewerExtRegistry:[Z $jacocoInit()
com.ichi2.anki.reviewer.ReviewerExtRegistry:void updateCssStyle(java.lang.StringBuilder)->com.ichi2.anki.reviewer.CustomFontsReviewerExt:void updateCssStyle(java.lang.StringBuilder)
com.ichi2.anki.reviewer.CustomFontsReviewerExt:void updateCssStyle(java.lang.StringBuilder)->com.ichi2.anki.reviewer.CustomFontsReviewerExt:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.themes.Themes:java.lang.Integer getCurrentTheme(com.ichi2.anki.Reviewer)
com.ichi2.themes.Themes:java.lang.Integer getCurrentTheme(com.ichi2.anki.Reviewer)->com.ichi2.themes.Themes:[Z $jacocoInit()
com.ichi2.themes.Themes:java.lang.Integer getCurrentTheme(com.ichi2.anki.Reviewer)->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:java.lang.String smpToHtmlEntity(java.lang.String)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String smpToHtmlEntity(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.anki.Reviewer:void fillFlashcard()
com.ichi2.anki.Reviewer:void fillFlashcard()->com.ichi2.anki.Reviewer:[Z $jacocoInit()
com.ichi2.anki.Reviewer:void fillFlashcard()->com.ichi2.anki.AbstractFlashcardViewer:void fillFlashcard()
com.ichi2.anki.AbstractFlashcardViewer:void fillFlashcard()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void fillFlashcard()->com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()->com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatHelper getInstance()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatHelper getInstance()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void fillFlashcard()->com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getODid()
com.ichi2.libanki.Card:java.lang.Long getODid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getDid()
com.ichi2.libanki.Card:java.lang.Long getDid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void fillFlashcard()->com.ichi2.compat.CompatV17:void setHTML5MediaAutoPlay(com.android.webview.chromium.ContentSettingsAdapter,java.lang.Boolean)
com.ichi2.compat.CompatV17:void setHTML5MediaAutoPlay(com.android.webview.chromium.ContentSettingsAdapter,java.lang.Boolean)->com.ichi2.compat.CompatV17:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:void playSounds(java.lang.Boolean)
com.ichi2.anki.AbstractFlashcardViewer:void playSounds(java.lang.Boolean)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void playSounds(java.lang.Boolean)->com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getODid()
com.ichi2.libanki.Card:java.lang.Long getODid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getDid()
com.ichi2.libanki.Card:java.lang.Long getDid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void playSounds(java.lang.Boolean)->com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getODid()
com.ichi2.libanki.Card:java.lang.Long getODid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getDid()
com.ichi2.libanki.Card:java.lang.Long getDid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void playSounds(java.lang.Boolean)->com.ichi2.libanki.Sound:void playSounds(java.lang.Integer)
com.ichi2.libanki.Sound:void playSounds(java.lang.Integer)->com.ichi2.libanki.Sound:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardAnswer()->com.ichi2.anki.AbstractFlashcardViewer:void showEaseButtons()
com.ichi2.anki.AbstractFlashcardViewer:void showEaseButtons()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void showEaseButtons()->com.ichi2.libanki.Sched:java.lang.Integer answerButtons(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:java.lang.Integer answerButtons(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer answerButtons(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getODue()
com.ichi2.libanki.Card:java.lang.Long getODue()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer answerButtons(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getQueue()
com.ichi2.libanki.Card:java.lang.Integer getQueue()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void showEaseButtons()->com.ichi2.themes.Themes:[I getResFromAttr(com.ichi2.anki.Reviewer,[I)
com.ichi2.themes.Themes:[I getResFromAttr(com.ichi2.anki.Reviewer,[I)->com.ichi2.themes.Themes:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void showEaseButtons()->com.ichi2.themes.Themes:[I getColorFromAttr(com.ichi2.anki.Reviewer,[I)
com.ichi2.themes.Themes:[I getColorFromAttr(com.ichi2.anki.Reviewer,[I)->com.ichi2.themes.Themes:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void showEaseButtons()->com.ichi2.libanki.Sched:java.lang.String nextIvlStr(com.ichi2.anki.Reviewer,com.ichi2.libanki.Card,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.String nextIvlStr(com.ichi2.anki.Reviewer,com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.String nextIvlStr(com.ichi2.anki.Reviewer,com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Long nextIvl(com.ichi2.libanki.Card,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.Long nextIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long nextIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Card:java.lang.Integer getQueue()
com.ichi2.libanki.Card:java.lang.Integer getQueue()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long nextIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Card:java.lang.Integer getQueue()
com.ichi2.libanki.Card:java.lang.Integer getQueue()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Integer _startingLeft(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:java.lang.Integer _startingLeft(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _startingLeft(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getType()
com.ichi2.libanki.Card:java.lang.Integer getType()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _startingLeft(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getType()
com.ichi2.libanki.Card:java.lang.Integer getType()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getDid()
com.ichi2.libanki.Card:java.lang.Long getDid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getODid()
com.ichi2.libanki.Card:java.lang.Long getODid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _startingLeft(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer,java.lang.Long)
com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer,java.lang.Long)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer,java.lang.Long)->com.ichi2.libanki.Utils:java.lang.Long intNow()
com.ichi2.libanki.Utils:java.lang.Long intNow()->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.Long intNow()->com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)
com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)->com.ichi2.libanki.Utils:java.lang.Double now()
com.ichi2.libanki.Utils:java.lang.Double now()->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Card:void setLeft(java.lang.Integer)
com.ichi2.libanki.Card:void setLeft(java.lang.Integer)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getType()
com.ichi2.libanki.Card:java.lang.Integer getType()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getDid()
com.ichi2.libanki.Card:java.lang.Long getDid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getODid()
com.ichi2.libanki.Card:java.lang.Long getODid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Integer _delayForGrade(org.json.JSONObject,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.Integer _delayForGrade(org.json.JSONObject,java.lang.Integer)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.String nextIvlStr(com.ichi2.anki.Reviewer,com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Utils:java.lang.String timeQuantity(com.ichi2.anki.Reviewer,java.lang.Long)
com.ichi2.libanki.Utils:java.lang.String timeQuantity(com.ichi2.anki.Reviewer,java.lang.Long)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.String nextIvlStr(com.ichi2.anki.Reviewer,com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void showEaseButtons()->com.ichi2.libanki.Sched:java.lang.String nextIvlStr(com.ichi2.anki.Reviewer,com.ichi2.libanki.Card,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.String nextIvlStr(com.ichi2.anki.Reviewer,com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.String nextIvlStr(com.ichi2.anki.Reviewer,com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Long nextIvl(com.ichi2.libanki.Card,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.Long nextIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long nextIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Card:java.lang.Integer getQueue()
com.ichi2.libanki.Card:java.lang.Integer getQueue()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long nextIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Card:java.lang.Integer getQueue()
com.ichi2.libanki.Card:java.lang.Integer getQueue()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Integer _startingLeft(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:java.lang.Integer _startingLeft(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _startingLeft(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getType()
com.ichi2.libanki.Card:java.lang.Integer getType()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _startingLeft(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getType()
com.ichi2.libanki.Card:java.lang.Integer getType()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getDid()
com.ichi2.libanki.Card:java.lang.Long getDid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getODid()
com.ichi2.libanki.Card:java.lang.Long getODid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _startingLeft(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer,java.lang.Long)
com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer,java.lang.Long)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer,java.lang.Long)->com.ichi2.libanki.Utils:java.lang.Long intNow()
com.ichi2.libanki.Utils:java.lang.Long intNow()->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.Long intNow()->com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)
com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)->com.ichi2.libanki.Utils:java.lang.Double now()
com.ichi2.libanki.Utils:java.lang.Double now()->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Card:void setLeft(java.lang.Integer)
com.ichi2.libanki.Card:void setLeft(java.lang.Integer)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getType()
com.ichi2.libanki.Card:java.lang.Integer getType()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getDid()
com.ichi2.libanki.Card:java.lang.Long getDid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getODid()
com.ichi2.libanki.Card:java.lang.Long getODid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Card:java.lang.Integer getLeft()
com.ichi2.libanki.Card:java.lang.Integer getLeft()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Integer _delayForGrade(org.json.JSONObject,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.Integer _delayForGrade(org.json.JSONObject,java.lang.Integer)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.String nextIvlStr(com.ichi2.anki.Reviewer,com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Utils:java.lang.String timeQuantity(com.ichi2.anki.Reviewer,java.lang.Long)
com.ichi2.libanki.Utils:java.lang.String timeQuantity(com.ichi2.anki.Reviewer,java.lang.Long)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.String nextIvlStr(com.ichi2.anki.Reviewer,com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void showEaseButtons()->com.ichi2.libanki.Sched:java.lang.String nextIvlStr(com.ichi2.anki.Reviewer,com.ichi2.libanki.Card,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.String nextIvlStr(com.ichi2.anki.Reviewer,com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.String nextIvlStr(com.ichi2.anki.Reviewer,com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Long nextIvl(com.ichi2.libanki.Card,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.Long nextIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long nextIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Card:java.lang.Integer getQueue()
com.ichi2.libanki.Card:java.lang.Integer getQueue()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long nextIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Card:java.lang.Integer getQueue()
com.ichi2.libanki.Card:java.lang.Integer getQueue()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Integer _startingLeft(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:java.lang.Integer _startingLeft(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _startingLeft(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getType()
com.ichi2.libanki.Card:java.lang.Integer getType()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _startingLeft(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getType()
com.ichi2.libanki.Card:java.lang.Integer getType()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getDid()
com.ichi2.libanki.Card:java.lang.Long getDid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getODid()
com.ichi2.libanki.Card:java.lang.Long getODid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _startingLeft(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer)
com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer,java.lang.Long)
com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer,java.lang.Long)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _leftToday(org.json.JSONArray,java.lang.Integer,java.lang.Long)->com.ichi2.libanki.Utils:java.lang.Long intNow()
com.ichi2.libanki.Utils:java.lang.Long intNow()->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.Long intNow()->com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)
com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Utils:java.lang.Long intNow(java.lang.Integer)->com.ichi2.libanki.Utils:java.lang.Double now()
com.ichi2.libanki.Utils:java.lang.Double now()->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Card:void setLeft(java.lang.Integer)
com.ichi2.libanki.Card:void setLeft(java.lang.Integer)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getType()
com.ichi2.libanki.Card:java.lang.Integer getType()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getDid()
com.ichi2.libanki.Card:java.lang.Long getDid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _newConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getODid()
com.ichi2.libanki.Card:java.lang.Long getODid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Boolean _resched(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:java.lang.Boolean _resched(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Boolean _resched(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getDid()
com.ichi2.libanki.Card:java.lang.Long getDid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:org.json.JSONObject _cardConf(com.ichi2.libanki.Card)->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Long _nextLrnIvl(com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Integer _graduatingIvl(com.ichi2.libanki.Card,org.json.JSONObject,java.lang.Boolean,java.lang.Boolean)
com.ichi2.libanki.Sched:java.lang.Integer _graduatingIvl(com.ichi2.libanki.Card,org.json.JSONObject,java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer _graduatingIvl(com.ichi2.libanki.Card,org.json.JSONObject,java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Card:java.lang.Integer getType()
com.ichi2.libanki.Card:java.lang.Integer getType()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.String nextIvlStr(com.ichi2.anki.Reviewer,com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Utils:java.lang.String timeQuantity(com.ichi2.anki.Reviewer,java.lang.Long)
com.ichi2.libanki.Utils:java.lang.String timeQuantity(com.ichi2.anki.Reviewer,java.lang.Long)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.String nextIvlStr(com.ichi2.anki.Reviewer,com.ichi2.libanki.Card,java.lang.Integer)->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->androidx.appcompat.widget.AppCompatTextView:boolean dispatchTouchEvent(android.view.MotionEvent)
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->android.widget.LinearLayout:boolean dispatchTouchEvent(android.view.MotionEvent)
android.app.Activity:java.lang.Boolean dispatchTouchEvent(android.view.MotionEvent)->android.widget.LinearLayout:boolean dispatchTouchEvent(android.view.MotionEvent)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long access$400(com.ichi2.anki.Reviewer)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long access$402(com.ichi2.anki.Reviewer,java.lang.Long)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void answerCard(java.lang.Integer)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void answerCard(java.lang.Integer)->com.ichi2.anki.AbstractFlashcardViewer:void hideLookupButton()
com.ichi2.anki.AbstractFlashcardViewer:void hideLookupButton()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void answerCard(java.lang.Integer)->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.AbstractFlashcardViewer:void answerCard(java.lang.Integer)->com.ichi2.libanki.Collection:com.ichi2.libanki.Sched getSched()
com.ichi2.libanki.Collection:com.ichi2.libanki.Sched getSched()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void answerCard(java.lang.Integer)->com.ichi2.libanki.Sched:java.lang.Integer answerButtons(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:java.lang.Integer answerButtons(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer answerButtons(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getODue()
com.ichi2.libanki.Card:java.lang.Long getODue()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer answerButtons(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getQueue()
com.ichi2.libanki.Card:java.lang.Integer getQueue()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void answerCard(java.lang.Integer)->com.ichi2.libanki.Sound:void stopSounds()
com.ichi2.libanki.Sound:void stopSounds()->com.ichi2.libanki.Sound:[Z $jacocoInit()
com.ichi2.libanki.Sound:void stopSounds()->com.ichi2.anki.ReadText:void stopTts()
com.ichi2.anki.ReadText:void stopTts()->com.ichi2.anki.ReadText:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void answerCard(java.lang.Integer)->com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.AbstractFlashcardViewer$9,[Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.AbstractFlashcardViewer$9,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.AbstractFlashcardViewer$9,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.AbstractFlashcardViewer$9,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.AbstractFlashcardViewer$9,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:com.ichi2.async.DeckTask launchDeckTask(java.lang.Integer,com.ichi2.anki.AbstractFlashcardViewer$9,[Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onPreExecute()
com.ichi2.async.DeckTask:void onPreExecute()->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPreExecute()->com.ichi2.async.BaseAsyncTask:void onPreExecute()
com.ichi2.async.BaseAsyncTask:void onPreExecute()->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onPreExecute()->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPreExecute()->com.ichi2.anki.AbstractFlashcardViewer:void access$1300(com.ichi2.anki.Reviewer)
com.ichi2.anki.AbstractFlashcardViewer:void access$1300(com.ichi2.anki.Reviewer)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void access$1300(com.ichi2.anki.Reviewer)->com.ichi2.anki.AbstractFlashcardViewer:void blockControls()
com.ichi2.anki.AbstractFlashcardViewer:void blockControls()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void blockControls()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.AbstractFlashcardViewer:void access$1100(com.ichi2.anki.Reviewer)
com.ichi2.anki.AbstractFlashcardViewer:void access$1100(com.ichi2.anki.Reviewer)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void access$1100(com.ichi2.anki.Reviewer)->com.ichi2.anki.AbstractFlashcardViewer:void updateTypeAnswerInfo()
com.ichi2.anki.AbstractFlashcardViewer:void updateTypeAnswerInfo()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateTypeAnswerInfo()->com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean)
com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean)->com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean,java.lang.Boolean)
com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Card:java.lang.String css()
com.ichi2.libanki.Card:java.lang.String css()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.String css()->com.ichi2.libanki.Card:org.json.JSONObject model()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()
com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)
com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Note:java.lang.Long getMid()
com.ichi2.libanki.Note:java.lang.Long getMid()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Card:java.util.HashMap _getQA(java.lang.Boolean,java.lang.Boolean)
com.ichi2.libanki.Card:java.util.HashMap _getQA(java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.AnkiActivity:void hideProgressBar()
com.ichi2.anki.AnkiActivity:void hideProgressBar()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.AbstractFlashcardViewer:void access$1200(com.ichi2.anki.Reviewer)
com.ichi2.anki.AbstractFlashcardViewer:void access$1200(com.ichi2.anki.Reviewer)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void access$1200(com.ichi2.anki.Reviewer)->com.ichi2.anki.AbstractFlashcardViewer:void unblockControls()
com.ichi2.anki.AbstractFlashcardViewer:void unblockControls()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void unblockControls()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.Reviewer:void displayCardQuestion()
com.ichi2.anki.Reviewer:void displayCardQuestion()->com.ichi2.anki.Reviewer:[Z $jacocoInit()
com.ichi2.anki.Reviewer:void displayCardQuestion()->com.ichi2.anki.AbstractFlashcardViewer:void initTimer()
com.ichi2.anki.AbstractFlashcardViewer:void initTimer()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void initTimer()->com.ichi2.libanki.Card:java.lang.Boolean showTimer()
com.ichi2.libanki.Card:java.lang.Boolean showTimer()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.Boolean showTimer()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.Boolean showTimer()->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void initTimer()->com.ichi2.libanki.Card:java.lang.Integer timeLimit()
com.ichi2.libanki.Card:java.lang.Integer timeLimit()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.Integer timeLimit()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.Integer timeLimit()->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.Reviewer:void displayCardQuestion()->com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.anki.AbstractFlashcardViewer:void setInterface()
com.ichi2.anki.AbstractFlashcardViewer:void setInterface()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.libanki.Card:java.lang.Boolean isEmpty()
com.ichi2.libanki.Card:java.lang.Boolean isEmpty()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.Boolean isEmpty()->com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()
com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.Boolean isEmpty()->com.ichi2.libanki.Card:org.json.JSONObject model()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()
com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)
com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Note:java.lang.Long getMid()
com.ichi2.libanki.Note:java.lang.Long getMid()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.Boolean isEmpty()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)
com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.Boolean isEmpty()->com.ichi2.libanki.Note:[Ljava.lang.String; getFields()
com.ichi2.libanki.Note:[Ljava.lang.String; getFields()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.Boolean isEmpty()->com.ichi2.libanki.Utils:java.lang.String joinFields([Ljava.lang.String;)
com.ichi2.libanki.Utils:java.lang.String joinFields([Ljava.lang.String;)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.Boolean isEmpty()->com.ichi2.libanki.Models:java.util.ArrayList availOrds(org.json.JSONObject,java.lang.String)
com.ichi2.libanki.Models:java.util.ArrayList availOrds(org.json.JSONObject,java.lang.String)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.libanki.Models:java.util.ArrayList availOrds(org.json.JSONObject,java.lang.String)->com.ichi2.libanki.Utils:[Ljava.lang.String; splitFields(java.lang.String)
com.ichi2.libanki.Utils:[Ljava.lang.String; splitFields(java.lang.String)->com.ichi2.libanki.Utils:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.libanki.Card:java.lang.String q()
com.ichi2.libanki.Card:java.lang.String q()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.String q()->com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean)
com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean)->com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean,java.lang.Boolean)
com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Card:java.lang.String css()
com.ichi2.libanki.Card:java.lang.String css()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.String css()->com.ichi2.libanki.Card:org.json.JSONObject model()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()
com.ichi2.libanki.Collection:com.ichi2.libanki.Models getModels()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)
com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Note:java.lang.Long getMid()
com.ichi2.libanki.Note:java.lang.Long getMid()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.libanki.Card:org.json.JSONObject model()->com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Models:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Models:[Z $jacocoInit()
com.ichi2.libanki.Card:java.lang.String q(java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Card:java.util.HashMap _getQA(java.lang.Boolean,java.lang.Boolean)
com.ichi2.libanki.Card:java.util.HashMap _getQA(java.lang.Boolean,java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.libanki.Collection:com.ichi2.libanki.Media getMedia()
com.ichi2.libanki.Collection:com.ichi2.libanki.Media getMedia()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.libanki.Media:java.lang.String escapeImages(java.lang.String)
com.ichi2.libanki.Media:java.lang.String escapeImages(java.lang.String)->com.ichi2.libanki.Media:[Z $jacocoInit()
com.ichi2.libanki.Media:java.lang.String escapeImages(java.lang.String)->com.ichi2.libanki.Media:java.lang.String escapeImages(java.lang.String,java.lang.Boolean)
com.ichi2.libanki.Media:java.lang.String escapeImages(java.lang.String,java.lang.Boolean)->com.ichi2.libanki.Media:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.String typeAnsQuestionFilter(java.lang.String)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String typeAnsQuestionFilter(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.String enrichWithQADiv(java.lang.String,java.lang.Boolean)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String enrichWithQADiv(java.lang.String,java.lang.Boolean)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.libanki.Sound:void resetSounds()
com.ichi2.libanki.Sound:void resetSounds()->com.ichi2.libanki.Sound:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.libanki.Sound:void addSounds(java.lang.String,java.lang.String,java.lang.Integer)
com.ichi2.libanki.Sound:void addSounds(java.lang.String,java.lang.String,java.lang.Integer)->com.ichi2.libanki.Sound:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.libanki.Sound:java.lang.String expandSounds(java.lang.String,java.lang.String)
com.ichi2.libanki.Sound:java.lang.String expandSounds(java.lang.String,java.lang.String)->com.ichi2.libanki.Sound:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.libanki.Card:java.lang.Integer getOrd()
com.ichi2.libanki.Card:java.lang.Integer getOrd()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.libanki.template.Template:java.lang.Boolean textContainsMathjax(java.lang.String)
com.ichi2.libanki.template.Template:java.lang.Boolean textContainsMathjax(java.lang.String)->com.ichi2.libanki.template.Template:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.anki.reviewer.ReviewerExtRegistry:void updateCssStyle(java.lang.StringBuilder)
com.ichi2.anki.reviewer.ReviewerExtRegistry:void updateCssStyle(java.lang.StringBuilder)->com.ichi2.anki.reviewer.ReviewerExtRegistry:[Z $jacocoInit()
com.ichi2.anki.reviewer.ReviewerExtRegistry:void updateCssStyle(java.lang.StringBuilder)->com.ichi2.anki.reviewer.CustomFontsReviewerExt:void updateCssStyle(java.lang.StringBuilder)
com.ichi2.anki.reviewer.CustomFontsReviewerExt:void updateCssStyle(java.lang.StringBuilder)->com.ichi2.anki.reviewer.CustomFontsReviewerExt:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.themes.Themes:java.lang.Integer getCurrentTheme(com.ichi2.anki.Reviewer)
com.ichi2.themes.Themes:java.lang.Integer getCurrentTheme(com.ichi2.anki.Reviewer)->com.ichi2.themes.Themes:[Z $jacocoInit()
com.ichi2.themes.Themes:java.lang.Integer getCurrentTheme(com.ichi2.anki.Reviewer)->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:java.lang.String smpToHtmlEntity(java.lang.String)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.String smpToHtmlEntity(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.AnkiDroidApp:android.app.SharedPreferencesImpl getSharedPrefs_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.AnkiDroidApp:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.anki.Reviewer:void fillFlashcard()
com.ichi2.anki.Reviewer:void fillFlashcard()->com.ichi2.anki.Reviewer:[Z $jacocoInit()
com.ichi2.anki.Reviewer:void fillFlashcard()->com.ichi2.anki.AbstractFlashcardViewer:void fillFlashcard()
com.ichi2.anki.AbstractFlashcardViewer:void fillFlashcard()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void fillFlashcard()->com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatV23 getCompat()->com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatHelper getInstance()
com.ichi2.compat.CompatHelper:com.ichi2.compat.CompatHelper getInstance()->com.ichi2.compat.CompatHelper:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void fillFlashcard()->com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getODid()
com.ichi2.libanki.Card:java.lang.Long getODid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getDid()
com.ichi2.libanki.Card:java.lang.Long getDid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void fillFlashcard()->com.ichi2.compat.CompatV17:void setHTML5MediaAutoPlay(com.android.webview.chromium.ContentSettingsAdapter,java.lang.Boolean)
com.ichi2.compat.CompatV17:void setHTML5MediaAutoPlay(com.android.webview.chromium.ContentSettingsAdapter,java.lang.Boolean)->com.ichi2.compat.CompatV17:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void fillFlashcard()->com.ichi2.anki.AbstractFlashcardViewer:void updateForNewCard()
com.ichi2.anki.AbstractFlashcardViewer:void updateForNewCard()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateForNewCard()->com.ichi2.anki.AbstractFlashcardViewer:void updateScreenCounts()
com.ichi2.anki.AbstractFlashcardViewer:void updateScreenCounts()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateScreenCounts()->com.ichi2.libanki.Sched:[I counts(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:[I counts(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:[I counts(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:java.lang.Integer countIdx(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:java.lang.Integer countIdx(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer countIdx(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getQueue()
com.ichi2.libanki.Card:java.lang.Integer getQueue()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer countIdx(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getQueue()
com.ichi2.libanki.Card:java.lang.Integer getQueue()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:[I counts(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getLeft()
com.ichi2.libanki.Card:java.lang.Integer getLeft()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateScreenCounts()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.AbstractFlashcardViewer:void updateScreenCounts()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateScreenCounts()->com.ichi2.libanki.Card:java.lang.Long getDid()
com.ichi2.libanki.Card:java.lang.Long getDid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateScreenCounts()->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateScreenCounts()->com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)
com.ichi2.libanki.Sched:java.lang.Integer eta([I,java.lang.Boolean)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateScreenCounts()->com.ichi2.libanki.Sched:java.lang.Integer countIdx(com.ichi2.libanki.Card)
com.ichi2.libanki.Sched:java.lang.Integer countIdx(com.ichi2.libanki.Card)->com.ichi2.libanki.Sched:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer countIdx(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getQueue()
com.ichi2.libanki.Card:java.lang.Integer getQueue()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Sched:java.lang.Integer countIdx(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Integer getQueue()
com.ichi2.libanki.Card:java.lang.Integer getQueue()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateForNewCard()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void updateCard(java.lang.String)->com.ichi2.anki.AbstractFlashcardViewer:void playSounds(java.lang.Boolean)
com.ichi2.anki.AbstractFlashcardViewer:void playSounds(java.lang.Boolean)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void playSounds(java.lang.Boolean)->com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getODid()
com.ichi2.libanki.Card:java.lang.Long getODid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getDid()
com.ichi2.libanki.Card:java.lang.Long getDid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void playSounds(java.lang.Boolean)->com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getODid()
com.ichi2.libanki.Card:java.lang.Long getODid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getDeckIdForCard(com.ichi2.libanki.Card)->com.ichi2.libanki.Card:java.lang.Long getDid()
com.ichi2.libanki.Card:java.lang.Long getDid()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:org.json.JSONObject getConfigForCurrentCard_LZHChange()->com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject confForDid(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject getConf(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void playSounds(java.lang.Boolean)->com.ichi2.libanki.Sound:void playSounds(java.lang.Integer)
com.ichi2.libanki.Sound:void playSounds(java.lang.Integer)->com.ichi2.libanki.Sound:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.anki.AbstractFlashcardViewer:void hideEaseButtons()
com.ichi2.anki.AbstractFlashcardViewer:void hideEaseButtons()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void hideEaseButtons()->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Boolean typeAnswer_LZHChange()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:void displayCardQuestion()->com.ichi2.libanki.Card:java.lang.Long getId()
com.ichi2.libanki.Card:java.lang.Long getId()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.async.DeckTask:void onProgressUpdate([Lcom.ichi2.async.DeckTask$TaskData;)->com.ichi2.libanki.Collection:void timeboxReached()
com.ichi2.libanki.Collection:void timeboxReached()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.DeckTask:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.BaseAsyncTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)
com.ichi2.async.BaseAsyncTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.async.BaseAsyncTask:[Z $jacocoInit()
com.ichi2.async.BaseAsyncTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.utils.Threads:void checkMainThread()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.utils.Threads:void checkMainThread()->com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()
com.ichi2.utils.Threads:java.lang.Boolean isOnMainThread()->com.ichi2.utils.Threads:[Z $jacocoInit()
com.ichi2.async.DeckTask:void onPostExecute(com.ichi2.async.DeckTask$TaskData)->com.ichi2.anki.AbstractFlashcardViewer:void refreshActionBar()
com.ichi2.anki.AbstractFlashcardViewer:void refreshActionBar()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.Reviewer:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.Reviewer:void setCustomButtons(androidx.appcompat.view.menu.MenuBuilder)
com.ichi2.anki.Reviewer:void setCustomButtons(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.Reviewer:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.libanki.Card:com.ichi2.libanki.Note note()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)
com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.libanki.Note:java.lang.Boolean hasTag(java.lang.String)
com.ichi2.libanki.Note:java.lang.Boolean hasTag(java.lang.String)->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.libanki.Note:java.lang.Boolean hasTag(java.lang.String)->com.ichi2.libanki.Collection:com.ichi2.libanki.Tags getTags()
com.ichi2.libanki.Collection:com.ichi2.libanki.Tags getTags()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Note:java.lang.Boolean hasTag(java.lang.String)->com.ichi2.libanki.Tags:java.lang.Boolean inList(java.lang.String,java.util.ArrayList)
com.ichi2.libanki.Tags:java.lang.Boolean inList(java.lang.String,java.util.ArrayList)->com.ichi2.libanki.Tags:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.libanki.Collection:java.lang.Boolean undoAvailable()
com.ichi2.libanki.Collection:java.lang.Boolean undoAvailable()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:java.lang.Boolean colIsOpen()->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getParentDid()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getParentDid()->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getParentDid()->com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.AnkiActivity:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()
com.ichi2.anki.CollectionHelper:com.ichi2.anki.CollectionHelper getInstance()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.AnkiActivity:com.ichi2.libanki.Collection getCol()->com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCollectionPath(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.String getCurrentAnkiDroidDirectory_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()
com.ichi2.anki.CollectionHelper:java.lang.String getDefaultAnkiDroidDirectory()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:com.ichi2.libanki.Collection getCol_LZHChange(com.ichi2.anki.Reviewer)->com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.anki.CollectionHelper:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.anki.CollectionHelper:java.lang.Boolean colIsOpen_LZHChange()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isOpen()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getParentDid()->com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()
com.ichi2.libanki.Collection:com.ichi2.libanki.Decks getDecks()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.anki.AbstractFlashcardViewer:java.lang.Long getParentDid()->com.ichi2.libanki.Decks:org.json.JSONObject current()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:java.lang.Long selected()
com.ichi2.libanki.Decks:java.lang.Long selected()->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.lang.Long selected()->com.ichi2.libanki.Collection:org.json.JSONObject getConf()
com.ichi2.libanki.Collection:org.json.JSONObject getConf()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject current()->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.libanki.Decks:java.lang.Boolean isDyn(java.lang.Long)
com.ichi2.libanki.Decks:java.lang.Boolean isDyn(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:java.lang.Boolean isDyn(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long)->com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)
com.ichi2.libanki.Decks:org.json.JSONObject get(java.lang.Long,java.lang.Boolean)->com.ichi2.libanki.Decks:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.Reviewer:java.lang.Boolean dismissNoteAvailable(com.ichi2.libanki.Collection$DismissType)
com.ichi2.anki.Reviewer:java.lang.Boolean dismissNoteAvailable(com.ichi2.libanki.Collection$DismissType)->com.ichi2.anki.Reviewer:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean dismissNoteAvailable(com.ichi2.libanki.Collection$DismissType)->com.ichi2.libanki.Card:com.ichi2.libanki.Note note()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)
com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean dismissNoteAvailable(com.ichi2.libanki.Collection$DismissType)->com.ichi2.libanki.Card:com.ichi2.libanki.Note note()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)
com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean dismissNoteAvailable(com.ichi2.libanki.Collection$DismissType)->com.ichi2.libanki.Note:java.util.ArrayList cards()
com.ichi2.libanki.Note:java.util.ArrayList cards()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.libanki.Note:java.util.ArrayList cards()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Note:java.util.ArrayList cards()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.Note:java.util.ArrayList cards()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteProgram:[Ljava.lang.String; getColumnNames()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
com.ichi2.libanki.Note:java.util.ArrayList cards()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()->io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.String getPath()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void clearOrCreateWindow(java.lang.String)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer cursorPickFillWindowStartPosition(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()
io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.String getSql()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:void getBindArgs()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()
io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:void setStartPosition(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
com.ichi2.libanki.Note:java.util.ArrayList cards()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Note:java.util.ArrayList cards()->com.ichi2.libanki.Collection:com.ichi2.libanki.Card getCard(java.lang.Long)
com.ichi2.libanki.Collection:com.ichi2.libanki.Card getCard(java.lang.Long)->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Collection:com.ichi2.libanki.Card getCard(java.lang.Long)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Collection:com.ichi2.libanki.Card getCard(java.lang.Long)->com.ichi2.libanki.Card:void load()
com.ichi2.libanki.Card:void load()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:void load()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Card:void load()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.Card:void load()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteProgram:[Ljava.lang.String; getColumnNames()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToFirst()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToFirst()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()->io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.String getPath()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void clearOrCreateWindow(java.lang.String)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer cursorPickFillWindowStartPosition(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()
io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.String getSql()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:void getBindArgs()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()
io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:void setStartPosition(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.String getString(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.String getString(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.String getString(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.String getString(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.sqlite.SQLiteCursor:void close()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.AbstractCursor:void close()
io.requery.android.database.AbstractCursor:void close()->io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractWindowedCursor:void closeWindow()
io.requery.android.database.AbstractWindowedCursor:void closeWindow()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.CursorWindow:void onAllReferencesReleased()
io.requery.android.database.CursorWindow:void onAllReferencesReleased()->io.requery.android.database.CursorWindow:void dispose()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()
io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()->io.requery.android.database.sqlite.SQLiteProgram:void clearBindings()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:void cursorClosed()
com.ichi2.libanki.Note:java.util.ArrayList cards()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
com.ichi2.libanki.Note:java.util.ArrayList cards()->io.requery.android.database.sqlite.SQLiteCursor:void close()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.AbstractCursor:void close()
io.requery.android.database.AbstractCursor:void close()->io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractWindowedCursor:void closeWindow()
io.requery.android.database.AbstractWindowedCursor:void closeWindow()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.CursorWindow:void onAllReferencesReleased()
io.requery.android.database.CursorWindow:void onAllReferencesReleased()->io.requery.android.database.CursorWindow:void dispose()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()
io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()->io.requery.android.database.sqlite.SQLiteProgram:void clearBindings()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:void cursorClosed()
com.ichi2.anki.Reviewer:java.lang.Boolean onCreateOptionsMenu(androidx.appcompat.view.menu.MenuBuilder)->com.ichi2.anki.Reviewer:java.lang.Boolean dismissNoteAvailable(com.ichi2.libanki.Collection$DismissType)
com.ichi2.anki.Reviewer:java.lang.Boolean dismissNoteAvailable(com.ichi2.libanki.Collection$DismissType)->com.ichi2.anki.Reviewer:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean dismissNoteAvailable(com.ichi2.libanki.Collection$DismissType)->com.ichi2.libanki.Card:com.ichi2.libanki.Note note()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)
com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean dismissNoteAvailable(com.ichi2.libanki.Collection$DismissType)->com.ichi2.libanki.Card:com.ichi2.libanki.Note note()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:com.ichi2.libanki.Note note()->com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)
com.ichi2.libanki.Card:com.ichi2.libanki.Note note(java.lang.Boolean)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.anki.Reviewer:java.lang.Boolean dismissNoteAvailable(com.ichi2.libanki.Collection$DismissType)->com.ichi2.libanki.Note:java.util.ArrayList cards()
com.ichi2.libanki.Note:java.util.ArrayList cards()->com.ichi2.libanki.Note:[Z $jacocoInit()
com.ichi2.libanki.Note:java.util.ArrayList cards()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Note:java.util.ArrayList cards()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.Note:java.util.ArrayList cards()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteProgram:[Ljava.lang.String; getColumnNames()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
com.ichi2.libanki.Note:java.util.ArrayList cards()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()->io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.String getPath()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void clearOrCreateWindow(java.lang.String)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer cursorPickFillWindowStartPosition(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()
io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.String getSql()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:void getBindArgs()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()
io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:void setStartPosition(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
com.ichi2.libanki.Note:java.util.ArrayList cards()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Note:java.util.ArrayList cards()->com.ichi2.libanki.Collection:com.ichi2.libanki.Card getCard(java.lang.Long)
com.ichi2.libanki.Collection:com.ichi2.libanki.Card getCard(java.lang.Long)->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Collection:com.ichi2.libanki.Card getCard(java.lang.Long)->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Collection:com.ichi2.libanki.Card getCard(java.lang.Long)->com.ichi2.libanki.Card:void load()
com.ichi2.libanki.Card:void load()->com.ichi2.libanki.Card:[Z $jacocoInit()
com.ichi2.libanki.Card:void load()->com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()
com.ichi2.libanki.Collection:com.ichi2.libanki.DB getDb()->com.ichi2.libanki.Collection:[Z $jacocoInit()
com.ichi2.libanki.Card:void load()->com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
com.ichi2.libanki.DB:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->com.ichi2.libanki.DB:[Z $jacocoInit()
com.ichi2.libanki.Card:void load()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor query(java.lang.String,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteSession:void prepare(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal,io.requery.android.database.sqlite.SQLiteStatementInfo)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.CloseGuard:io.requery.android.database.sqlite.CloseGuard get()
io.requery.android.database.sqlite.SQLiteDirectCursorDriver:io.requery.android.database.sqlite.SQLiteCursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,[Ljava.lang.Object;)->io.requery.android.database.sqlite.SQLiteProgram:[Ljava.lang.String; getColumnNames()
io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteCursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,[Ljava.lang.Object;,java.lang.String,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToFirst()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToFirst()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()->io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteDatabase getDatabase()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.String getPath()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void clearOrCreateWindow(java.lang.String)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer cursorPickFillWindowStartPosition(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()
io.requery.android.database.sqlite.SQLiteProgram:io.requery.android.database.sqlite.SQLiteSession getSession()->io.requery.android.database.sqlite.SQLiteDatabase:io.requery.android.database.sqlite.SQLiteSession getThreadSession()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.String getSql()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:void getBindArgs()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()
io.requery.android.database.sqlite.SQLiteProgram:java.lang.Integer getConnectionFlags()->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Integer getThreadDefaultConnectionFlags(java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteDatabase:java.lang.Boolean isMainThread()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Boolean executeSpecial(java.lang.String,[Ljava.lang.Object;,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteStatementType:java.lang.Integer getSqlStatementType(java.lang.String)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteSession:void acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void throwIfClosedLocked()
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:void tryAcquireNonPrimaryConnectionLocked(java.lang.String,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnectionPool:void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,java.lang.Integer)->io.requery.android.database.sqlite.SQLiteConnection:void setOnlyAllowReadOnlyOperations(java.lang.Boolean)
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void acquireReference()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,[Ljava.lang.Object;)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)->io.requery.android.database.sqlite.SQLiteDatabaseConfiguration:java.lang.Boolean isInMemoryDb()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void attachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.CursorWindow:void setStartPosition(java.lang.Integer)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void detachCancellationSignal(androidx.core.os.CancellationSignal)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteConnection:void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
io.requery.android.database.sqlite.SQLiteConnection:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteSession:java.lang.Integer executeForCursorWindow(java.lang.String,[Ljava.lang.Object;,io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer,androidx.core.os.CancellationSignal)->io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()
io.requery.android.database.sqlite.SQLiteSession:void releaseConnection()->io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnection:java.lang.Boolean isPrimaryConnection()
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:java.lang.Boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
io.requery.android.database.sqlite.SQLiteConnectionPool:void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)->io.requery.android.database.sqlite.SQLiteConnectionPool:void wakeConnectionWaitersLocked()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteQuery:java.lang.Integer fillWindow(io.requery.android.database.CursorWindow,java.lang.Integer,java.lang.Integer,java.lang.Boolean)->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteCursor:void fillWindow(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getStartPosition()
io.requery.android.database.sqlite.SQLiteCursor:java.lang.Boolean onMove(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getNumRows()
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Long getLong(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.Integer getInt(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)
io.requery.android.database.CursorWindow:java.lang.Integer getInt(java.lang.Integer,java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.Long getLong(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.AbstractWindowedCursor:java.lang.String getString(java.lang.Integer)
io.requery.android.database.AbstractWindowedCursor:java.lang.String getString(java.lang.Integer)->io.requery.android.database.AbstractWindowedCursor:void checkPosition()
io.requery.android.database.AbstractWindowedCursor:void checkPosition()->io.requery.android.database.AbstractCursor:void checkPosition()
io.requery.android.database.AbstractCursor:void checkPosition()->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
io.requery.android.database.AbstractWindowedCursor:java.lang.String getString(java.lang.Integer)->io.requery.android.database.CursorWindow:java.lang.String getString(java.lang.Integer,java.lang.Integer)
com.ichi2.libanki.Card:void load()->io.requery.android.database.sqlite.SQLiteCursor:void close()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.AbstractCursor:void close()
io.requery.android.database.AbstractCursor:void close()->io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractWindowedCursor:void closeWindow()
io.requery.android.database.AbstractWindowedCursor:void closeWindow()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.CursorWindow:void onAllReferencesReleased()
io.requery.android.database.CursorWindow:void onAllReferencesReleased()->io.requery.android.database.CursorWindow:void dispose()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()
io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()->io.requery.android.database.sqlite.SQLiteProgram:void clearBindings()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:void cursorClosed()
com.ichi2.libanki.Note:java.util.ArrayList cards()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToNext()->io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)
io.requery.android.database.AbstractCursor:java.lang.Boolean moveToPosition(java.lang.Integer)->io.requery.android.database.sqlite.SQLiteCursor:java.lang.Integer getCount()
com.ichi2.libanki.Note:java.util.ArrayList cards()->io.requery.android.database.sqlite.SQLiteCursor:void close()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.AbstractCursor:void close()
io.requery.android.database.AbstractCursor:void close()->io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractCursor:void onDeactivateOrClose()
io.requery.android.database.AbstractWindowedCursor:void onDeactivateOrClose()->io.requery.android.database.AbstractWindowedCursor:void closeWindow()
io.requery.android.database.AbstractWindowedCursor:void closeWindow()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.CursorWindow:void onAllReferencesReleased()
io.requery.android.database.CursorWindow:void onAllReferencesReleased()->io.requery.android.database.CursorWindow:void dispose()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteClosable:void close()
io.requery.android.database.sqlite.SQLiteClosable:void close()->io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()
io.requery.android.database.sqlite.SQLiteClosable:void releaseReference()->io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()
io.requery.android.database.sqlite.SQLiteProgram:void onAllReferencesReleased()->io.requery.android.database.sqlite.SQLiteProgram:void clearBindings()
io.requery.android.database.sqlite.SQLiteCursor:void close()->io.requery.android.database.sqlite.SQLiteDirectCursorDriver:void cursorClosed()
com.ichi2.anki.AbstractFlashcardViewer:androidx.appcompat.widget.AppCompatTextView access$1400(com.ichi2.anki.Reviewer)->com.ichi2.anki.AbstractFlashcardViewer:[Z $jacocoInit()
